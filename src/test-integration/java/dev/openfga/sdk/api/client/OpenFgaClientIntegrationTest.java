/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.api.client;

import static org.junit.jupiter.api.Assertions.*;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import dev.openfga.sdk.api.client.model.*;
import dev.openfga.sdk.api.configuration.*;
import dev.openfga.sdk.api.model.*;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import org.testcontainers.openfga.OpenFGAContainer;

@TestInstance(Lifecycle.PER_CLASS)
@Testcontainers
public class OpenFgaClientIntegrationTest {

    @Container
    private static final OpenFGAContainer openfga = new OpenFGAContainer("openfga/openfga:v1.10.2");

    private static final ObjectMapper mapper = new ObjectMapper().findAndRegisterModules();
    private static final String DEFAULT_USER = "user:81684243-9356-4421-8fbf-a4f8d36aa31b";
    private static final String DEFAULT_DOC = "document:2021-budget";
    private static final ClientTupleKeyWithoutCondition DEFAULT_TUPLE_KEY_NO_CONDITION =
            new ClientTupleKeyWithoutCondition()
                    .user(DEFAULT_USER)
                    .relation("reader")
                    ._object(DEFAULT_DOC);
    private static final ClientTupleKey DEFAULT_TUPLE_KEY = new ClientTupleKeyWithoutCondition()
            .user(DEFAULT_USER)
            .relation("reader")
            ._object(DEFAULT_DOC)
            .condition(null); // TODO: Add integ tests with conditions
    private static final ClientAssertion DEFAULT_ASSERTION = new ClientAssertion()
            .user(DEFAULT_USER)
            .relation("reader")
            ._object(DEFAULT_DOC)
            .expectation(true);
    private String authModelJson;

    private OpenFgaClient fga;

    @BeforeAll
    public void loadAuthModelJson() throws IOException {
        authModelJson = Files.readString(Paths.get("src", "test-integration", "resources", "auth-model.json"));
    }

    @BeforeEach
    public void initializeApi() throws Exception {
        System.setProperty("HttpRequestAttempt.debug-logging", "enable");

        ClientConfiguration apiConfig = new ClientConfiguration().apiUrl(openfga.getHttpEndpoint());
        fga = new OpenFgaClient(apiConfig);
    }

    @Test
    public void createStore() throws Exception {
        // Given
        String storeName = thisTestName();
        CreateStoreRequest createStoreRequest = new CreateStoreRequest().name(storeName);

        // When
        CreateStoreResponse response = fga.createStore(createStoreRequest).get();

        // Then
        assertEquals("OpenFgaClientIntegrationTest.createStore", response.getName());
    }

    @Test
    public void deleteStore() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);
        fga.setStoreId(storeId);

        // When
        fga.deleteStore().get();

        // Then
        ListStoresResponse response = fga.listStores().get();
        assertNotNull(response.getStores());
        boolean itWasDeleted = response.getStores().stream().map(Store::getId).noneMatch(storeId::equals);
        assertTrue(itWasDeleted, String.format("No stores should remain with the id %s.", storeId));
    }

    @Test
    public void getStore() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);
        fga.setStoreId(storeId);

        // When
        GetStoreResponse response = fga.getStore().get();

        // Then
        assertEquals(storeName, response.getName());
    }

    @Test
    public void listStores() throws Exception {
        // Given
        String testName = thisTestName();
        String store1 = testName + "-store1";
        String store2 = testName + "-store2";
        String store3 = testName + "-store3";
        List<String> stores = List.of(store1, store2, store3);
        for (String store : stores) {
            createStore(store);
        }

        // When
        ListStoresResponse response = fga.listStores().get();

        // Then
        for (String store : stores) {
            assertNotNull(response.getStores());
            boolean exists = response.getStores().stream().map(Store::getName).anyMatch(store::equals);
            assertTrue(exists, String.format("Store %s should be in listStores response", store));
        }
    }

    @Test
    public void readAuthModel() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);
        fga.setStoreId(storeId);
        String authModelId = writeAuthModel(storeId);
        fga.setAuthorizationModelId(authModelId);

        // When
        ReadAuthorizationModelResponse response = fga.readAuthorizationModel().get();

        // Then
        AuthorizationModel authModel = response.getAuthorizationModel();
        assertNotNull(authModel);
        assertEquals(authModelId, response.getAuthorizationModel().getId());
        String typeDefsJson = mapper.writeValueAsString(authModel.getTypeDefinitions());
        assertEquals(
                "[{\"type\":\"user\",\"relations\":{},\"metadata\":null},{\"type\":\"document\",\"relations\":{\"owner\":{\"this\":{},\"computedUserset\":null,\"tupleToUserset\":null,\"union\":null,\"intersection\":null,\"difference\":null},\"reader\":{\"this\":{},\"computedUserset\":null,\"tupleToUserset\":null,\"union\":null,\"intersection\":null,\"difference\":null},\"writer\":{\"this\":{},\"computedUserset\":null,\"tupleToUserset\":null,\"union\":null,\"intersection\":null,\"difference\":null}},\"metadata\":{\"relations\":{\"conditional_reader\":{\"directly_related_user_types\":[{\"type\":\"user\",\"relation\":null,\"wildcard\":null,\"condition\":\"name_starts_with_a\"}],\"module\":\"\",\"source_info\":null},\"owner\":{\"directly_related_user_types\":[{\"type\":\"user\",\"relation\":null,\"wildcard\":null,\"condition\":\"\"}],\"module\":\"\",\"source_info\":null},\"reader\":{\"directly_related_user_types\":[{\"type\":\"user\",\"relation\":null,\"wildcard\":null,\"condition\":\"\"}],\"module\":\"\",\"source_info\":null},\"writer\":{\"directly_related_user_types\":[{\"type\":\"user\",\"relation\":null,\"wildcard\":null,\"condition\":\"\"}],\"module\":\"\",\"source_info\":null}},\"module\":\"\",\"source_info\":null}}]",
                typeDefsJson);
    }

    @Test
    public void readAuthModels() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);
        fga.setStoreId(storeId);
        String authModelId = writeAuthModel(storeId);
        fga.setAuthorizationModelId(authModelId);
        var options = new ClientReadAuthorizationModelsOptions();

        // When
        ReadAuthorizationModelsResponse response =
                fga.readAuthorizationModels(options).get();

        // Then
        assertNotNull(response.getAuthorizationModels());
        response.getAuthorizationModels().stream()
                .filter(authModel -> authModelId.equals(authModel.getId()))
                .forEach(authModel -> {
                    assertEquals(authModelId, authModel.getId());
                    try {
                        String typeDefsJson = mapper.writeValueAsString(authModel.getTypeDefinitions());

                        assertEquals(
                                "[{\"type\":\"user\",\"relations\":{},\"metadata\":null},{\"type\":\"document\",\"relations\":{\"owner\":{\"this\":{},\"computedUserset\":null,\"tupleToUserset\":null,\"union\":null,\"intersection\":null,\"difference\":null},\"reader\":{\"this\":{},\"computedUserset\":null,\"tupleToUserset\":null,\"union\":null,\"intersection\":null,\"difference\":null},\"writer\":{\"this\":{},\"computedUserset\":null,\"tupleToUserset\":null,\"union\":null,\"intersection\":null,\"difference\":null}},\"metadata\":{\"relations\":{\"conditional_reader\":{\"directly_related_user_types\":[{\"type\":\"user\",\"relation\":null,\"wildcard\":null,\"condition\":\"name_starts_with_a\"}],\"module\":\"\",\"source_info\":null},\"owner\":{\"directly_related_user_types\":[{\"type\":\"user\",\"relation\":null,\"wildcard\":null,\"condition\":\"\"}],\"module\":\"\",\"source_info\":null},\"reader\":{\"directly_related_user_types\":[{\"type\":\"user\",\"relation\":null,\"wildcard\":null,\"condition\":\"\"}],\"module\":\"\",\"source_info\":null},\"writer\":{\"directly_related_user_types\":[{\"type\":\"user\",\"relation\":null,\"wildcard\":null,\"condition\":\"\"}],\"module\":\"\",\"source_info\":null}},\"module\":\"\",\"source_info\":null}}]",
                                typeDefsJson);
                    } catch (JsonProcessingException ex) {
                        assertNull(ex);
                    }
                });
    }

    @Test
    public void writeAuthModel() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);
        fga.setStoreId(storeId);
        WriteAuthorizationModelRequest request = mapper.readValue(authModelJson, WriteAuthorizationModelRequest.class);

        // When
        WriteAuthorizationModelResponse response =
                fga.writeAuthorizationModel(request).get();

        // Then
        assertNotNull(response);
        assertNotNull(response.getAuthorizationModelId());
        assertNotEquals("", response.getAuthorizationModelId());
    }

    @Test
    public void write_and_read() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);
        fga.setStoreId(storeId);
        String authModelId = writeAuthModel(storeId);
        fga.setAuthorizationModelId(authModelId);

        ClientWriteRequest writeRequest = new ClientWriteRequest().writes(List.of(DEFAULT_TUPLE_KEY));
        ClientReadRequest readRequest =
                new ClientReadRequest().user(DEFAULT_USER)._object(DEFAULT_DOC);

        // When
        fga.write(writeRequest).get();
        ReadResponse response = fga.read(readRequest).get();

        // Then
        assertNotNull(response.getTuples());
        TupleKey key = response.getTuples().get(0).getKey();
        assertNotNull(key);
        assertEquals(DEFAULT_USER, key.getUser());
        assertEquals("reader", key.getRelation());
        assertEquals(DEFAULT_DOC, key.getObject());
    }

    @Test
    public void write_and_check() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);
        fga.setStoreId(storeId);
        String authModelId = writeAuthModel(storeId);
        fga.setAuthorizationModelId(authModelId);
        ClientWriteRequest writeRequest = new ClientWriteRequest().writes(List.of(DEFAULT_TUPLE_KEY));
        ClientCheckRequest checkRequest =
                new ClientCheckRequest().user(DEFAULT_USER).relation("reader")._object(DEFAULT_DOC);

        // When
        fga.write(writeRequest).get();
        CheckResponse response = fga.check(checkRequest).get();

        // Then
        assertNotNull(response.getAllowed());
        assertTrue(response.getAllowed());
    }

    @Test
    public void write_and_expand() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);
        fga.setStoreId(storeId);
        String authModelId = writeAuthModel(storeId);
        fga.setAuthorizationModelId(authModelId);
        ClientWriteRequest writeRequest = new ClientWriteRequest().writes(List.of(DEFAULT_TUPLE_KEY));
        ClientExpandRequest expandRequest =
                new ClientExpandRequest()._object(DEFAULT_DOC).relation("reader");

        // When
        fga.write(writeRequest).get();
        ClientExpandResponse response = fga.expand(expandRequest).get();

        // Then
        assertNotNull(response);
        assertNotNull(response.getTree());
        assertNotNull(response.getTree().getRoot());
        var root = response.getTree().getRoot();
        assertEquals(DEFAULT_DOC + "#reader", root.getName());
        assertNotNull(root.getLeaf());
        assertNotNull(root.getLeaf().getUsers());
        assertNotNull(root.getLeaf().getUsers().getUsers());
        var users = root.getLeaf().getUsers().getUsers();
        assertEquals(1, users.size());
        assertEquals(DEFAULT_USER, users.get(0));
    }

    @Test
    public void write_and_listObjects() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);
        fga.setStoreId(storeId);
        String authModelId = writeAuthModel(storeId);
        fga.setAuthorizationModelId(authModelId);
        ClientWriteRequest writeRequest = new ClientWriteRequest().writes(List.of(DEFAULT_TUPLE_KEY));
        ClientListObjectsRequest listObjectsRequest = new ClientListObjectsRequest()
                .user(DEFAULT_USER)
                .relation("reader")
                .type("document");

        // When
        fga.write(writeRequest).get();
        ListObjectsResponse response = fga.listObjects(listObjectsRequest).get();

        // Then
        assertNotNull(response.getObjects());
        assertEquals(1, response.getObjects().size());
        assertEquals(DEFAULT_DOC, response.getObjects().get(0));
    }

    @Test
    public void write_readAssertions() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);
        fga.setStoreId(storeId);
        String authModelId = writeAuthModel(storeId);
        fga.setAuthorizationModelId(authModelId);
        List<ClientAssertion> assertions = List.of(DEFAULT_ASSERTION);

        // When
        fga.writeAssertions(assertions).get();
        ReadAssertionsResponse response = fga.readAssertions().get();

        // Then
        String responseJson = mapper.writeValueAsString(response.getAssertions());
        assertEquals(
                "[{\"tuple_key\":{\"object\":\"document:2021-budget\",\"relation\":\"reader\",\"user\":\"user:81684243-9356-4421-8fbf-a4f8d36aa31b\"},\"expectation\":true,\"contextual_tuples\":[],\"context\":null}]",
                responseJson);
    }

    /**
     * Create a store for a given name. If tests fail here, troubleshoot with the no-arguments
     * test method createStore().
     * @return The created Store ID
     */
    private String createStore(String storeName) throws Exception {
        CreateStoreResponse response =
                fga.createStore(new CreateStoreRequest().name(storeName)).get();
        return response.getId();
    }

    /**
     * Add a default authorization model to a store. If tests fail here, troubleshoot with the
     * no-arguments @Test writeAuthModel() method.
     * @return The created Authorization Model ID
     */
    private String writeAuthModel(String storeId) throws Exception {
        fga.setStoreId(storeId);
        var request = mapper.readValue(authModelJson, WriteAuthorizationModelRequest.class);
        var response = fga.writeAuthorizationModel(request).get();
        return response.getAuthorizationModelId();
    }

    /** Get the name of the test that invokes this function. Returned in the form: "$class.$fn" */
    private String thisTestName() {
        // Tracing the stack gives an array of:
        // 0: getStackTrace(), 1: getThisFunctionName(), 2: <The calling function>, 3: ...
        StackTraceElement callingFn = Thread.currentThread().getStackTrace()[2];
        String callingClass = callingFn.getClassName().replace("dev.openfga.sdk.api.client.", "");

        return String.format("%s.%s", callingClass, callingFn.getMethodName());
    }
}

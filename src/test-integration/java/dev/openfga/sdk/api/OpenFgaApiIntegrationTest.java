/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.api;

import static org.junit.jupiter.api.Assertions.*;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import dev.openfga.sdk.api.client.*;
import dev.openfga.sdk.api.model.*;
import java.net.http.HttpClient;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class OpenFgaApiIntegrationTest {
    private static final ObjectMapper mapper = new ObjectMapper().findAndRegisterModules();
    private static final String DEFAULT_AUTH_MODEL =
            "{\"schema_version\":\"1.1\",\"type_definitions\":[{\"type\":\"user\"},{\"type\":\"document\",\"relations\":{\"reader\":{\"this\":{}},\"writer\":{\"this\":{}},\"owner\":{\"this\":{}}},\"metadata\":{\"relations\":{\"reader\":{\"directly_related_user_types\":[{\"type\":\"user\"}]},\"writer\":{\"directly_related_user_types\":[{\"type\":\"user\"}]},\"owner\":{\"directly_related_user_types\":[{\"type\":\"user\"}]}}}}]}";
    private static final String DEFAULT_USER = "user:81684243-9356-4421-8fbf-a4f8d36aa31b";
    private static final String DEFAULT_DOC = "document:2021-budget";
    public static final TupleKey DEFAULT_TUPLE_KEY =
            new TupleKey().user(DEFAULT_USER).relation("reader")._object(DEFAULT_DOC);
    public static final List<TupleKey> DEFAULT_TUPLE_KEYS = List.of(DEFAULT_TUPLE_KEY);

    private OpenFgaApi api;

    @BeforeEach
    public void initializeApi() {
        Configuration apiConfig = new Configuration("http://localhost:8080");
        ApiClient apiClient = new ApiClient(HttpClient.newBuilder(), mapper);
        api = new OpenFgaApi(apiClient, apiConfig);
    }

    @Test
    public void createStore() throws Exception {
        // Given
        String storeName = thisTestName();
        CreateStoreRequest createStoreRequest = new CreateStoreRequest().name(storeName);

        // When
        CreateStoreResponse response = api.createStore(createStoreRequest).get();

        // Then
        assertEquals("OpenFgaApiIntegrationTest.createStore", response.getName());
    }

    @Test
    public void deleteStore() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);

        // When
        api.deleteStore(storeId).get();

        // Then
        ListStoresResponse response = api.listStores(100, null).get();
        boolean itWasDeleted = response.getStores().stream().map(Store::getId).noneMatch(storeId::equals);
        assertTrue(itWasDeleted, String.format("No stores should remain with the id %s.", storeId));
    }

    @Test
    public void getStore() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);

        // When
        GetStoreResponse response = api.getStore(storeId).get();

        // Then
        assertEquals(storeName, response.getName());
    }

    @Test
    public void listStores() throws Exception {
        // Given
        String testName = thisTestName();
        String store1 = testName + "-store1";
        String store2 = testName + "-store2";
        String store3 = testName + "-store3";
        List<String> stores = List.of(store1, store2, store3);
        for (String store : stores) {
            createStore(store);
        }

        // When
        ListStoresResponse response = api.listStores(100, null).get();

        // Then
        for (String store : stores) {
            boolean exists = response.getStores().stream().map(Store::getName).anyMatch(store::equals);
            assertTrue(exists, String.format("Store %s should be in listStores response", store));
        }
    }

    @Test
    public void readAuthModel() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);
        String authModelId = writeAuthModel(storeId);

        // When
        ReadAuthorizationModelResponse response =
                api.readAuthorizationModel(storeId, authModelId).get();

        // Then
        AuthorizationModel authModel = response.getAuthorizationModel();
        assertEquals(authModelId, authModel.getId());
        String typeDefsJson = mapper.writeValueAsString(authModel.getTypeDefinitions());
        assertEquals(
                "[{\"type\":\"user\",\"relations\":{},\"metadata\":null},{\"type\":\"document\",\"relations\":{\"owner\":{\"this\":{},\"computedUserset\":null,\"tupleToUserset\":null,\"union\":null,\"intersection\":null,\"difference\":null},\"reader\":{\"this\":{},\"computedUserset\":null,\"tupleToUserset\":null,\"union\":null,\"intersection\":null,\"difference\":null},\"writer\":{\"this\":{},\"computedUserset\":null,\"tupleToUserset\":null,\"union\":null,\"intersection\":null,\"difference\":null}},\"metadata\":{\"relations\":{\"owner\":{\"directly_related_user_types\":[{\"type\":\"user\",\"relation\":null,\"wildcard\":null}]},\"reader\":{\"directly_related_user_types\":[{\"type\":\"user\",\"relation\":null,\"wildcard\":null}]},\"writer\":{\"directly_related_user_types\":[{\"type\":\"user\",\"relation\":null,\"wildcard\":null}]}}}}]",
                typeDefsJson);
    }

    @Test
    public void readAuthModels() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);
        String authModelId = writeAuthModel(storeId);

        // When
        ReadAuthorizationModelsResponse response =
                api.readAuthorizationModels(storeId, 100, null).get();

        // Then
        response.getAuthorizationModels().stream()
                .filter(authModel -> authModel.getId().equals(authModelId))
                .forEach(authModel -> {
                    assertEquals(authModelId, authModel.getId());
                    try {
                        String typeDefsJson = mapper.writeValueAsString(authModel.getTypeDefinitions());

                        assertEquals(
                                "[{\"type\":\"user\",\"relations\":{},\"metadata\":null},{\"type\":\"document\",\"relations\":{\"owner\":{\"this\":{},\"computedUserset\":null,\"tupleToUserset\":null,\"union\":null,\"intersection\":null,\"difference\":null},\"reader\":{\"this\":{},\"computedUserset\":null,\"tupleToUserset\":null,\"union\":null,\"intersection\":null,\"difference\":null},\"writer\":{\"this\":{},\"computedUserset\":null,\"tupleToUserset\":null,\"union\":null,\"intersection\":null,\"difference\":null}},\"metadata\":{\"relations\":{\"owner\":{\"directly_related_user_types\":[{\"type\":\"user\",\"relation\":null,\"wildcard\":null}]},\"reader\":{\"directly_related_user_types\":[{\"type\":\"user\",\"relation\":null,\"wildcard\":null}]},\"writer\":{\"directly_related_user_types\":[{\"type\":\"user\",\"relation\":null,\"wildcard\":null}]}}}}]",
                                typeDefsJson);
                    } catch (JsonProcessingException ex) {
                        assertNull(ex);
                    }
                });
    }

    @Test
    public void writeAuthModel() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);
        WriteAuthorizationModelRequest request =
                mapper.readValue(DEFAULT_AUTH_MODEL, WriteAuthorizationModelRequest.class);

        // When
        WriteAuthorizationModelResponse response =
                api.writeAuthorizationModel(storeId, request).get();

        // Then
        assertNotNull(response);
        assertNotNull(response.getAuthorizationModelId());
        assertNotEquals("", response.getAuthorizationModelId());
    }

    @Test
    public void write_and_read() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);
        String _authModelId = writeAuthModel(storeId);
        WriteRequest writeRequest = new WriteRequest().writes(new TupleKeys().tupleKeys(List.of(DEFAULT_TUPLE_KEY)));
        ReadRequest readRequest =
                new ReadRequest().tupleKey(new TupleKey().user(DEFAULT_USER)._object(DEFAULT_DOC));

        // When
        api.write(storeId, writeRequest).get();
        ReadResponse response = api.read(storeId, readRequest).get();

        // Then
        TupleKey key = response.getTuples().get(0).getKey();
        assertEquals(DEFAULT_USER, key.getUser());
        assertEquals("reader", key.getRelation());
        assertEquals(DEFAULT_DOC, key.getObject());
    }

    @Test
    public void write_and_check() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);
        String _authModelId = writeAuthModel(storeId);
        WriteRequest writeRequest = new WriteRequest().writes(new TupleKeys().tupleKeys(DEFAULT_TUPLE_KEYS));
        CheckRequest checkRequest = new CheckRequest()
                .tupleKey(new TupleKey().user(DEFAULT_USER).relation("reader")._object(DEFAULT_DOC));

        // When
        api.write(storeId, writeRequest).get();
        CheckResponse response = api.check(storeId, checkRequest).get();

        // Then
        assertTrue(response.getAllowed());
    }

    @Test
    public void write_and_expand() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);
        String _authModelId = writeAuthModel(storeId);
        WriteRequest writeRequest = new WriteRequest().writes(new TupleKeys().tupleKeys(DEFAULT_TUPLE_KEYS));
        ExpandRequest expandRequest =
                new ExpandRequest().tupleKey(new TupleKey()._object(DEFAULT_DOC).relation("reader"));

        // When
        api.write(storeId, writeRequest).get();
        ExpandResponse response = api.expand(storeId, expandRequest).get();

        // Then
        assertNotNull(response.getTree());
        String responseJson = mapper.writeValueAsString(response);
        assertEquals(
                "{\"tree\":{\"root\":{\"name\":\"document:2021-budget#reader\",\"leaf\":{\"users\":{\"users\":[\"user:81684243-9356-4421-8fbf-a4f8d36aa31b\"]},\"computed\":null,\"tupleToUserset\":null},\"difference\":null,\"union\":null,\"intersection\":null}}}",
                responseJson);
    }

    @Test
    public void write_and_listObjects() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);
        String _authModelId = writeAuthModel(storeId);
        WriteRequest writeRequest = new WriteRequest().writes(new TupleKeys().tupleKeys(DEFAULT_TUPLE_KEYS));
        ListObjectsRequest listObjectsRequest =
                new ListObjectsRequest().user(DEFAULT_USER).relation("reader").type("document");

        // When
        api.write(storeId, writeRequest).get();
        ListObjectsResponse response =
                api.listObjects(storeId, listObjectsRequest).get();

        // Then
        assertEquals(1, response.getObjects().size());
        assertEquals(DEFAULT_DOC, response.getObjects().get(0));
    }

    @Test
    public void write_and_readChanges() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);
        String _authModelId = writeAuthModel(storeId);
        WriteRequest writeRequest = new WriteRequest().writes(new TupleKeys().tupleKeys(DEFAULT_TUPLE_KEYS));

        // When
        api.write(storeId, writeRequest).get();
        ReadChangesResponse response =
                api.readChanges(storeId, null, null, null).get();

        // Then
        assertEquals(1, response.getChanges().size());
        String firstTupleKeyJson =
                mapper.writeValueAsString(response.getChanges().get(0).getTupleKey());
        assertEquals(
                "{\"object\":\"document:2021-budget\",\"relation\":\"reader\",\"user\":\"user:81684243-9356-4421-8fbf-a4f8d36aa31b\"}",
                firstTupleKeyJson);
    }

    @Test
    public void write_readAssertions() throws Exception {
        // Given
        String storeName = thisTestName();
        String storeId = createStore(storeName);
        String authModelId = writeAuthModel(storeId);
        WriteAssertionsRequest writeRequest = new WriteAssertionsRequest()
                .assertions(List.of(new Assertion().tupleKey(DEFAULT_TUPLE_KEY).expectation(true)));

        // When
        api.writeAssertions(storeId, authModelId, writeRequest);
        ReadAssertionsResponse response =
                api.readAssertions(storeId, authModelId).get();

        // Then
        String responseJson = mapper.writeValueAsString(response.getAssertions());
        assertEquals(
                "[{\"tuple_key\":{\"object\":\"document:2021-budget\",\"relation\":\"reader\",\"user\":\"user:81684243-9356-4421-8fbf-a4f8d36aa31b\"},\"expectation\":true}]",
                responseJson);
    }

    /**
     * Create a store for a given name. If tests fail here, troubleshoot with the no-arguments
     * test method createStore().
     * @return The created Store ID
     */
    private String createStore(String storeName) throws Exception {
        CreateStoreResponse response =
                api.createStore(new CreateStoreRequest().name(storeName)).get();
        return response.getId();
    }

    /**
     * Add a default authorization model to a store. If tests fail here, troubleshoot with the
     * no-arguments @Test writeAuthModel() method.
     * @return The created Authorization Model ID
     */
    private String writeAuthModel(String storeId) throws Exception {
        WriteAuthorizationModelRequest request =
                mapper.readValue(DEFAULT_AUTH_MODEL, WriteAuthorizationModelRequest.class);
        WriteAuthorizationModelResponse response =
                api.writeAuthorizationModel(storeId, request).get();
        return response.getAuthorizationModelId();
    }

    /** Get the name of the test that invokes this function. Returned in the form: "$class.$fn" */
    private String thisTestName() {
        // Tracing the stack gives an array of:
        // 0: getStackTrace(), 1: getThisFunctionName(), 2: <The calling function>, 3: ...
        StackTraceElement callingFn = Thread.currentThread().getStackTrace()[2];
        String callingClass = callingFn.getClassName().replace("dev.openfga.sdk.api.", "");

        return String.format("%s.%s", callingClass, callingFn.getMethodName());
    }
}

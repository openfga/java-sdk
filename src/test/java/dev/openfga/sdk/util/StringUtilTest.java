/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.util;

import static dev.openfga.sdk.util.StringUtil.isNullOrWhitespace;
import static dev.openfga.sdk.util.StringUtil.urlEncode;
import static org.assertj.core.api.Assertions.assertThat;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.NullSource;
import org.junit.jupiter.params.provider.ValueSource;

class StringUtilTest {
    @Test
    void shouldReturnFalseWhenStringIsNotNullNorWhitespace() {
        // when
        boolean nullOrWhitespace = isNullOrWhitespace("abc");

        // then
        assertThat(nullOrWhitespace).isFalse();
    }

    @ParameterizedTest
    @ValueSource(strings = {"", " ", "  ", " \t\n"})
    @NullSource
    void shouldReturnTrueWhenStringIsNullOrWhitespace(String string) {
        // when
        boolean nullOrWhitespace = isNullOrWhitespace(string);

        // then
        assertThat(nullOrWhitespace).isTrue();
    }

    @Test
    void shouldUrlEncodeString() {
        // when
        String urlEncode = urlEncode("name_with_=_char");

        // then
        assertThat(urlEncode).isEqualTo("name_with_%3D_char");
    }

    @Test
    void shouldUrlEncodeStringWithSpaceCharacter() {
        // when
        String urlEncode = urlEncode("name_ with_ _char");

        // then
        assertThat(urlEncode).isEqualTo("name_%20with_%20_char");
    }
}

/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.telemetry;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import dev.openfga.sdk.api.configuration.Configuration;
import dev.openfga.sdk.api.configuration.TelemetryConfiguration;
import io.opentelemetry.api.OpenTelemetry;
import io.opentelemetry.api.metrics.Meter;
import io.opentelemetry.api.metrics.MeterProvider;
import org.junit.jupiter.api.Test;

class CustomOpenTelemetryTest {

    @Test
    void testMetricsUsesCustomOpenTelemetryInstance() {
        // Create a mock OpenTelemetry instance
        OpenTelemetry mockOpenTelemetry = mock(OpenTelemetry.class);
        MeterProvider mockMeterProvider = mock(MeterProvider.class);
        Meter mockMeter = mock(Meter.class);

        when(mockOpenTelemetry.getMeterProvider()).thenReturn(mockMeterProvider);
        when(mockMeterProvider.get("openfga-sdk")).thenReturn(mockMeter);

        // Create configuration with custom OpenTelemetry instance
        TelemetryConfiguration telemetryConfig = new TelemetryConfiguration().openTelemetry(mockOpenTelemetry);

        Configuration config = new Configuration().telemetryConfiguration(telemetryConfig);

        // Create Metrics instance
        Metrics metrics = new Metrics(config);

        // Verify the custom OpenTelemetry instance was used
        assertEquals(mockMeter, metrics.getMeter());
        verify(mockOpenTelemetry).getMeterProvider();
        verify(mockMeterProvider).get("openfga-sdk");
    }

    @Test
    void testMetricsUsesGlobalOpenTelemetryWhenCustomNotProvided() {
        // Create configuration without custom OpenTelemetry instance
        Configuration config = new Configuration();

        // Create Metrics instance
        Metrics metrics = new Metrics(config);

        // Should use global OpenTelemetry instance (no assertion needed, just shouldn't throw)
        assertNotNull(metrics.getMeter());
    }

    @Test
    void testTelemetryConfigurationOpenTelemetryGetterSetter() {
        OpenTelemetry mockOpenTelemetry = mock(OpenTelemetry.class);

        TelemetryConfiguration config = new TelemetryConfiguration();

        // Initially null
        assertNull(config.getOpenTelemetry());

        // Set custom instance
        TelemetryConfiguration result = config.openTelemetry(mockOpenTelemetry);

        // Should return the same config for fluent API
        assertSame(config, result);

        // Should return the custom instance
        assertSame(mockOpenTelemetry, config.getOpenTelemetry());
    }

    @Test
    void testTelemetryManagerUsesCustomOpenTelemetryInstance() {
        // Create a mock OpenTelemetry instance
        OpenTelemetry mockOpenTelemetry = mock(OpenTelemetry.class);
        MeterProvider mockMeterProvider = mock(MeterProvider.class);
        Meter mockMeter = mock(Meter.class);

        when(mockOpenTelemetry.getMeterProvider()).thenReturn(mockMeterProvider);
        when(mockMeterProvider.get("openfga-sdk")).thenReturn(mockMeter);

        // Create configuration with custom OpenTelemetry instance
        TelemetryConfiguration telemetryConfig = new TelemetryConfiguration().openTelemetry(mockOpenTelemetry);

        Configuration config = new Configuration().telemetryConfiguration(telemetryConfig);

        // Clear any existing cache
        TelemetryManager telemetryManager = TelemetryManager.getInstance();
        telemetryManager.clearCache();

        // Get telemetry instance
        Telemetry telemetry = telemetryManager.getTelemetry(config);

        // Verify the custom OpenTelemetry instance was used in the metrics
        Metrics metrics = telemetry.metrics();
        assertEquals(mockMeter, metrics.getMeter());

        // Clean up
        telemetryManager.clearCache();
    }
}

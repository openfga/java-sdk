/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.telemetry;

import static org.junit.jupiter.api.Assertions.*;

import dev.openfga.sdk.api.OpenFgaApi;
import dev.openfga.sdk.api.auth.OAuth2Client;
import dev.openfga.sdk.api.client.ApiClient;
import dev.openfga.sdk.api.client.HttpRequestAttempt;
import dev.openfga.sdk.api.configuration.ClientCredentials;
import dev.openfga.sdk.api.configuration.Configuration;
import dev.openfga.sdk.api.configuration.Credentials;
import dev.openfga.sdk.errors.FgaInvalidParameterException;
import java.net.URI;
import java.net.http.HttpRequest;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class TelemetryObjectProliferationTest {

    private TelemetryManager telemetryManager;

    @BeforeEach
    void setUp() {
        telemetryManager = TelemetryManager.getInstance();
        telemetryManager.clearCache();
    }

    @AfterEach
    void tearDown() {
        telemetryManager.clearCache();
    }

    @Test
    void testHttpRequestAttemptReusesTelemetryInstance() throws FgaInvalidParameterException {
        Configuration config =
                new Configuration().apiUrl("http://localhost:8080").userAgent("test-agent");

        ApiClient apiClient = new ApiClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("http://localhost:8080/test"))
                .build();

        // Before creating any instances, cache should be empty
        assertEquals(0, telemetryManager.getCacheSize(), "Cache should start empty");

        // Create multiple HttpRequestAttempt instances with same configuration
        HttpRequestAttempt<String> attempt1 =
                new HttpRequestAttempt<>(request, "test1", String.class, apiClient, config);

        // After first instance, cache should have one entry
        assertEquals(
                1, telemetryManager.getCacheSize(), "First HttpRequestAttempt should create one Telemetry instance");

        HttpRequestAttempt<String> attempt2 =
                new HttpRequestAttempt<>(request, "test2", String.class, apiClient, config);

        // After second instance with same config, cache should still have only one entry
        assertEquals(
                1,
                telemetryManager.getCacheSize(),
                "Second HttpRequestAttempt with same config should reuse existing Telemetry instance");

        HttpRequestAttempt<String> attempt3 =
                new HttpRequestAttempt<>(request, "test3", String.class, apiClient, config);

        // After third instance with same config, cache should still have only one entry
        assertEquals(
                1,
                telemetryManager.getCacheSize(),
                "Third HttpRequestAttempt with same config should reuse existing Telemetry instance");

        // Verify they actually use the same Telemetry instance by accessing the shared instance
        Telemetry sharedTelemetry = telemetryManager.getTelemetry(config);
        assertNotNull(sharedTelemetry, "Shared telemetry instance should exist");
    }

    @Test
    void testOpenFgaApiReusesTelemetryInstance() throws FgaInvalidParameterException {
        Configuration config =
                new Configuration().apiUrl("http://localhost:8080").userAgent("test-agent");

        ApiClient apiClient = new ApiClient();

        // Create multiple OpenFgaApi instances with same configuration
        OpenFgaApi api1 = new OpenFgaApi(config, apiClient);
        OpenFgaApi api2 = new OpenFgaApi(config, apiClient);
        OpenFgaApi api3 = new OpenFgaApi(config, apiClient);

        // Verify that only one telemetry instance was created
        assertEquals(
                1,
                telemetryManager.getCacheSize(),
                "Multiple OpenFgaApi instances with same config should share one Telemetry instance");
    }

    @Test
    void testOAuth2ClientReusesTelemetryInstance() throws FgaInvalidParameterException {
        Configuration config = new Configuration()
                .apiUrl("http://localhost:8080")
                .userAgent("test-agent")
                .credentials(new Credentials(new ClientCredentials()
                        .clientId("test-client")
                        .clientSecret("test-secret")
                        .apiTokenIssuer("https://auth.test.com")
                        .apiAudience("https://api.test.com")));

        ApiClient apiClient = new ApiClient();

        // Create multiple OAuth2Client instances (they create their own config, but with same telemetry settings)
        OAuth2Client client1 = new OAuth2Client(config, apiClient);
        OAuth2Client client2 = new OAuth2Client(config, apiClient);
        OAuth2Client client3 = new OAuth2Client(config, apiClient);

        // OAuth2Client creates its own Configuration instance, so we expect multiple cache entries
        // but the same telemetry configuration should result in shared instances where possible
        assertTrue(
                telemetryManager.getCacheSize() >= 1,
                "OAuth2Client instances should create at least one telemetry instance");

        // The main point is that we're using TelemetryManager rather than creating new instances each time
        assertTrue(telemetryManager.getCacheSize() < 10, "Should not create excessive telemetry instances");
    }

    @Test
    void testMixedComponentsOptimization() throws FgaInvalidParameterException {
        Configuration config =
                new Configuration().apiUrl("http://localhost:8080").userAgent("test-agent");

        ApiClient apiClient = new ApiClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("http://localhost:8080/test"))
                .build();

        // Create instances of different components with same base configuration
        OpenFgaApi api = new OpenFgaApi(config, apiClient);

        HttpRequestAttempt<String> attempt1 =
                new HttpRequestAttempt<>(request, "test1", String.class, apiClient, config);

        HttpRequestAttempt<String> attempt2 =
                new HttpRequestAttempt<>(request, "test2", String.class, apiClient, config);

        // All should share the same telemetry instance
        assertEquals(
                1,
                telemetryManager.getCacheSize(),
                "Mixed components with same config should share one Telemetry instance");
    }

    @Test
    void testDifferentConfigurationsCreateSeparateInstances() throws FgaInvalidParameterException {
        Configuration config1 =
                new Configuration().apiUrl("http://localhost:8080").userAgent("test-agent-1");

        Configuration config2 =
                new Configuration().apiUrl("http://localhost:8081").userAgent("test-agent-2");

        ApiClient apiClient = new ApiClient();

        // Create instances with different configurations
        OpenFgaApi api1 = new OpenFgaApi(config1, apiClient);
        OpenFgaApi api2 = new OpenFgaApi(config2, apiClient);

        // With global singleton approach, all configurations share the same telemetry instance
        assertEquals(
                1,
                telemetryManager.getCacheSize(),
                "Global singleton approach means all configurations share one Telemetry instance");
    }
}

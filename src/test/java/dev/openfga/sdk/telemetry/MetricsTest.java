/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.telemetry;

import static org.assertj.core.api.Assertions.assertThat;

import dev.openfga.sdk.api.configuration.Configuration;
import dev.openfga.sdk.api.configuration.TelemetryConfiguration;
import io.opentelemetry.api.metrics.DoubleHistogram;
import io.opentelemetry.api.metrics.LongCounter;
import io.opentelemetry.api.metrics.Meter;
import java.util.Map;
import java.util.Optional;
import org.junit.jupiter.api.Test;

class MetricsTest {
    @Test
    void shouldConstructorWithConfiguration() {
        // when
        Metrics metricsWithConfig = new Metrics(new Configuration());

        // then
        assertThat(metricsWithConfig.getMeter()).isNotNull();
    }

    @Test
    void shouldConstructorWithoutConfiguration() {
        // when
        Metrics metricsWithoutConfig = new Metrics();

        // then
        assertThat(metricsWithoutConfig.getMeter()).isNotNull();
    }

    @Test
    void shouldGetMeter() {
        // given
        Metrics metrics = new Metrics();

        // when
        Meter meter = metrics.getMeter();

        // then
        assertThat(meter).isNotNull();
    }

    @Test
    void shouldGetCounter() {
        // given
        Counter counter = Counters.CREDENTIALS_REQUEST;
        Long value = 10L;
        Map<Attribute, String> attributes = Map.of();
        Metrics metrics = new Metrics();

        // when
        LongCounter longCounter = metrics.getCounter(counter, value, attributes);

        // then
        assertThat(longCounter).isNotNull();
    }

    @Test
    void shouldGetHistogram() {
        // given
        Histogram histogram = Histograms.REQUEST_DURATION;
        Double value = 100.0;
        Map<Attribute, String> attributes = Map.of();
        Metrics metrics = new Metrics();

        // when
        DoubleHistogram doubleHistogram = metrics.getHistogram(histogram, value, attributes);

        // then
        assertThat(doubleHistogram).isNotNull();
    }

    @Test
    void shouldCredentialsRequest() {
        // given
        Long value = 5L;
        Map<Attribute, String> attributes = Map.of();
        Metrics metrics = new Metrics();

        // when
        LongCounter longCounter = metrics.credentialsRequest(value, attributes);

        // then
        assertThat(longCounter).isNotNull();
    }

    @Test
    void shouldRequestDuration() {
        // given
        Double value = 200.0;
        Map<Attribute, String> attributes = Map.of();
        Metrics metrics = new Metrics();

        // when
        DoubleHistogram doubleHistogram = metrics.requestDuration(value, attributes);

        // then
        assertThat(doubleHistogram).isNotNull();
    }

    @Test
    void shouldQueryDuration() {
        // given
        Double value = 150.0;
        Map<Attribute, String> attributes = Map.of();
        Metrics metrics = new Metrics();

        // when
        DoubleHistogram doubleHistogram = metrics.queryDuration(value, attributes);

        // then
        assertThat(doubleHistogram).isNotNull();
    }

    @Test
    void shouldNotSentMetricsIfNotConfigured() {
        // given
        Map<Attribute, Optional<Object>> attributes = Map.of(Attributes.FGA_CLIENT_REQUEST_METHOD, Optional.empty());
        Map<Metric, Map<Attribute, Optional<Object>>> metrics = Map.of(Histograms.QUERY_DURATION, attributes);

        TelemetryConfiguration telemetryConfiguration = new TelemetryConfiguration(metrics);
        Configuration config = new Configuration().telemetryConfiguration(telemetryConfiguration);

        Metrics configuredMetrics = new Metrics(config);

        // when
        DoubleHistogram requestDuration = configuredMetrics.getHistogram(Histograms.REQUEST_DURATION, 10.0, Map.of());
        DoubleHistogram queryDuration = configuredMetrics.getHistogram(Histograms.QUERY_DURATION, 10.0, Map.of());
        LongCounter credentialRequest = configuredMetrics.getCounter(Counters.CREDENTIALS_REQUEST, 10L, Map.of());

        // then
        assertThat(requestDuration).isNull();
        assertThat(queryDuration).isNotNull();
        assertThat(credentialRequest).isNull();
    }

    @Test
    void shouldNotSentCountersIfNotConfigured() {
        // given
        Map<Attribute, Optional<Object>> attributes = Map.of(Attributes.FGA_CLIENT_REQUEST_METHOD, Optional.empty());
        Map<Metric, Map<Attribute, Optional<Object>>> metrics = Map.of(Counters.CREDENTIALS_REQUEST, attributes);

        TelemetryConfiguration telemetryConfiguration = new TelemetryConfiguration(metrics);
        Configuration config = new Configuration().telemetryConfiguration(telemetryConfiguration);

        Metrics configuredMetrics = new Metrics(config);

        // when
        DoubleHistogram requestDuration = configuredMetrics.getHistogram(Histograms.REQUEST_DURATION, 10.0, Map.of());
        DoubleHistogram queryDuration = configuredMetrics.getHistogram(Histograms.QUERY_DURATION, 10.0, Map.of());
        LongCounter credentialRequest = configuredMetrics.getCounter(Counters.CREDENTIALS_REQUEST, 10L, Map.of());

        // then
        assertThat(requestDuration).isNull();
        assertThat(queryDuration).isNull();
        assertThat(credentialRequest).isNotNull();
    }

    @Test
    void shouldDefaultMetricsEnabled() {
        // given
        Configuration config = new Configuration();

        // when
        Metrics metrics = new Metrics(config);

        // then
        assertThat(metrics.getCounter(Counters.CREDENTIALS_REQUEST, 10L, Map.of()))
                .isNotNull();
        assertThat(metrics.getHistogram(Histograms.QUERY_DURATION, 10.0, Map.of()))
                .isNotNull();
        assertThat(metrics.getHistogram(Histograms.REQUEST_DURATION, 10.0, Map.of()))
                .isNotNull();
    }

    @Test
    void shouldMetricsWithNullMetricsConfig() {
        // given
        TelemetryConfiguration telemetryConfiguration = new TelemetryConfiguration(null);
        Configuration config = new Configuration().telemetryConfiguration(telemetryConfiguration);

        // when
        Metrics metrics = new Metrics(config);

        // then
        assertThat(metrics.getCounter(Counters.CREDENTIALS_REQUEST, 10L, Map.of()))
                .isNull();
        assertThat(metrics.getHistogram(Histograms.QUERY_DURATION, 10.0, Map.of()))
                .isNull();
        assertThat(metrics.getHistogram(Histograms.REQUEST_DURATION, 10.0, Map.of()))
                .isNull();
    }
}

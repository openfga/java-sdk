/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.telemetry;

import static org.junit.jupiter.api.Assertions.*;

import dev.openfga.sdk.api.configuration.Configuration;
import dev.openfga.sdk.api.configuration.TelemetryConfiguration;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class TelemetryManagerTest {

    private TelemetryManager telemetryManager;

    @BeforeEach
    void setUp() {
        telemetryManager = TelemetryManager.getInstance();
        // Clear cache before each test to ensure isolation
        telemetryManager.clearCache();
    }

    @AfterEach
    void tearDown() {
        // Clear cache after each test to ensure isolation
        telemetryManager.clearCache();
    }

    @Test
    void testGetInstance() {
        TelemetryManager instance1 = TelemetryManager.getInstance();
        TelemetryManager instance2 = TelemetryManager.getInstance();

        assertSame(instance1, instance2, "TelemetryManager should be a singleton");
    }

    @Test
    void testGetTelemetryWithSameConfiguration() {
        Configuration config = new Configuration();

        Telemetry telemetry1 = telemetryManager.getTelemetry(config);
        Telemetry telemetry2 = telemetryManager.getTelemetry(config);

        assertSame(telemetry1, telemetry2, "Same configuration should return same Telemetry instance");
        assertEquals(1, telemetryManager.getCacheSize(), "Cache should contain exactly one entry");
    }

    @Test
    void testGetTelemetryWithDifferentConfigurations() {
        Configuration config1 = new Configuration().apiUrl("http://localhost:8080");
        Configuration config2 = new Configuration().apiUrl("http://localhost:8081");

        Telemetry telemetry1 = telemetryManager.getTelemetry(config1);
        Telemetry telemetry2 = telemetryManager.getTelemetry(config2);

        assertNotSame(telemetry1, telemetry2, "Different configurations should return different Telemetry instances");
        assertEquals(2, telemetryManager.getCacheSize(), "Cache should contain exactly two entries");
    }

    @Test
    void testGetTelemetryWithDifferentTelemetryConfigurations() {
        TelemetryConfiguration telemetryConfig1 = new TelemetryConfiguration();
        TelemetryConfiguration telemetryConfig2 = new TelemetryConfiguration();

        Configuration config1 = new Configuration().telemetryConfiguration(telemetryConfig1);
        Configuration config2 = new Configuration().telemetryConfiguration(telemetryConfig2);

        Telemetry telemetry1 = telemetryManager.getTelemetry(config1);
        Telemetry telemetry2 = telemetryManager.getTelemetry(config2);

        assertNotSame(
                telemetry1,
                telemetry2,
                "Different telemetry configurations should return different Telemetry instances");
        assertEquals(2, telemetryManager.getCacheSize(), "Cache should contain exactly two entries");
    }

    @Test
    void testGetTelemetryWithNullConfiguration() {
        assertThrows(
                IllegalArgumentException.class,
                () -> {
                    telemetryManager.getTelemetry(null);
                },
                "Should throw IllegalArgumentException for null configuration");
    }

    @Test
    void testGetTelemetryWithSameTelemetryConfiguration() {
        TelemetryConfiguration telemetryConfig = new TelemetryConfiguration();

        Configuration config1 = new Configuration().telemetryConfiguration(telemetryConfig);
        Configuration config2 = new Configuration().telemetryConfiguration(telemetryConfig);

        Telemetry telemetry1 = telemetryManager.getTelemetry(config1);
        Telemetry telemetry2 = telemetryManager.getTelemetry(config2);

        assertSame(telemetry1, telemetry2, "Same telemetry configuration should return same Telemetry instance");
        assertEquals(1, telemetryManager.getCacheSize(), "Cache should contain exactly one entry");
    }

    @Test
    void testGetTelemetryWithDifferentUserAgents() {
        Configuration config1 = new Configuration().userAgent("test-agent-1");
        Configuration config2 = new Configuration().userAgent("test-agent-2");

        Telemetry telemetry1 = telemetryManager.getTelemetry(config1);
        Telemetry telemetry2 = telemetryManager.getTelemetry(config2);

        assertNotSame(telemetry1, telemetry2, "Different user agents should return different Telemetry instances");
        assertEquals(2, telemetryManager.getCacheSize(), "Cache should contain exactly two entries");
    }

    @Test
    void testClearCache() {
        Configuration config1 = new Configuration().apiUrl("http://localhost:8080");
        Configuration config2 = new Configuration().apiUrl("http://localhost:8081");

        telemetryManager.getTelemetry(config1);
        telemetryManager.getTelemetry(config2);
        assertEquals(2, telemetryManager.getCacheSize(), "Cache should contain two entries before clear");

        telemetryManager.clearCache();
        assertEquals(0, telemetryManager.getCacheSize(), "Cache should be empty after clear");
    }

    @Test
    void testGetCacheSize() {
        assertEquals(0, telemetryManager.getCacheSize(), "Cache should start empty");

        Configuration config = new Configuration();
        telemetryManager.getTelemetry(config);
        assertEquals(1, telemetryManager.getCacheSize(), "Cache should contain one entry");

        // Getting same config again should not increase cache size
        telemetryManager.getTelemetry(config);
        assertEquals(1, telemetryManager.getCacheSize(), "Cache should still contain one entry");
    }

    @Test
    void testConfigurationKeyEquality() {
        // Test that configurations with same values generate same cache keys
        Configuration config1 =
                new Configuration().apiUrl("http://localhost:8080").userAgent("test-agent");

        Configuration config2 =
                new Configuration().apiUrl("http://localhost:8080").userAgent("test-agent");

        Telemetry telemetry1 = telemetryManager.getTelemetry(config1);
        Telemetry telemetry2 = telemetryManager.getTelemetry(config2);

        assertSame(telemetry1, telemetry2, "Configurations with same values should return same Telemetry instance");
        assertEquals(1, telemetryManager.getCacheSize(), "Cache should contain exactly one entry");
    }
}

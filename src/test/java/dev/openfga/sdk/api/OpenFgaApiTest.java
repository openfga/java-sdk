/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.api;

import static org.hamcrest.Matchers.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.pgssoft.httpclient.HttpClientMock;
import dev.openfga.sdk.api.client.*;
import dev.openfga.sdk.api.configuration.*;
import dev.openfga.sdk.api.model.*;
import dev.openfga.sdk.errors.*;
import java.net.http.HttpClient;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**
 * API tests for OpenFgaApi.
 */
public class OpenFgaApiTest {
    private static final String DEFAULT_STORE_ID = "01YCP46JKYM8FJCQ37NMBYHE5X";
    private static final String DEFAULT_STORE_NAME = "test_store";
    private static final String DEFAULT_AUTH_MODEL_ID = "01G5JAVJ41T49E9TT3SKVS7X1J";
    private static final String DEFAULT_USER = "user:81684243-9356-4421-8fbf-a4f8d36aa31b";
    private static final String DEFAULT_RELATION = "reader";
    private static final String DEFAULT_TYPE = "document";
    private static final String DEFAULT_OBJECT = "document:budget";
    private static final String DEFAULT_SCHEMA_VERSION = "1.1";
    private static final String EMPTY_RESPONSE_BODY = "{}";
    private static final int DEFAULT_MAX_RETRIES = 3;
    private static final Duration DEFAULT_RETRY_DELAY = Duration.ofMillis(100);
    private static final TelemetryConfiguration DEFAULT_TELEMETRY_CONFIG = new TelemetryConfiguration();

    private final ObjectMapper mapper = new ObjectMapper();
    private OpenFgaApi fga;
    private Configuration mockConfiguration;
    private ApiClient mockApiClient;
    private HttpClientMock mockHttpClient;
    private HttpClient.Builder mockHttpClientBuilder;

    @BeforeEach
    public void beforeEachTest() throws Exception {
        System.setProperty("HttpRequestAttempt.debug-logging", "enable");

        mockHttpClient = new HttpClientMock();
        mockHttpClient.debugOn();

        mockHttpClientBuilder = mock(HttpClient.Builder.class);
        when(mockHttpClientBuilder.executor(any())).thenReturn(mockHttpClientBuilder);
        when(mockHttpClientBuilder.build()).thenReturn(mockHttpClient);

        mockConfiguration = mock(Configuration.class);
        when(mockConfiguration.getApiUrl()).thenReturn("https://api.fga.example");
        when(mockConfiguration.getReadTimeout()).thenReturn(Duration.ofMillis(250));
        when(mockConfiguration.getCredentials()).thenReturn(new Credentials());
        when(mockConfiguration.getMaxRetries()).thenReturn(DEFAULT_MAX_RETRIES);
        when(mockConfiguration.getMinimumRetryDelay()).thenReturn(DEFAULT_RETRY_DELAY);
        when(mockConfiguration.getTelemetryConfiguration()).thenReturn(DEFAULT_TELEMETRY_CONFIG);

        mockApiClient = mock(ApiClient.class);
        when(mockApiClient.getObjectMapper()).thenReturn(mapper);
        when(mockApiClient.getHttpClient()).thenReturn(mockHttpClient);
        when(mockApiClient.getHttpClientBuilder()).thenReturn(mockHttpClientBuilder);

        fga = new OpenFgaApi(mockConfiguration, mockApiClient);
    }

    /**
     * List all stores.
     */
    @Test
    public void listStoresTest() throws Exception {
        // Given
        String responseBody =
                String.format("{\"stores\":[{\"id\":\"%s\",\"name\":\"%s\"}]}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient.onGet("https://api.fga.example/stores").doReturn(200, responseBody);
        Integer pageSize = null; // Input is optional
        String continuationToken = null; // Input is optional

        // When
        var response = fga.listStores(pageSize, continuationToken).get();

        // Then
        mockHttpClient.verify().get("https://api.fga.example/stores").called(1);
        assertNotNull(response.getData());
        assertNotNull(response.getData().getStores());
        var stores = response.getData().getStores();
        assertEquals(1, stores.size());
        assertEquals(DEFAULT_STORE_ID, stores.get(0).getId());
        assertEquals(DEFAULT_STORE_NAME, stores.get(0).getName());
    }

    @Test
    public void listStores_400() {
        // Given
        mockHttpClient
                .onGet("https://api.fga.example/stores")
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");
        Integer pageSize = null; // Input is optional
        String continuationToken = null; // Input is optional

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.listStores(pageSize, continuationToken)
                        .get());

        // Then
        mockHttpClient.verify().get("https://api.fga.example/stores").called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void listStores_404() throws Exception {
        // Given
        mockHttpClient
                .onGet("https://api.fga.example/stores")
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");
        Integer pageSize = null; // Input is optional
        String continuationToken = null; // Input is optional

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.listStores(pageSize, continuationToken)
                        .get());

        // Then
        mockHttpClient.verify().get("https://api.fga.example/stores").called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void listStores_500() throws Exception {
        // Given
        mockHttpClient
                .onGet("https://api.fga.example/stores")
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");
        Integer pageSize = null; // Input is optional
        String continuationToken = null; // Input is optional

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.listStores(pageSize, continuationToken)
                        .get());

        // Then
        mockHttpClient.verify().get("https://api.fga.example/stores").called(1 + DEFAULT_MAX_RETRIES);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Create a store.
     */
    @Test
    public void createStoreTest() throws Exception {
        // Given
        String expectedBody = String.format("{\"name\":\"%s\"}", DEFAULT_STORE_NAME);
        String requestBody = String.format("{\"id\":\"%s\",\"name\":\"%s\"}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient
                .onPost("https://api.fga.example/stores")
                .withBody(is(expectedBody))
                .doReturn(201, requestBody);
        CreateStoreRequest request = new CreateStoreRequest().name(DEFAULT_STORE_NAME);

        // When
        var response = fga.createStore(request).get();

        // Then
        mockHttpClient
                .verify()
                .post("https://api.fga.example/stores")
                .withBody(is(expectedBody))
                .called(1);
        assertNotNull(response.getData());
        assertEquals(DEFAULT_STORE_ID, response.getData().getId());
        assertEquals(DEFAULT_STORE_NAME, response.getData().getName());
    }

    @Test
    public void createStore_bodyRequired() {
        // When
        var exception = assertThrows(
                FgaInvalidParameterException.class, () -> fga.createStore(null).get());

        // Then
        assertEquals("Required parameter body was invalid when calling createStore.", exception.getMessage());
    }

    @Test
    public void createStore_400() throws Exception {
        // Given
        mockHttpClient
                .onPost("https://api.fga.example/stores")
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.createStore(new CreateStoreRequest())
                        .get());

        // Then
        mockHttpClient.verify().post("https://api.fga.example/stores").called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void createStore_404() throws Exception {
        // Given
        mockHttpClient
                .onPost("https://api.fga.example/stores")
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.createStore(new CreateStoreRequest())
                        .get());

        // Then
        mockHttpClient.verify().post("https://api.fga.example/stores").called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void createStore_500() throws Exception {
        // Given
        mockHttpClient
                .onPost("https://api.fga.example/stores")
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.createStore(new CreateStoreRequest())
                        .get());

        // Then
        // Simplified logic: POST requests now retry on 5xx errors (1 initial + 3 retries = 4 total)
        mockHttpClient.verify().post("https://api.fga.example/stores").called(4);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Get a store.
     */
    @Test
    public void getStoreTest() throws Exception {
        // Given
        String getUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X";
        String responseBody = String.format("{\"id\":\"%s\",\"name\":\"%s\"}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient.onGet(getUrl).doReturn(200, responseBody);

        // When
        var response = fga.getStore(DEFAULT_STORE_ID).get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertNotNull(response.getData());
        assertEquals(DEFAULT_STORE_ID, response.getData().getId());
        assertEquals(DEFAULT_STORE_NAME, response.getData().getName());
    }

    @Test
    public void getStore_storeIdRequired() {
        // When
        var exception = assertThrows(
                FgaInvalidParameterException.class, () -> fga.getStore(null).get());

        // Then
        assertEquals("Required parameter storeId was invalid when calling getStore.", exception.getMessage());
    }

    @Test
    public void getStore_400() throws Exception {
        // Given
        String getUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X";
        mockHttpClient
                .onGet(getUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.getStore(DEFAULT_STORE_ID).get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void getStore_404() throws Exception {
        // Given
        String getUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X";
        mockHttpClient
                .onGet(getUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.getStore(DEFAULT_STORE_ID).get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void getStore_500() throws Exception {
        // Given
        String getUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X";
        mockHttpClient
                .onGet(getUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.getStore(DEFAULT_STORE_ID).get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1 + DEFAULT_MAX_RETRIES);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Delete a store.
     */
    @Test
    public void deleteStoreTest() throws Exception {
        // Given
        String deleteUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X";
        mockHttpClient.onDelete(deleteUrl).doReturn(204, EMPTY_RESPONSE_BODY);

        // When
        fga.deleteStore(DEFAULT_STORE_ID);

        // Then
        mockHttpClient.verify().delete(deleteUrl).called(1);
    }

    @Test
    public void deleteStore_storeIdRequired() {
        // When
        var exception = assertThrows(
                FgaInvalidParameterException.class, () -> fga.deleteStore(null).get());

        // Then
        assertEquals("Required parameter storeId was invalid when calling deleteStore.", exception.getMessage());
    }

    @Test
    public void deleteStore_400() throws Exception {
        // Given
        String deleteUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X";
        mockHttpClient
                .onDelete(deleteUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.deleteStore(DEFAULT_STORE_ID)
                        .get());

        // Then
        mockHttpClient.verify().delete(deleteUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void deleteStore_404() throws Exception {
        // Given
        String deleteUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X";
        mockHttpClient
                .onDelete(deleteUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.deleteStore(DEFAULT_STORE_ID)
                        .get());

        // Then
        mockHttpClient.verify().delete(deleteUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void deleteStore_500() throws Exception {
        // Given
        String deleteUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X";
        mockHttpClient
                .onDelete(deleteUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.deleteStore(DEFAULT_STORE_ID)
                        .get());

        // Then
        // Simplified logic: DELETE requests now retry on 5xx errors (1 initial + 3 retries = 4 total)
        mockHttpClient.verify().delete(deleteUrl).called(4);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Return all the authorization models for a particular store.
     */
    @Test
    public void readAuthorizationModelsTest() throws Exception {
        // Given
        String getUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/authorization-models";
        String responseBody = String.format(
                "{\"authorization_models\":[{\"id\":\"%s\",\"schema_version\":\"%s\"}]}",
                DEFAULT_AUTH_MODEL_ID, DEFAULT_SCHEMA_VERSION);
        mockHttpClient.onGet(getUrl).doReturn(200, responseBody);
        Integer pageSize = null; // Input is optional
        String continuationToken = null; // Input is optional

        // When
        var response = fga.readAuthorizationModels(DEFAULT_STORE_ID, pageSize, continuationToken)
                .get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertNotNull(response.getData().getAuthorizationModels());
        assertNotNull(response.getData().getAuthorizationModels());
        assertEquals(1, response.getData().getAuthorizationModels().size());
        var authModel = response.getData().getAuthorizationModels().get(0);
        assertEquals(DEFAULT_AUTH_MODEL_ID, authModel.getId());
        assertEquals(DEFAULT_SCHEMA_VERSION, authModel.getSchemaVersion());
    }

    @Test
    public void readAuthorizationModels_storeIdRequired() {
        // When
        var exception =
                assertThrows(FgaInvalidParameterException.class, () -> fga.readAuthorizationModels(null, null, null)
                        .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling readAuthorizationModels.", exception.getMessage());
    }

    @Test
    public void readAuthorizationModels_400() throws Exception {
        // Given
        String getUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/authorization-models";
        mockHttpClient
                .onGet(getUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");
        Integer pageSize = null; // Input is optional
        String continuationToken = null; // Input is optional

        // When
        ExecutionException execException = assertThrows(ExecutionException.class, () -> fga.readAuthorizationModels(
                        DEFAULT_STORE_ID, pageSize, continuationToken)
                .get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void readAuthorizationModels_404() throws Exception {
        // Given
        String getUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/authorization-models";
        mockHttpClient
                .onGet(getUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");
        Integer pageSize = null; // Input is optional
        String continuationToken = null; // Input is optional

        // When
        ExecutionException execException = assertThrows(ExecutionException.class, () -> fga.readAuthorizationModels(
                        DEFAULT_STORE_ID, pageSize, continuationToken)
                .get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void readAuthorizationModels_500() throws Exception {
        // Given
        String getUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/authorization-models";
        mockHttpClient
                .onGet(getUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");
        Integer pageSize = null; // Input is optional
        String continuationToken = null; // Input is optional

        // When
        ExecutionException execException = assertThrows(ExecutionException.class, () -> fga.readAuthorizationModels(
                        DEFAULT_STORE_ID, pageSize, continuationToken)
                .get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1 + DEFAULT_MAX_RETRIES);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Create a new authorization model.
     */
    @Test
    public void writeAuthorizationModelTest() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/authorization-models";
        String expectedBody =
                "{\"type_definitions\":[{\"type\":\"document\",\"relations\":{},\"metadata\":null}],\"schema_version\":\"1.1\",\"conditions\":{}}";
        String responseBody = String.format("{\"authorization_model_id\":\"%s\"}", DEFAULT_AUTH_MODEL_ID);
        mockHttpClient.onPost(postUrl).withBody(is(expectedBody)).doReturn(201, responseBody);
        WriteAuthorizationModelRequest request = new WriteAuthorizationModelRequest()
                .schemaVersion(DEFAULT_SCHEMA_VERSION)
                .typeDefinitions(List.of(new TypeDefinition().type(DEFAULT_TYPE)));

        // When
        var response = fga.writeAuthorizationModel(DEFAULT_STORE_ID, request).get();

        // Then
        mockHttpClient.verify().post(postUrl).withBody(is(expectedBody)).called(1);
        assertNotNull(response.getData());
        assertEquals(DEFAULT_AUTH_MODEL_ID, response.getData().getAuthorizationModelId());
    }

    @Test
    public void writeAuthorizationModel_storeIdRequired() {
        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.writeAuthorizationModel(
                        null, new WriteAuthorizationModelRequest())
                .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling writeAuthorizationModel.", exception.getMessage());
    }

    @Test
    public void writeAuthorizationModel_bodyRequired() {
        // When
        var exception = assertThrows(
                FgaInvalidParameterException.class,
                () -> fga.writeAuthorizationModel(DEFAULT_STORE_ID, null).get());

        // Then
        assertEquals(
                "Required parameter body was invalid when calling writeAuthorizationModel.", exception.getMessage());
    }

    @Test
    public void writeAuthorizationModel_400() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/authorization-models";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException = assertThrows(ExecutionException.class, () -> fga.writeAuthorizationModel(
                        DEFAULT_STORE_ID, new WriteAuthorizationModelRequest())
                .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void writeAuthorizationModel_404() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/authorization-models";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException = assertThrows(ExecutionException.class, () -> fga.writeAuthorizationModel(
                        DEFAULT_STORE_ID, new WriteAuthorizationModelRequest())
                .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void writeAuthorizationModel_500() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/authorization-models";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException = assertThrows(ExecutionException.class, () -> fga.writeAuthorizationModel(
                        DEFAULT_STORE_ID, new WriteAuthorizationModelRequest())
                .get());

        // Then
        // Simplified logic: POST requests now retry on 5xx errors (1 initial + 3 retries = 4 total)
        mockHttpClient.verify().post(postUrl).called(4);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Return a particular version of an authorization model.
     */
    @Test
    public void readAuthorizationModelTest() throws Exception {
        // Given
        String getUrl =
                "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/authorization-models/01G5JAVJ41T49E9TT3SKVS7X1J";
        String getResponse = String.format(
                "{\"authorization_model\":{\"id\":\"%s\",\"schema_version\":\"%s\"}}",
                DEFAULT_AUTH_MODEL_ID, DEFAULT_SCHEMA_VERSION);
        mockHttpClient.onGet(getUrl).doReturn(200, getResponse);

        // When
        var response = fga.readAuthorizationModel(DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID)
                .get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertNotNull(response.getData());
        var authModel = response.getData().getAuthorizationModel();
        assertNotNull(authModel);
        assertEquals(DEFAULT_AUTH_MODEL_ID, authModel.getId());
        assertEquals(DEFAULT_SCHEMA_VERSION, authModel.getSchemaVersion());
    }

    @Test
    public void readAuthorizationModel_storeIdRequired() {
        // When
        var exception = assertThrows(
                FgaInvalidParameterException.class,
                () -> fga.readAuthorizationModel(null, DEFAULT_AUTH_MODEL_ID).get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling readAuthorizationModel.", exception.getMessage());
    }

    @Test
    public void readAuthorizationModel_idRequired() {
        // When
        var exception = assertThrows(
                FgaInvalidParameterException.class,
                () -> fga.readAuthorizationModel(DEFAULT_STORE_ID, null).get());

        // Then
        assertEquals("Required parameter id was invalid when calling readAuthorizationModel.", exception.getMessage());
    }

    @Test
    public void readAuthorizationModel_400() throws Exception {
        // Given
        String getUrl =
                "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/authorization-models/01G5JAVJ41T49E9TT3SKVS7X1J";
        mockHttpClient
                .onGet(getUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.readAuthorizationModel(DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID)
                        .get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void readAuthorizationModel_404() throws Exception {
        // Given
        String getUrl =
                "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/authorization-models/01G5JAVJ41T49E9TT3SKVS7X1J";
        mockHttpClient
                .onGet(getUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.readAuthorizationModel(DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID)
                        .get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void readAuthorizationModel_500() throws Exception {
        // Given
        String getUrl =
                "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/authorization-models/01G5JAVJ41T49E9TT3SKVS7X1J";
        mockHttpClient
                .onGet(getUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.readAuthorizationModel(DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID)
                        .get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1 + DEFAULT_MAX_RETRIES);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Return a list of all the tuple changes.
     */
    @Test
    public void readChangesTest() throws Exception {
        // Given
        String getPath = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/changes";
        String responseBody = String.format(
                "{\"changes\":[{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"}}]}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT);
        mockHttpClient.onGet(getPath).doReturn(200, responseBody);
        String type = null; // Input is optional
        Integer pageSize = null; // Input is optional
        String continuationToken = null; // Input is optional
        OffsetDateTime startTime = null; // Input is optional

        // When
        var response = fga.readChanges(DEFAULT_STORE_ID, type, pageSize, continuationToken, startTime)
                .get();

        // Then
        mockHttpClient.verify().get(getPath).called(1);
        assertNotNull(response.getData());
        assertNotNull(response.getData().getChanges());
        assertEquals(1, response.getData().getChanges().size());
        TupleChange change = response.getData().getChanges().get(0);
        assertNotNull(change.getTupleKey());
        assertEquals(DEFAULT_OBJECT, change.getTupleKey().getObject());
        assertEquals(DEFAULT_RELATION, change.getTupleKey().getRelation());
        assertEquals(DEFAULT_USER, change.getTupleKey().getUser());
    }

    @Test
    public void readChanges_storeIdRequired() throws Exception {
        // When
        var exception =
                assertThrows(FgaInvalidParameterException.class, () -> fga.readChanges(null, null, null, null, null)
                        .get());

        // Then
        assertEquals("Required parameter storeId was invalid when calling readChanges.", exception.getMessage());
    }

    @Test
    public void readChanges_400() throws Exception {
        // Given
        String getUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/changes";
        mockHttpClient
                .onGet(getUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");
        String type = null; // Input is optional
        Integer pageSize = null; // Input is optional
        String continuationToken = null; // Input is optional
        OffsetDateTime startTime = null; // Input is optional

        // When
        ExecutionException execException = assertThrows(ExecutionException.class, () -> fga.readChanges(
                        DEFAULT_STORE_ID, type, pageSize, continuationToken, startTime)
                .get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void readChanges_404() throws Exception {
        // Given
        String getUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/changes";
        mockHttpClient
                .onGet(getUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");
        String type = null; // Input is optional
        Integer pageSize = null; // Input is optional
        String continuationToken = null; // Input is optional
        OffsetDateTime startTime = null; // Input is optional

        // When
        ExecutionException execException = assertThrows(ExecutionException.class, () -> fga.readChanges(
                        DEFAULT_STORE_ID, type, pageSize, continuationToken, startTime)
                .get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void readChanges_500() throws Exception {
        // Given
        String getUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/changes";
        mockHttpClient
                .onGet(getUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");
        String type = null; // Input is optional
        Integer pageSize = null; // Input is optional
        String continuationToken = null; // Input is optional
        OffsetDateTime startTime = null; // Input is optional

        // When
        ExecutionException execException = assertThrows(ExecutionException.class, () -> fga.readChanges(
                        DEFAULT_STORE_ID, type, pageSize, continuationToken, startTime)
                .get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1 + DEFAULT_MAX_RETRIES);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Get tuples from the store that matches a query, without following userset rewrite rules.
     */
    @Test
    public void readTest() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/read";
        String expectedBody = String.format(
                "{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"page_size\":null,\"continuation_token\":null,\"consistency\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, ConsistencyPreference.HIGHER_CONSISTENCY);
        String responseBody = String.format(
                "{\"tuples\":[{\"key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"}}]}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT);
        mockHttpClient.onPost(postUrl).withBody(is(expectedBody)).doReturn(200, responseBody);
        ReadRequest request = new ReadRequest()
                .tupleKey(new ReadRequestTupleKey()
                        ._object(DEFAULT_OBJECT)
                        .relation(DEFAULT_RELATION)
                        .user(DEFAULT_USER))
                .consistency(ConsistencyPreference.HIGHER_CONSISTENCY);

        // When
        var response = fga.read(DEFAULT_STORE_ID, request).get();

        // Then
        mockHttpClient.verify().post(postUrl).withBody(is(expectedBody)).called(1);
        assertNotNull(response.getData());
        assertNotNull(response.getData().getTuples());
        assertEquals(1, response.getData().getTuples().size());
        var key = response.getData().getTuples().get(0).getKey();
        assertNotNull(key);
        assertEquals(DEFAULT_USER, key.getUser());
        assertEquals(DEFAULT_RELATION, key.getRelation());
        assertEquals(DEFAULT_OBJECT, key.getObject());
    }

    @Test
    public void read_complexContext() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/read";
        String expectedBody = String.format(
                "{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"page_size\":null,\"continuation_token\":null,\"consistency\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, ConsistencyPreference.HIGHER_CONSISTENCY);
        String responseBody = String.format(
                "{\"tuples\":[{\"key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\","
                        + "\"condition\":{\"context\":{"
                        + "  \"num\":1,"
                        + "  \"str\":\"banana\","
                        + "  \"list\":[1, \"banana\", [], {}],"
                        + "  \"obj\":{"
                        + "    \"num\":1,"
                        + "    \"str\":\"banana\","
                        + "    \"list\":[],"
                        + "    \"obj\": {}"
                        + "  }"
                        + "}}}}]}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT);
        mockHttpClient.onPost(postUrl).withBody(is(expectedBody)).doReturn(200, responseBody);
        ReadRequest request = new ReadRequest()
                .tupleKey(new ReadRequestTupleKey()
                        ._object(DEFAULT_OBJECT)
                        .relation(DEFAULT_RELATION)
                        .user(DEFAULT_USER))
                .consistency(ConsistencyPreference.HIGHER_CONSISTENCY);

        // When
        var response = fga.read(DEFAULT_STORE_ID, request).get();

        // Then
        mockHttpClient.verify().post(postUrl).withBody(is(expectedBody)).called(1);
        assertNotNull(response.getData());
        assertNotNull(response.getData().getTuples());
        assertEquals(1, response.getData().getTuples().size());
        var key = response.getData().getTuples().get(0).getKey();
        assertNotNull(key);
        assertEquals(DEFAULT_USER, key.getUser());
        assertEquals(DEFAULT_RELATION, key.getRelation());
        assertEquals(DEFAULT_OBJECT, key.getObject());

        // The below is subject to change.
        assertNotNull(key.getCondition());
        var context = key.getCondition().getContext();
        assertNotNull(context);
        var contextMap = assertInstanceOf(Map.class, context);
        assertEquals(1, contextMap.get("num"));
        assertEquals("banana", contextMap.get("str"));
        assertEquals(List.of(1, "banana", List.of(), Map.of()), contextMap.get("list"));
        assertEquals(Map.of("num", 1, "str", "banana", "list", List.of(), "obj", Map.of()), contextMap.get("obj"));
    }

    @Test
    public void read_storeIdRequired() {
        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.read(null, new ReadRequest())
                .get());

        // Then
        assertEquals("Required parameter storeId was invalid when calling read.", exception.getMessage());
    }

    @Test
    public void read_bodyRequired() {
        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.read(DEFAULT_STORE_ID, null)
                .get());

        // Then
        assertEquals("Required parameter body was invalid when calling read.", exception.getMessage());
    }

    @Test
    public void read_400() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/read";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.read(DEFAULT_STORE_ID, new ReadRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void read_404() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/read";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.read(DEFAULT_STORE_ID, new ReadRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void read_500() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/read";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.read(DEFAULT_STORE_ID, new ReadRequest())
                        .get());

        // Then
        // Simplified logic: POST requests now retry on 5xx errors (1 initial + 3 retries = 4 total)
        mockHttpClient.verify().post(postUrl).called(4);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Add or delete tuples from the store.
     */
    @Test
    public void writeTest_writes() throws Exception {
        // Given
        String postPath = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        String expectedBody = String.format(
                "{\"writes\":{\"tuple_keys\":[{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\",\"condition\":null}]},\"deletes\":null,\"authorization_model_id\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient.onPost(postPath).withBody(is(expectedBody)).doReturn(200, EMPTY_RESPONSE_BODY);
        WriteRequest request = new WriteRequest()
                .authorizationModelId(DEFAULT_AUTH_MODEL_ID)
                .writes(new WriteRequestWrites()
                        .tupleKeys(List.of(new TupleKey()
                                ._object(DEFAULT_OBJECT)
                                .relation(DEFAULT_RELATION)
                                .user(DEFAULT_USER))));

        // When
        fga.write(DEFAULT_STORE_ID, request).get();

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
    }

    /**
     * Add or delete tuples from the store.
     */
    @Test
    public void writeTest_deletes() throws Exception {
        // Given
        String postPath = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        String expectedBody = String.format(
                "{\"writes\":null,\"deletes\":{\"tuple_keys\":[{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"}]},\"authorization_model_id\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient.onPost(postPath).withBody(is(expectedBody)).doReturn(200, EMPTY_RESPONSE_BODY);
        WriteRequest request = new WriteRequest()
                .authorizationModelId(DEFAULT_AUTH_MODEL_ID)
                .deletes(new WriteRequestDeletes()
                        .tupleKeys(List.of(new TupleKeyWithoutCondition()
                                ._object(DEFAULT_OBJECT)
                                .relation(DEFAULT_RELATION)
                                .user(DEFAULT_USER))));

        // When
        fga.write(DEFAULT_STORE_ID, request).get();

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
    }

    @Test
    public void writeWithContext_map() throws Exception {
        // Given
        String postPath = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        String expectedBody = String.format(
                "{\"writes\":{\"tuple_keys\":[{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\",\"condition\":{\"name\":\"conditionName\",\"context\":{\"num\":1,\"str\":\"banana\",\"list\":[],\"obj\":{}}}}]},\"deletes\":null,\"authorization_model_id\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient.onPost(postPath).withBody(is(expectedBody)).doReturn(200, EMPTY_RESPONSE_BODY);
        var context = new LinkedHashMap<>();
        context.put("num", 1);
        context.put("str", "banana");
        context.put("list", List.of());
        context.put("obj", new LinkedHashMap<>());
        WriteRequest request = new WriteRequest()
                .authorizationModelId(DEFAULT_AUTH_MODEL_ID)
                .writes(new WriteRequestWrites()
                        .tupleKeys(List.of(new TupleKey()
                                ._object(DEFAULT_OBJECT)
                                .relation(DEFAULT_RELATION)
                                .user(DEFAULT_USER)
                                .condition(new RelationshipCondition()
                                        .name("conditionName")
                                        .context(context)))));

        // When
        fga.write(DEFAULT_STORE_ID, request).get();

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
    }

    @Test
    public void writeWithContext_modeledObj() throws Exception {
        // Given

        String postPath = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        String expectedBody = String.format(
                "{\"writes\":{\"tuple_keys\":[{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\",\"condition\":{\"name\":\"conditionName\",\"context\":{\"num\":1,\"str\":\"apple\",\"list\":[2,\"banana\",[],{\"num\":3,\"str\":\"cupcake\",\"list\":null,\"obj\":null}],\"obj\":{\"num\":4,\"str\":\"dolphin\",\"list\":null,\"obj\":null}}}}]},\"deletes\":null,\"authorization_model_id\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient.onPost(postPath).withBody(is(expectedBody)).doReturn(200, EMPTY_RESPONSE_BODY);

        class TestObj {
            int num;
            String str;
            List<Object> list;
            Object obj;

            public int getNum() {
                return num;
            }

            public String getStr() {
                return str;
            }

            public List<Object> getList() {
                return list;
            }

            public Object getObj() {
                return obj;
            }
        }
        var obj = new TestObj();
        obj.num = 1;
        obj.str = "apple";
        var objInList = new TestObj();
        obj.list = List.of(2, "banana", List.of(), objInList);
        objInList.num = 3;
        objInList.str = "cupcake";
        var objInObj = new TestObj();
        obj.obj = objInObj;
        objInObj.num = 4;
        objInObj.str = "dolphin";

        WriteRequest request = new WriteRequest()
                .authorizationModelId(DEFAULT_AUTH_MODEL_ID)
                .writes(new WriteRequestWrites()
                        .tupleKeys(List.of(new TupleKey()
                                ._object(DEFAULT_OBJECT)
                                .relation(DEFAULT_RELATION)
                                .user(DEFAULT_USER)
                                .condition(new RelationshipCondition()
                                        .name("conditionName")
                                        .context(obj)))));

        // When
        fga.write(DEFAULT_STORE_ID, request).get();

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
    }

    @Test
    public void write_storeIdRequired() {
        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.write(null, new WriteRequest())
                .get());

        // Then
        assertEquals("Required parameter storeId was invalid when calling write.", exception.getMessage());
    }

    @Test
    public void write_bodyRequired() {
        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.write(DEFAULT_STORE_ID, null)
                .get());

        // Then
        assertEquals("Required parameter body was invalid when calling write.", exception.getMessage());
    }

    @Test
    public void write_400() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.write(DEFAULT_STORE_ID, new WriteRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void write_404() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.write(DEFAULT_STORE_ID, new WriteRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void write_500() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.write(DEFAULT_STORE_ID, new WriteRequest())
                        .get());

        // Then
        // Simplified logic: POST requests now retry on 5xx errors (1 initial + 3 retries = 4 total)
        mockHttpClient.verify().post(postUrl).called(4);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Check whether a user is authorized to access an object.
     */
    @Test
    public void check() throws Exception {
        // Given
        String postPath = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/check";
        String expectedBody = String.format(
                "{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"contextual_tuples\":{\"tuple_keys\":[]},\"authorization_model_id\":\"01G5JAVJ41T49E9TT3SKVS7X1J\",\"trace\":null,\"context\":null,\"consistency\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, ConsistencyPreference.MINIMIZE_LATENCY);
        mockHttpClient.onPost(postPath).withBody(is(expectedBody)).doReturn(200, "{\"allowed\":true}");
        CheckRequest request = new CheckRequest()
                .tupleKey(new CheckRequestTupleKey()
                        ._object(DEFAULT_OBJECT)
                        .relation(DEFAULT_RELATION)
                        .user(DEFAULT_USER))
                .contextualTuples(new ContextualTupleKeys())
                .authorizationModelId(DEFAULT_AUTH_MODEL_ID)
                .consistency(ConsistencyPreference.MINIMIZE_LATENCY);

        // When
        var response = fga.check(DEFAULT_STORE_ID, request).get();

        // Then
        verify(mockConfiguration).getReadTimeout();
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
        assertNotNull(response.getData());
        assertEquals(Boolean.TRUE, response.getData().getAllowed());
    }

    @Test
    public void check_storeIdRequired() {
        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.check(null, new CheckRequest())
                .get());

        // Then
        assertEquals("Required parameter storeId was invalid when calling check.", exception.getMessage());
    }

    @Test
    public void check_bodyRequired() {
        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.check(DEFAULT_STORE_ID, null)
                .get());

        // Then
        assertEquals("Required parameter body was invalid when calling check.", exception.getMessage());
    }

    @Test
    public void check_400() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/check";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.check(DEFAULT_STORE_ID, new CheckRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void check_404() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/check";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.check(DEFAULT_STORE_ID, new CheckRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void check_500() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/check";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.check(DEFAULT_STORE_ID, new CheckRequest())
                        .get());

        // Then
        // Simplified logic: POST requests now retry on 5xx errors (1 initial + 3 retries = 4 total)
        mockHttpClient.verify().post(postUrl).called(4);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship.
     */
    @Test
    public void expandTest() throws Exception {
        // Given
        String postPath = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/expand";
        String expectedBody = String.format(
                "{\"tuple_key\":{\"relation\":\"%s\",\"object\":\"%s\"},\"authorization_model_id\":\"%s\",\"consistency\":\"%s\",\"contextual_tuples\":null}",
                DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID, ConsistencyPreference.HIGHER_CONSISTENCY);
        String responseBody = String.format(
                "{\"tree\":{\"root\":{\"union\":{\"nodes\":[{\"leaf\":{\"users\":{\"users\":[\"%s\"]}}}]}}}}",
                DEFAULT_USER);
        mockHttpClient.onPost(postPath).withBody(is(expectedBody)).doReturn(200, responseBody);
        ExpandRequest request = new ExpandRequest()
                .authorizationModelId(DEFAULT_AUTH_MODEL_ID)
                .tupleKey(new ExpandRequestTupleKey()._object(DEFAULT_OBJECT).relation(DEFAULT_RELATION))
                .consistency(ConsistencyPreference.HIGHER_CONSISTENCY);

        // When
        var response = fga.expand(DEFAULT_STORE_ID, request).get();

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
        assertNotNull(response.getData());

        var tree = response.getData().getTree();
        assertNotNull(tree);
        assertNotNull(tree.getRoot());
        assertNotNull(tree.getRoot().getUnion());
        assertNotNull(tree.getRoot().getUnion().getNodes());
        assertEquals(1, tree.getRoot().getUnion().getNodes().size());
        assertNotNull(tree.getRoot().getUnion().getNodes().get(0));

        var node = tree.getRoot().getUnion().getNodes().get(0);
        assertNotNull(node.getLeaf());
        assertNotNull(node.getLeaf().getUsers());
        assertNotNull(node.getLeaf().getUsers().getUsers());
        assertEquals(1, node.getLeaf().getUsers().getUsers().size());
        assertEquals(DEFAULT_USER, node.getLeaf().getUsers().getUsers().get(0));
    }

    @Test
    public void expand_storeIdRequired() {
        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.expand(null, new ExpandRequest())
                .get());

        // Then
        assertEquals("Required parameter storeId was invalid when calling expand.", exception.getMessage());
    }

    @Test
    public void expand_bodyRequired() {
        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.expand(DEFAULT_STORE_ID, null)
                .get());

        // Then
        assertEquals("Required parameter body was invalid when calling expand.", exception.getMessage());
    }

    @Test
    public void expand_400() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/expand";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.expand(DEFAULT_STORE_ID, new ExpandRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void expand_404() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/expand";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.expand(DEFAULT_STORE_ID, new ExpandRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void expand_500() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/expand";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.expand(DEFAULT_STORE_ID, new ExpandRequest())
                        .get());

        // Then
        // Simplified logic: POST requests now retry on 5xx errors (1 initial + 3 retries = 4 total)
        mockHttpClient.verify().post(postUrl).called(4);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * List all objects of the given type that the user has a relation with.
     */
    @Test
    public void listObjectsTest() throws Exception {
        // Given
        String postPath = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/list-objects";
        String expectedBody = String.format(
                "{\"authorization_model_id\":\"%s\",\"type\":null,\"relation\":\"%s\",\"user\":\"%s\",\"contextual_tuples\":null,\"context\":null,\"consistency\":\"%s\"}",
                DEFAULT_AUTH_MODEL_ID, DEFAULT_RELATION, DEFAULT_USER, ConsistencyPreference.HIGHER_CONSISTENCY);
        mockHttpClient
                .onPost(postPath)
                .withBody(is(expectedBody))
                .doReturn(200, String.format("{\"objects\":[\"%s\"]}", DEFAULT_OBJECT));
        ListObjectsRequest request = new ListObjectsRequest()
                .authorizationModelId(DEFAULT_AUTH_MODEL_ID)
                .relation(DEFAULT_RELATION)
                .user(DEFAULT_USER)
                .consistency(ConsistencyPreference.HIGHER_CONSISTENCY);

        // When
        var response = fga.listObjects(DEFAULT_STORE_ID, request).get();

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
        assertNotNull(response.getData());
        assertEquals(List.of(DEFAULT_OBJECT), response.getData().getObjects());
    }

    @Test
    public void listObjects_storeIdRequired() {
        // When
        var exception =
                assertThrows(FgaInvalidParameterException.class, () -> fga.listObjects(null, new ListObjectsRequest())
                        .get());

        // Then
        assertEquals("Required parameter storeId was invalid when calling listObjects.", exception.getMessage());
    }

    @Test
    public void listObjects_bodyRequired() {
        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.listObjects(DEFAULT_STORE_ID, null)
                .get());

        // Then
        assertEquals("Required parameter body was invalid when calling listObjects.", exception.getMessage());
    }

    @Test
    public void listObjects_400() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/list-objects";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.listObjects(DEFAULT_STORE_ID, new ListObjectsRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void listObjects_404() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/list-objects";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.listObjects(DEFAULT_STORE_ID, new ListObjectsRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void listObjects_500() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/list-objects";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.listObjects(DEFAULT_STORE_ID, new ListObjectsRequest())
                        .get());

        // Then
        // Simplified logic: POST requests now retry on 5xx errors (1 initial + 3 retries = 4 total)
        mockHttpClient.verify().post(postUrl).called(4);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Read assertions for an authorization model ID.
     */
    @Test
    public void readAssertionsTest() throws Exception {
        // Given
        String getUrl =
                "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/assertions/01G5JAVJ41T49E9TT3SKVS7X1J";
        String responseBody = String.format(
                "{\"assertions\":[{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"expectation\":true}]}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT);
        mockHttpClient.onGet(getUrl).doReturn(200, responseBody);

        // When
        var response =
                fga.readAssertions(DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID).get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertNotNull(response.getData());
        assertNotNull(response.getData().getAssertions());
        assertEquals(1, response.getData().getAssertions().size());

        var assertion = response.getData().getAssertions().get(0);
        assertNotNull(assertion);
        assertTrue(assertion.getExpectation());
        assertEquals(DEFAULT_OBJECT, assertion.getTupleKey().getObject());
        assertEquals(DEFAULT_RELATION, assertion.getTupleKey().getRelation());
        assertEquals(DEFAULT_USER, assertion.getTupleKey().getUser());
    }

    @Test
    public void readAssertions_storeIdRequired() {
        // When
        var exception =
                assertThrows(FgaInvalidParameterException.class, () -> fga.readAssertions(null, DEFAULT_AUTH_MODEL_ID)
                        .get());

        // Then
        assertEquals("Required parameter storeId was invalid when calling readAssertions.", exception.getMessage());
    }

    @Test
    public void readAssertions_authModelIdRequired() {
        // When
        var exception =
                assertThrows(FgaInvalidParameterException.class, () -> fga.readAssertions(DEFAULT_STORE_ID, null)
                        .get());

        // Then
        assertEquals(
                "Required parameter authorizationModelId was invalid when calling readAssertions.",
                exception.getMessage());
    }

    @Test
    public void readAssertions_400() throws Exception {
        // Given
        String getUrl =
                "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/assertions/01G5JAVJ41T49E9TT3SKVS7X1J";
        mockHttpClient
                .onGet(getUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.readAssertions(DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID)
                        .get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void readAssertions_404() throws Exception {
        // Given
        String getUrl =
                "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/assertions/01G5JAVJ41T49E9TT3SKVS7X1J";
        mockHttpClient
                .onGet(getUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.readAssertions(DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID)
                        .get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void readAssertions_500() throws Exception {
        // Given
        String getUrl =
                "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/assertions/01G5JAVJ41T49E9TT3SKVS7X1J";
        mockHttpClient
                .onGet(getUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.readAssertions(DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID)
                        .get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1 + DEFAULT_MAX_RETRIES);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Upsert assertions for an authorization model ID.
     */
    @Test
    public void writeAssertionsTest() throws Exception {
        // Given
        String putUrl =
                "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/assertions/01G5JAVJ41T49E9TT3SKVS7X1J";
        String expectedBody = String.format(
                "{\"assertions\":[{\"tuple_key\":{\"object\":\"%s\",\"relation\":\"%s\",\"user\":\"%s\"},\"expectation\":true,\"contextual_tuples\":[],\"context\":null}]}",
                DEFAULT_OBJECT, DEFAULT_RELATION, DEFAULT_USER);
        mockHttpClient.onPut(putUrl).withBody(is(expectedBody)).doReturn(200, EMPTY_RESPONSE_BODY);
        WriteAssertionsRequest request = new WriteAssertionsRequest()
                .assertions(List.of(new Assertion()
                        .tupleKey(new AssertionTupleKey()
                                ._object(DEFAULT_OBJECT)
                                .relation(DEFAULT_RELATION)
                                .user(DEFAULT_USER))
                        .expectation(true)));

        // When
        fga.writeAssertions(DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID, request);

        // Then
        mockHttpClient.verify().put(putUrl).withBody(is(expectedBody)).called(1);
    }

    @Test
    public void writeAssertions_storeIdRequired() {
        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.writeAssertions(
                        null, DEFAULT_AUTH_MODEL_ID, new WriteAssertionsRequest())
                .get());

        // Then
        assertEquals("Required parameter storeId was invalid when calling writeAssertions.", exception.getMessage());
    }

    @Test
    public void writeAssertions_authModelIdRequired() {
        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.writeAssertions(
                        DEFAULT_STORE_ID, null, new WriteAssertionsRequest())
                .get());

        // Then
        assertEquals(
                "Required parameter authorizationModelId was invalid when calling writeAssertions.",
                exception.getMessage());
    }

    @Test
    public void writeAssertions_bodyRequired() {
        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.writeAssertions(
                        DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID, null)
                .get());

        // Then
        assertEquals("Required parameter body was invalid when calling writeAssertions.", exception.getMessage());
    }

    @Test
    public void writeAssertions_400() throws Exception {
        // Given
        String putUrl =
                "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/assertions/01G5JAVJ41T49E9TT3SKVS7X1J";
        mockHttpClient
                .onPut(putUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException = assertThrows(ExecutionException.class, () -> fga.writeAssertions(
                        DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID, new WriteAssertionsRequest())
                .get());

        // Then
        mockHttpClient.verify().put(putUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void writeAssertions_404() throws Exception {
        // Given
        String putUrl =
                "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/assertions/01G5JAVJ41T49E9TT3SKVS7X1J";
        mockHttpClient
                .onPut(putUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException = assertThrows(ExecutionException.class, () -> fga.writeAssertions(
                        DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID, new WriteAssertionsRequest())
                .get());

        // Then
        mockHttpClient.verify().put(putUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void writeAssertions_500() throws Exception {
        // Given
        String putUrl =
                "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/assertions/01G5JAVJ41T49E9TT3SKVS7X1J";
        mockHttpClient
                .onPut(putUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException = assertThrows(ExecutionException.class, () -> fga.writeAssertions(
                        DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID, new WriteAssertionsRequest())
                .get());

        // Then
        // Simplified logic: PUT requests now retry on 5xx errors (1 initial + 3 retries = 4 total)
        mockHttpClient.verify().put(putUrl).called(4);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }
}

/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.api.integration;

import static org.assertj.core.api.Assertions.assertThat;

import dev.openfga.sdk.api.OpenFgaApi;
import dev.openfga.sdk.api.auth.OAuth2Client;
import dev.openfga.sdk.api.client.ApiClient;
import dev.openfga.sdk.api.client.HttpRequestAttempt;
import dev.openfga.sdk.api.configuration.Configuration;
import dev.openfga.sdk.api.configuration.Credentials;
import dev.openfga.sdk.api.configuration.CredentialsMethod;
import dev.openfga.sdk.api.configuration.ClientCredentials;
import dev.openfga.sdk.errors.FgaInvalidParameterException;
import dev.openfga.sdk.telemetry.Telemetry;
import java.net.URI;
import java.net.http.HttpRequest;
import java.time.Duration;
import org.junit.jupiter.api.Test;

class TelemetrySingletonIntegrationTest {
    
    @Test
    void shouldUseSameTelemetryInstanceAcrossComponents() throws FgaInvalidParameterException {
        // given
        Configuration configuration = new Configuration()
                .apiUrl("http://localhost:8080");
        
        // when
        OpenFgaApi api = new OpenFgaApi(configuration);
        Telemetry configTelemetry = configuration.getTelemetry();
        
        // then
        assertThat(configTelemetry).isNotNull();
        // We can't directly access the telemetry field in OpenFgaApi, but we've verified in code
        // that it uses configuration.getTelemetry()
    }
    
    @Test
    void shouldUseSameTelemetryInstanceWithOAuth2() throws FgaInvalidParameterException {
        // given
        ClientCredentials clientCreds = new ClientCredentials()
                .clientId("test-client-id")
                .clientSecret("test-client-secret")
                .apiTokenIssuer("http://localhost:8080")
                .apiAudience("test-audience");
        
        Credentials credentials = new Credentials(clientCreds);
        
        Configuration configuration = new Configuration()
                .apiUrl("http://localhost:8080")
                .credentials(credentials);
                
        ApiClient apiClient = new ApiClient();
        
        // when
        OpenFgaApi api = new OpenFgaApi(configuration, apiClient);
        OAuth2Client oauth2Client = new OAuth2Client(configuration, apiClient);
        Telemetry configTelemetry = configuration.getTelemetry();
        
        // then
        assertThat(configTelemetry).isNotNull();
        // The OAuth2Client and OpenFgaApi both use the same telemetry instance from configuration
    }
    
    @Test
    void shouldUseSameTelemetryInstanceInHttpRequestAttempt() throws FgaInvalidParameterException {
        // given
        Configuration configuration = new Configuration()
                .apiUrl("http://localhost:8080");
        ApiClient apiClient = new ApiClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("http://localhost:8080/test"))
                .GET()
                .build();
        
        // when
        Telemetry configTelemetry = configuration.getTelemetry();
        HttpRequestAttempt<Void> attempt = new HttpRequestAttempt<>(
            request, "test", Void.class, apiClient, configuration, configTelemetry);
        
        // then
        assertThat(configTelemetry).isNotNull();
        // The HttpRequestAttempt now receives the telemetry instance instead of creating a new one
    }
    
    @Test
    void shouldCreateNewTelemetryForDifferentConfigurations() throws FgaInvalidParameterException {
        // given
        Configuration config1 = new Configuration().apiUrl("http://localhost:8080");
        Configuration config2 = new Configuration().apiUrl("http://localhost:8081");
        
        // when
        OpenFgaApi api1 = new OpenFgaApi(config1);
        OpenFgaApi api2 = new OpenFgaApi(config2);
        
        Telemetry telemetry1 = config1.getTelemetry();
        Telemetry telemetry2 = config2.getTelemetry();
        
        // then
        assertThat(telemetry1).isNotNull();
        assertThat(telemetry2).isNotNull();
        assertThat(telemetry1).isNotSameAs(telemetry2);
    }
}
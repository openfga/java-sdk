/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.api.configuration;

import static org.assertj.core.api.Assertions.assertThat;

import dev.openfga.sdk.telemetry.Telemetry;
import org.junit.jupiter.api.Test;

class ConfigurationTelemetryTest {
    @Test
    void shouldReturnSameTelemetryInstanceOnMultipleCalls() {
        // given
        Configuration configuration = new Configuration();

        // when
        Telemetry firstCall = configuration.getTelemetry();
        Telemetry secondCall = configuration.getTelemetry();

        // then
        assertThat(firstCall).isNotNull().isSameAs(secondCall);
    }

    @Test
    void shouldCreateNewTelemetryInstanceForNewConfiguration() {
        // given
        Configuration config1 = new Configuration();
        Configuration config2 = new Configuration();

        // when
        Telemetry telemetry1 = config1.getTelemetry();
        Telemetry telemetry2 = config2.getTelemetry();

        // then
        assertThat(telemetry1).isNotNull();
        assertThat(telemetry2).isNotNull();
        assertThat(telemetry1).isNotSameAs(telemetry2);
    }

    @Test
    void shouldNotCopyTelemetryInstanceWhenUsingOverride() {
        // given
        Configuration originalConfig = new Configuration();
        Telemetry originalTelemetry = originalConfig.getTelemetry(); // Initialize telemetry
        
        ConfigurationOverride override = new ConfigurationOverride();

        // when
        Configuration overriddenConfig = originalConfig.override(override);
        Telemetry overriddenTelemetry = overriddenConfig.getTelemetry();

        // then
        assertThat(originalTelemetry).isNotNull();
        assertThat(overriddenTelemetry).isNotNull();
        assertThat(originalTelemetry).isNotSameAs(overriddenTelemetry);
    }
}
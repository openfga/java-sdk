/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.api.client;

import static com.github.tomakehurst.wiremock.client.WireMock.matchingJsonPath;
import static org.hamcrest.Matchers.*;
import static org.hamcrest.core.StringContains.containsString;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.tomakehurst.wiremock.client.WireMock;
import com.github.tomakehurst.wiremock.junit5.WireMockRuntimeInfo;
import com.github.tomakehurst.wiremock.junit5.WireMockTest;
import com.pgssoft.httpclient.HttpClientMock;
import dev.openfga.sdk.api.client.model.*;
import dev.openfga.sdk.api.configuration.*;
import dev.openfga.sdk.api.model.*;
import dev.openfga.sdk.errors.*;
import java.net.http.HttpClient;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import org.hamcrest.BaseMatcher;
import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;

/**
 * API tests for OpenFgaClient.
 */
@WireMockTest
public class OpenFgaClientTest {
    private static final String DEFAULT_STORE_ID = "01YCP46JKYM8FJCQ37NMBYHE5X";
    private static final String DEFAULT_STORE_NAME = "test_store";
    private static final String DEFAULT_AUTH_MODEL_ID = "01G5JAVJ41T49E9TT3SKVS7X1J";
    private static final String DEFAULT_USER = "user:81684243-9356-4421-8fbf-a4f8d36aa31b";
    private static final String DEFAULT_RELATION = "reader";
    private static final String DEFAULT_TYPE = "document";
    private static final String DEFAULT_ID = "budget";
    private static final String DEFAULT_OBJECT = DEFAULT_TYPE + ":" + DEFAULT_ID;
    private static final String DEFAULT_SCHEMA_VERSION = "1.1";
    private static final ConsistencyPreference DEFAULT_CONSISTENCY = ConsistencyPreference.UNSPECIFIED;
    private static final String EMPTY_RESPONSE_BODY = "{}";
    private static final ClientRelationshipCondition DEFAULT_CONDITION =
            new ClientRelationshipCondition().name("condition").context(Map.of("some", "context"));
    private static final int DEFAULT_MAX_RETRIES = 3;
    private static final Duration DEFAULT_RETRY_DELAY = Duration.ofMillis(100);
    private static final String CLIENT_METHOD_HEADER = "X-OpenFGA-Client-Method";
    private static final String CLIENT_BULK_REQUEST_ID_HEADER = "X-OpenFGA-Client-Bulk-Request-Id";

    private OpenFgaClient fga;
    private ClientConfiguration clientConfiguration;
    private HttpClientMock mockHttpClient;

    @BeforeEach
    public void beforeEachTest() throws Exception {
        System.setProperty("HttpRequestAttempt.debug-logging", "enable");

        mockHttpClient = new HttpClientMock();
        mockHttpClient.debugOn();

        var mockHttpClientBuilder = mock(HttpClient.Builder.class);
        when(mockHttpClientBuilder.executor(any())).thenReturn(mockHttpClientBuilder);
        when(mockHttpClientBuilder.build()).thenReturn(mockHttpClient);

        clientConfiguration = new ClientConfiguration()
                .storeId(DEFAULT_STORE_ID)
                .authorizationModelId(DEFAULT_AUTH_MODEL_ID)
                .apiUrl("https://api.fga.example")
                .credentials(new Credentials())
                .readTimeout(Duration.ofMillis(250))
                .maxRetries(DEFAULT_MAX_RETRIES)
                .minimumRetryDelay(DEFAULT_RETRY_DELAY);

        var mockApiClient = mock(ApiClient.class);
        when(mockApiClient.getHttpClient()).thenReturn(mockHttpClient);
        when(mockApiClient.getObjectMapper()).thenReturn(new ObjectMapper());
        when(mockApiClient.getHttpClientBuilder()).thenReturn(mockHttpClientBuilder);

        fga = new OpenFgaClient(clientConfiguration, mockApiClient);
    }

    /* ******************
     * Credential tests *
     ********************/
    @Test
    public void createStore_withApiToken() throws Exception {
        // Given
        String apiToken = "some-static-token";
        clientConfiguration.credentials(new Credentials(new ApiToken(apiToken)));
        fga.setConfiguration(clientConfiguration);
        String expectedBody = String.format("{\"name\":\"%s\"}", DEFAULT_STORE_NAME);
        String requestBody = String.format("{\"id\":\"%s\",\"name\":\"%s\"}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient
                .onPost("https://api.fga.example/stores")
                .withBody(is(expectedBody))
                .withHeader("Authorization", String.format("Bearer %s", apiToken))
                .doReturn(201, requestBody);
        CreateStoreRequest request = new CreateStoreRequest().name(DEFAULT_STORE_NAME);

        // When
        CreateStoreResponse response = fga.createStore(request).get();

        // Then
        mockHttpClient
                .verify()
                .post("https://api.fga.example/stores")
                .withBody(is(expectedBody))
                .withHeader("Authorization", String.format("Bearer %s", apiToken))
                .called(1);
        assertEquals(DEFAULT_STORE_ID, response.getId());
        assertEquals(DEFAULT_STORE_NAME, response.getName());
    }

    @Test
    public void createStore_withClientCredentials() throws Exception {
        // Given
        String apiTokenIssuer = "oauth2.server";
        String clientId = "some-client-id";
        String clientSecret = "some-client-secret";
        String apiToken = "some-generated-token";
        String apiAudience = "some-audience";
        clientConfiguration.credentials(new Credentials(new ClientCredentials()
                .clientId(clientId)
                .clientSecret(clientSecret)
                .apiTokenIssuer(apiTokenIssuer)
                .apiAudience(apiAudience)));
        fga.setConfiguration(clientConfiguration);

        String expectedBody = String.format("{\"name\":\"%s\"}", DEFAULT_STORE_NAME);
        String requestBody = String.format("{\"id\":\"%s\",\"name\":\"%s\"}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient
                .onPost(String.format("https://%s/oauth/token", apiTokenIssuer))
                .withBody(allOf(
                        containsString(String.format("client_id=%s", clientId)),
                        containsString(String.format("client_secret=%s", clientSecret)),
                        containsString(String.format("audience=%s", apiAudience)),
                        containsString(String.format("grant_type=%s", "client_credentials"))))
                .doReturn(200, String.format("{\"access_token\":\"%s\",\"expires_in\":\"%s\"}", apiToken, 3600));
        mockHttpClient
                .onPost("https://api.fga.example/stores")
                .withBody(is(expectedBody))
                .withHeader("Authorization", String.format("Bearer %s", apiToken))
                .doReturn(201, requestBody);
        CreateStoreRequest request = new CreateStoreRequest().name(DEFAULT_STORE_NAME);

        // When
        // We call two times to ensure the token is cached after the first request.
        CreateStoreResponse response1 = fga.createStore(request).get();
        CreateStoreResponse response2 = fga.createStore(request).get();

        // Then
        // OAuth2 server should be called 1 time.
        mockHttpClient
                .verify()
                .post(String.format("https://%s/oauth/token", apiTokenIssuer))
                .called(1);
        // OpenFGA server should be called 2 times.
        mockHttpClient
                .verify()
                .post("https://api.fga.example/stores")
                .withBody(is(expectedBody))
                .withHeader("Authorization", String.format("Bearer %s", apiToken))
                .called(2);
        assertEquals(DEFAULT_STORE_ID, response1.getId());
        assertEquals(DEFAULT_STORE_NAME, response1.getName());
        assertEquals(DEFAULT_STORE_ID, response2.getId());
        assertEquals(DEFAULT_STORE_NAME, response2.getName());
    }

    @Test
    public void createStore_withClientCredentialsWithRefresh() throws Exception {
        // Given
        String apiTokenIssuer = "oauth2.server";
        String clientId = "some-client-id";
        String clientSecret = "some-client-secret";
        String apiToken = "some-generated-token";
        String apiAudience = "some-audience";
        clientConfiguration.credentials(new Credentials(new ClientCredentials()
                .clientId(clientId)
                .clientSecret(clientSecret)
                .apiTokenIssuer(apiTokenIssuer)
                .apiAudience(apiAudience)));
        fga.setConfiguration(clientConfiguration);

        String expectedBody = String.format("{\"name\":\"%s\"}", DEFAULT_STORE_NAME);
        String requestBody = String.format("{\"id\":\"%s\",\"name\":\"%s\"}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient
                .onPost(String.format("https://%s/oauth/token", apiTokenIssuer))
                .withBody(allOf(
                        containsString(String.format("client_id=%s", clientId)),
                        containsString(String.format("client_secret=%s", clientSecret)),
                        containsString(String.format("audience=%s", apiAudience)),
                        containsString(String.format("grant_type=%s", "client_credentials"))))
                .doReturn(200, String.format("{\"access_token\":\"%s\",\"expires_in\":\"%s\"}", apiToken, 1));
        mockHttpClient
                .onPost("https://api.fga.example/stores")
                .withBody(is(expectedBody))
                .withHeader("Authorization", String.format("Bearer %s", apiToken))
                .doReturn(201, requestBody);
        CreateStoreRequest request = new CreateStoreRequest().name(DEFAULT_STORE_NAME);

        // When
        // We call two times to ensure the token is cached after the first request.
        CreateStoreResponse response1 = fga.createStore(request).get();
        CreateStoreResponse response2 = fga.createStore(request).get();

        // Then
        // OAuth2 server should be called 1 time.
        mockHttpClient
                .verify()
                .post(String.format("https://%s/oauth/token", apiTokenIssuer))
                .called(2);
        // OpenFGA server should be called 2 times.
        mockHttpClient
                .verify()
                .post("https://api.fga.example/stores")
                .withBody(is(expectedBody))
                .withHeader("Authorization", String.format("Bearer %s", apiToken))
                .called(2);
        assertEquals(DEFAULT_STORE_ID, response1.getId());
        assertEquals(DEFAULT_STORE_NAME, response1.getName());
        assertEquals(DEFAULT_STORE_ID, response2.getId());
        assertEquals(DEFAULT_STORE_NAME, response2.getName());
    }

    /**
     * List all stores.
     */
    @Test
    public void listStoresTest() throws Exception {
        // Given
        String responseBody =
                String.format("{\"stores\":[{\"id\":\"%s\",\"name\":\"%s\"}]}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient.onGet("https://api.fga.example/stores").doReturn(200, responseBody);

        // When
        ClientListStoresResponse response = fga.listStores().get();

        // Then
        mockHttpClient.verify().get("https://api.fga.example/stores").called(1);
        assertNotNull(response.getStores());
        assertEquals(1, response.getStores().size());
        assertEquals(DEFAULT_STORE_ID, response.getStores().get(0).getId());
        assertEquals(DEFAULT_STORE_NAME, response.getStores().get(0).getName());
    }

    @Test
    public void listStoresTest_withOptions() throws Exception {
        // Given
        String responseBody =
                String.format("{\"stores\":[{\"id\":\"%s\",\"name\":\"%s\"}]}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        int pageSize = 10;
        String continuationToken = "continuationToken";
        String getUrl = String.format(
                "https://api.fga.example/stores?page_size=%d&continuation_token=%s", pageSize, continuationToken);
        mockHttpClient.onGet(getUrl).doReturn(200, responseBody);
        ClientListStoresOptions options =
                new ClientListStoresOptions().pageSize(pageSize).continuationToken(continuationToken);

        // When
        ClientListStoresResponse response = fga.listStores(options).get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertNotNull(response.getStores());
        assertEquals(1, response.getStores().size());
        assertEquals(DEFAULT_STORE_ID, response.getStores().get(0).getId());
        assertEquals(DEFAULT_STORE_NAME, response.getStores().get(0).getName());
    }

    /**
     * Create a store.
     */
    @Test
    public void createStoreTest() throws Exception {
        // Given
        String expectedBody = String.format("{\"name\":\"%s\"}", DEFAULT_STORE_NAME);
        String requestBody = String.format("{\"id\":\"%s\",\"name\":\"%s\"}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient
                .onPost("https://api.fga.example/stores")
                .withBody(is(expectedBody))
                .doReturn(201, requestBody);
        CreateStoreRequest request = new CreateStoreRequest().name(DEFAULT_STORE_NAME);

        // When
        ClientCreateStoreResponse response = fga.createStore(request).get();

        // Then
        mockHttpClient
                .verify()
                .post("https://api.fga.example/stores")
                .withBody(is(expectedBody))
                .called(1);
        assertEquals(DEFAULT_STORE_ID, response.getId());
        assertEquals(DEFAULT_STORE_NAME, response.getName());
    }

    @Test
    public void createStore_bodyRequired() {
        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.createStore(null).get());

        // Then
        var exception = assertInstanceOf(FgaInvalidParameterException.class, execException.getCause());
        assertEquals("Required parameter body was invalid when calling createStore.", exception.getMessage());
    }

    @Test
    public void createStore_400() throws Exception {
        // Given
        mockHttpClient
                .onPost("https://api.fga.example/stores")
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.createStore(new CreateStoreRequest())
                        .get());

        // Then
        mockHttpClient.verify().post("https://api.fga.example/stores").called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void createStore_404() throws Exception {
        // Given
        mockHttpClient
                .onPost("https://api.fga.example/stores")
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.createStore(new CreateStoreRequest())
                        .get());

        // Then
        mockHttpClient.verify().post("https://api.fga.example/stores").called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void createStore_500() throws Exception {
        // Given
        mockHttpClient
                .onPost("https://api.fga.example/stores")
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.createStore(new CreateStoreRequest())
                        .get());

        // Then
        // Breaking change: POST requests no longer retry on 5xx without Retry-After header
        mockHttpClient.verify().post("https://api.fga.example/stores").called(1);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Get a store.
     */
    @Test
    public void getStoreTest() throws Exception {
        // Given
        String getUrl = String.format("https://api.fga.example/stores/%s", DEFAULT_STORE_ID);
        String responseBody = String.format("{\"id\":\"%s\",\"name\":\"%s\"}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient.onGet(getUrl).doReturn(200, responseBody);

        // When
        ClientGetStoreResponse response = fga.getStore().get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertEquals(DEFAULT_STORE_ID, response.getId());
        assertEquals(DEFAULT_STORE_NAME, response.getName());
    }

    @Test
    public void getStore_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(
                FgaInvalidParameterException.class, () -> fga.getStore().get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void getStore_400() throws Exception {
        // Given
        String getUrl = String.format("https://api.fga.example/stores/%s", DEFAULT_STORE_ID);
        mockHttpClient
                .onGet(getUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.getStore().get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void getStore_404() throws Exception {
        // Given
        String getUrl = String.format("https://api.fga.example/stores/%s", DEFAULT_STORE_ID);
        mockHttpClient
                .onGet(getUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.getStore().get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void getStore_500() throws Exception {
        // Given
        String getUrl = String.format("https://api.fga.example/stores/%s", DEFAULT_STORE_ID);
        mockHttpClient
                .onGet(getUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.getStore().get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1 + DEFAULT_MAX_RETRIES);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Delete a store.
     */
    @Test
    public void deleteStoreTest() throws Exception {
        // Given
        String deleteUrl = String.format("https://api.fga.example/stores/%s", DEFAULT_STORE_ID);
        mockHttpClient.onDelete(deleteUrl).doReturn(204, EMPTY_RESPONSE_BODY);

        // When
        ClientDeleteStoreResponse response = fga.deleteStore().get();

        // Then
        mockHttpClient.verify().delete(deleteUrl).called(1);
        assertEquals(204, response.getStatusCode());
    }

    @Test
    public void deleteStore_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(
                FgaInvalidParameterException.class, () -> fga.deleteStore().get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void deleteStore_400() {
        // Given
        String deleteUrl = String.format("https://api.fga.example/stores/%s", DEFAULT_STORE_ID);
        mockHttpClient
                .onDelete(deleteUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.deleteStore().get());

        // Then
        mockHttpClient.verify().delete(deleteUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void deleteStore_404() {
        // Given
        String deleteUrl = String.format("https://api.fga.example/stores/%s", DEFAULT_STORE_ID);
        mockHttpClient
                .onDelete(deleteUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.deleteStore().get());

        // Then
        mockHttpClient.verify().delete(deleteUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void deleteStore_500() {
        // Given
        String deleteUrl = String.format("https://api.fga.example/stores/%s", DEFAULT_STORE_ID);
        mockHttpClient
                .onDelete(deleteUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.deleteStore().get());

        // Then
        // Breaking change: DELETE requests no longer retry on 5xx without Retry-After header
        mockHttpClient.verify().delete(deleteUrl).called(1);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Return all the authorization models for a particular store.
     */
    @Test
    public void readAuthorizationModelsTest() throws Exception {
        // Given
        String getUrl = String.format("https://api.fga.example/stores/%s/authorization-models", DEFAULT_STORE_ID);
        var options = new ClientReadAuthorizationModelsOptions();
        String responseBody = String.format(
                "{\"authorization_models\":[{\"id\":\"%s\",\"schema_version\":\"%s\"}]}",
                DEFAULT_AUTH_MODEL_ID, DEFAULT_SCHEMA_VERSION);
        mockHttpClient.onGet(getUrl).doReturn(200, responseBody);

        // When
        ClientReadAuthorizationModelsResponse response =
                fga.readAuthorizationModels(options).get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertNotNull(response.getAuthorizationModels());
        assertEquals(1, response.getAuthorizationModels().size());
        AuthorizationModel authModel = response.getAuthorizationModels().get(0);
        assertEquals(DEFAULT_AUTH_MODEL_ID, authModel.getId());
        assertEquals(DEFAULT_SCHEMA_VERSION, authModel.getSchemaVersion());
    }

    @Test
    public void readAuthorizationModels_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);
        var options = new ClientReadAuthorizationModelsOptions();

        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.readAuthorizationModels(options)
                .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void readAuthorizationModels_400() {
        // Given
        String getUrl = String.format("https://api.fga.example/stores/%s/authorization-models", DEFAULT_STORE_ID);
        var options = new ClientReadAuthorizationModelsOptions();
        mockHttpClient
                .onGet(getUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.readAuthorizationModels(options)
                        .get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void readAuthorizationModels_404() {
        // Given
        String getUrl = String.format("https://api.fga.example/stores/%s/authorization-models", DEFAULT_STORE_ID);
        var options = new ClientReadAuthorizationModelsOptions();
        mockHttpClient
                .onGet(getUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.readAuthorizationModels(options)
                        .get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void readAuthorizationModels_500() throws Exception {
        // Given
        String getUrl = String.format("https://api.fga.example/stores/%s/authorization-models", DEFAULT_STORE_ID);
        var options = new ClientReadAuthorizationModelsOptions();
        mockHttpClient
                .onGet(getUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.readAuthorizationModels(options)
                        .get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1 + DEFAULT_MAX_RETRIES);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    @Test
    public void readLatestAuthorizationModelTest() throws Exception {
        // Given
        String getUrl =
                String.format("https://api.fga.example/stores/%s/authorization-models?page_size=1", DEFAULT_STORE_ID);
        String responseBody = String.format(
                "{\"authorization_models\":[{\"id\":\"%s\",\"schema_version\":\"%s\"}]}",
                DEFAULT_AUTH_MODEL_ID, DEFAULT_SCHEMA_VERSION);
        mockHttpClient.onGet(getUrl).doReturn(200, responseBody);

        // When
        ClientReadAuthorizationModelResponse response =
                fga.readLatestAuthorizationModel().get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertNotNull(response.getAuthorizationModel());
        AuthorizationModel authModel = response.getAuthorizationModel();
        assertEquals(DEFAULT_AUTH_MODEL_ID, authModel.getId());
        assertEquals(DEFAULT_SCHEMA_VERSION, authModel.getSchemaVersion());
    }

    @Test
    public void readChanges() throws Exception {
        // Given
        String changeType = "repo";
        OffsetDateTime startTime = null;
        String user = "user:81684243-9356-4421-8fbf-a4f8d36aa31b";
        String relation = "viewer";
        String object = "document:0192ab2a-d83f-756d-9397-c5ed9f3cb69a";
        String continuationToken =
                "eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ";

        ClientReadChangesRequest request =
                new ClientReadChangesRequest().type(changeType).startTime(startTime);
        String getUrl =
                String.format("https://api.fga.example/stores/%s/changes?type=%s", DEFAULT_STORE_ID, changeType);
        String responseBody = String.format(
                "{\"changes\":[{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"operation\":\"TUPLE_OPERATION_WRITE\"}],\"continuation_token\":\"%s\"}",
                user, relation, object, continuationToken);
        mockHttpClient.onGet(getUrl).doReturn(200, responseBody);

        // When
        ClientReadChangesResponse response = fga.readChanges(request).get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertEquals(continuationToken, response.getContinuationToken());
        assertNotNull(response.getChanges());
        assertEquals(1, response.getChanges().size());
        TupleChange change = response.getChanges().get(0);
        assertEquals(TupleOperation.WRITE, change.getOperation());
        TupleKey tupleKey = change.getTupleKey();
        assertNotNull(tupleKey);
        assertEquals(user, tupleKey.getUser());
        assertEquals(relation, tupleKey.getRelation());
        assertEquals(object, tupleKey.getObject());
    }

    /**
     * Create a new authorization model.
     */
    @Test
    public void writeAuthorizationModelTest() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/authorization-models", DEFAULT_STORE_ID);
        String expectedBody =
                "{\"type_definitions\":[{\"type\":\"document\",\"relations\":{},\"metadata\":null}],\"schema_version\":\"1.1\",\"conditions\":{}}";
        String responseBody = String.format("{\"authorization_model_id\":\"%s\"}", DEFAULT_AUTH_MODEL_ID);
        mockHttpClient.onPost(postUrl).withBody(is(expectedBody)).doReturn(201, responseBody);
        WriteAuthorizationModelRequest request = new WriteAuthorizationModelRequest()
                .schemaVersion(DEFAULT_SCHEMA_VERSION)
                .typeDefinitions(List.of(new TypeDefinition().type(DEFAULT_TYPE)));

        // When
        ClientWriteAuthorizationModelResponse response =
                fga.writeAuthorizationModel(request).get();

        // Then
        mockHttpClient.verify().post(postUrl).withBody(is(expectedBody)).called(1);
        assertEquals(DEFAULT_AUTH_MODEL_ID, response.getAuthorizationModelId());
    }

    @Test
    public void writeAuthorizationModel_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.writeAuthorizationModel(
                        new WriteAuthorizationModelRequest())
                .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void writeAuthorizationModel_bodyRequired() {
        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.writeAuthorizationModel(null)
                        .get());

        // Then
        var exception = assertInstanceOf(FgaInvalidParameterException.class, execException.getCause());
        assertEquals(
                "Required parameter body was invalid when calling writeAuthorizationModel.", exception.getMessage());
    }

    @Test
    public void writeAuthorizationModel_400() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/authorization-models", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.writeAuthorizationModel(new WriteAuthorizationModelRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void writeAuthorizationModel_404() {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/authorization-models", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.writeAuthorizationModel(new WriteAuthorizationModelRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void writeAuthorizationModel_500() {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/authorization-models", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.writeAuthorizationModel(new WriteAuthorizationModelRequest())
                        .get());

        // Then
        // Breaking change: POST requests no longer retry on 5xx without Retry-After header
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Return a particular version of an authorization model.
     */
    @Test
    public void readAuthorizationModelTest() throws Exception {
        // Given
        String getUrl = String.format(
                "https://api.fga.example/stores/%s/authorization-models/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        String getResponse = String.format(
                "{\"authorization_model\":{\"id\":\"%s\",\"schema_version\":\"%s\"}}",
                DEFAULT_AUTH_MODEL_ID, DEFAULT_SCHEMA_VERSION);
        mockHttpClient.onGet(getUrl).doReturn(200, getResponse);

        // When
        ClientReadAuthorizationModelResponse response =
                fga.readAuthorizationModel().get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertNotNull(response.getAuthorizationModel());
        assertEquals(DEFAULT_AUTH_MODEL_ID, response.getAuthorizationModel().getId());
        assertEquals(DEFAULT_SCHEMA_VERSION, response.getAuthorizationModel().getSchemaVersion());
    }

    @Test
    public void readAuthorizationModelTest_withOptions() throws Exception {
        // Given
        String authorizationModelId = "alternateAuthorizationModelId";
        ClientReadAuthorizationModelOptions options =
                new ClientReadAuthorizationModelOptions().authorizationModelId(authorizationModelId);
        String getUrl = String.format(
                "https://api.fga.example/stores/%s/authorization-models/%s", DEFAULT_STORE_ID, authorizationModelId);
        String getResponse = String.format(
                "{\"authorization_model\":{\"id\":\"%s\",\"schema_version\":\"%s\"}}",
                authorizationModelId, DEFAULT_SCHEMA_VERSION);
        mockHttpClient.onGet(getUrl).doReturn(200, getResponse);

        // When
        ClientReadAuthorizationModelResponse response =
                fga.readAuthorizationModel(options).get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertNotNull(response.getAuthorizationModel());
        assertEquals(authorizationModelId, response.getAuthorizationModel().getId());
        assertEquals(DEFAULT_SCHEMA_VERSION, response.getAuthorizationModel().getSchemaVersion());
    }

    @Test
    public void readAuthorizationModel_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.readAuthorizationModel()
                .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void readAuthorizationModel_idRequired() {
        // Given
        clientConfiguration.authorizationModelId(null);

        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.readAuthorizationModel()
                .get());

        // Then
        assertEquals(
                "Required parameter authorizationModelId was invalid when calling ClientConfiguration.",
                exception.getMessage());
    }

    @Test
    public void readAuthorizationModel_400() {
        // Given
        String getUrl = String.format(
                "https://api.fga.example/stores/%s/authorization-models/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onGet(getUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.readAuthorizationModel().get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void readAuthorizationModel_404() throws Exception {
        // Given
        String getUrl = String.format(
                "https://api.fga.example/stores/%s/authorization-models/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onGet(getUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.readAuthorizationModel().get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void readAuthorizationModel_500() throws Exception {
        // Given
        String getUrl = String.format(
                "https://api.fga.example/stores/%s/authorization-models/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onGet(getUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.readAuthorizationModel().get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1 + DEFAULT_MAX_RETRIES);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Get tuples from the store that matches a query, without following userset rewrite rules.
     */
    @Test
    public void readTest() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/read", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"page_size\":null,\"continuation_token\":null,\"consistency\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, ConsistencyPreference.MINIMIZE_LATENCY);
        String responseBody = String.format(
                "{\"tuples\":[{\"key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"}}]}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT);
        mockHttpClient.onPost(postUrl).withBody(is(expectedBody)).doReturn(200, responseBody);
        ClientReadRequest request = new ClientReadRequest()
                .user(DEFAULT_USER)
                .relation(DEFAULT_RELATION)
                ._object(DEFAULT_OBJECT);
        ClientReadOptions options = new ClientReadOptions().consistency(ConsistencyPreference.MINIMIZE_LATENCY);

        // When
        ClientReadResponse response = fga.read(request, options).get();

        // Then
        mockHttpClient.verify().post(postUrl).withBody(is(expectedBody)).called(1);
        assertNotNull(response.getTuples());
        assertEquals(1, response.getTuples().size());
        TupleKey key = response.getTuples().get(0).getKey();
        assertNotNull(key);
        assertEquals(DEFAULT_USER, key.getUser());
        assertEquals(DEFAULT_RELATION, key.getRelation());
        assertEquals(DEFAULT_OBJECT, key.getObject());
    }

    @Test
    public void read_emptyRequestSendsNoTupleKey() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/read", DEFAULT_STORE_ID);
        String expectedBody =
                "{\"tuple_key\":null,\"page_size\":null,\"continuation_token\":null,\"consistency\":\"UNSPECIFIED\"}";
        mockHttpClient.onPost(postUrl).withBody(is(expectedBody)).doReturn(200, EMPTY_RESPONSE_BODY);
        ClientReadRequest request = new ClientReadRequest();

        // When
        fga.read(request).get();

        // Then
        mockHttpClient.verify().post(postUrl).withBody(is(expectedBody)).called(1);
    }

    @Test
    public void read_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.read(new ClientReadRequest())
                .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void read_400() {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/read", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.read(new ClientReadRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void read_404() {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/read", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.read(new ClientReadRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void read_500() {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/read", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.read(new ClientReadRequest())
                        .get());

        // Then
        // Breaking change: POST requests no longer retry on 5xx without Retry-After header
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Add or delete tuples from the store.
     */
    @Test
    public void writeTest_writes() throws Exception {
        // Given
        String postPath = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        String expectedBody = String.format(
                "{\"writes\":{\"tuple_keys\":[{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\",\"condition\":null}]},\"deletes\":null,\"authorization_model_id\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient.onPost(postPath).withBody(is(expectedBody)).doReturn(200, EMPTY_RESPONSE_BODY);
        ClientWriteRequest request = new ClientWriteRequest()
                .writes(List.of(new ClientTupleKey()
                        ._object(DEFAULT_OBJECT)
                        .relation(DEFAULT_RELATION)
                        .user(DEFAULT_USER)));

        // When
        ClientWriteResponse response = fga.write(request).get();

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
        assertEquals(200, response.getStatusCode());
    }

    /**
     * Add or delete tuples from the store.
     */
    @Test
    public void writeTest_deletes() throws Exception {
        // Given
        String postPath = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        String expectedBody = String.format(
                "{\"writes\":null,\"deletes\":{\"tuple_keys\":[{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"}]},\"authorization_model_id\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient.onPost(postPath).withBody(is(expectedBody)).doReturn(200, EMPTY_RESPONSE_BODY);
        ClientWriteRequest request = new ClientWriteRequest()
                .deletes(List.of(new ClientTupleKeyWithoutCondition()
                        ._object(DEFAULT_OBJECT)
                        .relation(DEFAULT_RELATION)
                        .user(DEFAULT_USER)));

        // When
        fga.write(request);

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
    }

    @Test
    public void writeTest_nonTransaction() throws Exception {
        // Given
        String postPath = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        String writeTupleBody = String.format(
                "{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\",\"condition\":{\"name\":\"condition\",\"context\":{\"some\":\"context\"}}}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT);
        ClientTupleKeyWithoutCondition tuple = new ClientTupleKeyWithoutCondition()
                ._object(DEFAULT_OBJECT)
                .relation(DEFAULT_RELATION)
                .user(DEFAULT_USER);
        ClientTupleKey writeTuple = tuple.condition(DEFAULT_CONDITION);
        String write2Body = String.format(
                "{\"writes\":{\"tuple_keys\":[%s,%s]},\"deletes\":null,\"authorization_model_id\":\"%s\"}",
                writeTupleBody, writeTupleBody, DEFAULT_AUTH_MODEL_ID);
        String write1Body = String.format(
                "{\"writes\":{\"tuple_keys\":[%s]},\"deletes\":null,\"authorization_model_id\":\"%s\"}",
                writeTupleBody, DEFAULT_AUTH_MODEL_ID);
        String deleteTupleBody = String.format(
                "{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT);
        String delete2Body = String.format(
                "{\"writes\":null,\"deletes\":{\"tuple_keys\":[%s,%s]},\"authorization_model_id\":\"%s\"}",
                deleteTupleBody, deleteTupleBody, DEFAULT_AUTH_MODEL_ID);
        String delete1Body = String.format(
                "{\"writes\":null,\"deletes\":{\"tuple_keys\":[%s]},\"authorization_model_id\":\"%s\"}",
                deleteTupleBody, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onPost(postPath)
                .withBody(isOneOf(write2Body, write1Body, delete2Body, delete1Body))
                .withHeader(CLIENT_METHOD_HEADER, "Write")
                .withHeader(CLIENT_BULK_REQUEST_ID_HEADER, anyValidUUID())
                .doReturn(200, EMPTY_RESPONSE_BODY);
        ClientWriteRequest request = new ClientWriteRequest()
                .writes(List.of(writeTuple, writeTuple, writeTuple, writeTuple, writeTuple))
                .deletes(List.of(tuple, tuple, tuple, tuple, tuple));
        ClientWriteOptions options =
                new ClientWriteOptions().disableTransactions(true).transactionChunkSize(2);

        // When
        var response = fga.write(request, options).get();

        // Then
        mockHttpClient
                .verify()
                .post(postPath)
                .withBody(is(write2Body))
                .withHeader(CLIENT_METHOD_HEADER, "Write")
                .withHeader(CLIENT_BULK_REQUEST_ID_HEADER, anyValidUUID())
                .called(2);
        mockHttpClient
                .verify()
                .post(postPath)
                .withBody(is(write1Body))
                .withHeader(CLIENT_METHOD_HEADER, "Write")
                .withHeader(CLIENT_BULK_REQUEST_ID_HEADER, anyValidUUID())
                .called(1);
        mockHttpClient
                .verify()
                .post(postPath)
                .withBody(is(delete2Body))
                .withHeader(CLIENT_METHOD_HEADER, "Write")
                .withHeader(CLIENT_BULK_REQUEST_ID_HEADER, anyValidUUID())
                .called(2);
        mockHttpClient
                .verify()
                .post(postPath)
                .withBody(is(delete1Body))
                .withHeader(CLIENT_METHOD_HEADER, "Write")
                .withHeader(CLIENT_BULK_REQUEST_ID_HEADER, anyValidUUID())
                .called(1);
        assertEquals(200, response.getStatusCode());
    }

    @Test
    public void writeTest_nonTransactionsWithFailure() {
        // Given
        String postPath = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        String firstUser = "user:first";
        String failedUser = "user:SECOND";
        String skippedUser = "user:third";
        Function<String, String> writeBody = user -> String.format(
                "{\"writes\":{\"tuple_keys\":[{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\",\"condition\":{\"name\":\"condition\",\"context\":{\"some\":\"context\"}}}]},\"deletes\":null,\"authorization_model_id\":\"%s\"}",
                user, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onPost(postPath)
                .withBody(isOneOf(writeBody.apply(firstUser), writeBody.apply(skippedUser)))
                .withHeader(CLIENT_METHOD_HEADER, "Write")
                .withHeader(CLIENT_BULK_REQUEST_ID_HEADER, anyValidUUID())
                .doReturn(200, EMPTY_RESPONSE_BODY);
        mockHttpClient
                .onPost(postPath)
                .withBody(is(writeBody.apply(failedUser)))
                .withHeader(CLIENT_METHOD_HEADER, "Write")
                .withHeader(CLIENT_BULK_REQUEST_ID_HEADER, anyValidUUID())
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");
        ClientWriteRequest request = new ClientWriteRequest()
                .writes(Stream.of(firstUser, failedUser, skippedUser)
                        .map(user -> new ClientTupleKey()
                                ._object(DEFAULT_OBJECT)
                                .relation(DEFAULT_RELATION)
                                .user(user)
                                .condition(DEFAULT_CONDITION))
                        .collect(Collectors.toList()));
        ClientWriteOptions options =
                new ClientWriteOptions().disableTransactions(true).transactionChunkSize(1);

        // When
        var execException = assertThrows(
                ExecutionException.class, () -> fga.write(request, options).get());

        // Then
        mockHttpClient
                .verify()
                .post(postPath)
                .withBody(is(writeBody.apply(firstUser)))
                .withHeader(CLIENT_METHOD_HEADER, "Write")
                .withHeader(CLIENT_BULK_REQUEST_ID_HEADER, anyValidUUID())
                .called(1);
        mockHttpClient
                .verify()
                .post(postPath)
                .withBody(is(writeBody.apply(failedUser)))
                .withHeader(CLIENT_METHOD_HEADER, "Write")
                .withHeader(CLIENT_BULK_REQUEST_ID_HEADER, anyValidUUID())
                .called(1);
        mockHttpClient
                .verify()
                .post(postPath)
                .withBody(is(writeBody.apply(skippedUser)))
                .withHeader(CLIENT_METHOD_HEADER, "Write")
                .withHeader(CLIENT_BULK_REQUEST_ID_HEADER, anyValidUUID())
                .called(0);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
    }

    @Test
    public void writeTest_transaction() throws Exception {
        // Given
        String postPath = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        String writeTupleBody = String.format(
                "{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\",\"condition\":{\"name\":\"condition\",\"context\":{\"some\":\"context\"}}}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT);
        String deleteTupleBody = String.format(
                "{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT);
        String expectedBody = String.format(
                "{\"writes\":{\"tuple_keys\":[%s,%s,%s]},\"deletes\":{\"tuple_keys\":[%s,%s,%s]},\"authorization_model_id\":\"%s\"}",
                writeTupleBody,
                writeTupleBody,
                writeTupleBody,
                deleteTupleBody,
                deleteTupleBody,
                deleteTupleBody,
                DEFAULT_AUTH_MODEL_ID);
        mockHttpClient.onPost(postPath).withBody(is(expectedBody)).doReturn(200, EMPTY_RESPONSE_BODY);
        var tuple = new ClientTupleKey()
                ._object(DEFAULT_OBJECT)
                .relation(DEFAULT_RELATION)
                .user(DEFAULT_USER)
                .condition(DEFAULT_CONDITION);
        ClientWriteRequest request =
                new ClientWriteRequest().writes(List.of(tuple, tuple, tuple)).deletes(List.of(tuple, tuple, tuple));

        // We expect transactionChunkSize will be ignored, and exactly one request will be sent.
        ClientWriteOptions options =
                new ClientWriteOptions().disableTransactions(false).transactionChunkSize(1);

        // When
        var response = fga.write(request, options).get();

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
        assertEquals(200, response.getStatusCode());
    }

    @Test
    public void writeTest_transactionWithFailure() {
        // Given
        String postPath = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        String writeTupleBody = String.format(
                "{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\",\"condition\":{\"name\":\"condition\",\"context\":{\"some\":\"context\"}}}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT);
        String deleteTupleBody = String.format(
                "{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT);
        String expectedBody = String.format(
                "{\"writes\":{\"tuple_keys\":[%s,%s,%s]},\"deletes\":{\"tuple_keys\":[%s,%s,%s]},\"authorization_model_id\":\"%s\"}",
                writeTupleBody,
                writeTupleBody,
                writeTupleBody,
                deleteTupleBody,
                deleteTupleBody,
                deleteTupleBody,
                DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onPost(postPath)
                .withBody(is(expectedBody))
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");
        var tuple = new ClientTupleKey()
                ._object(DEFAULT_OBJECT)
                .relation(DEFAULT_RELATION)
                .user(DEFAULT_USER)
                .condition(DEFAULT_CONDITION);
        ClientWriteRequest request =
                new ClientWriteRequest().writes(List.of(tuple, tuple, tuple)).deletes(List.of(tuple, tuple, tuple));

        // We expect transactionChunkSize will be ignored, and exactly one request will be sent.
        ClientWriteOptions options =
                new ClientWriteOptions().disableTransactions(false).transactionChunkSize(1);

        // When
        var execException = assertThrows(
                ExecutionException.class, () -> fga.write(request, options).get());

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
    }

    @Test
    public void writeTuplesTest() throws Exception {
        // Given
        String postPath = String.format("https://api.fga.example/stores/%s/write", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"writes\":{\"tuple_keys\":[{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\",\"condition\":{\"name\":\"condition\",\"context\":{\"some\":\"context\"}}}]},"
                        + "\"deletes\":null,\"authorization_model_id\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient.onPost(postPath).withBody(is(expectedBody)).doReturn(200, EMPTY_RESPONSE_BODY);
        List<ClientTupleKey> tuples = List.of(new ClientTupleKey()
                ._object(DEFAULT_OBJECT)
                .relation(DEFAULT_RELATION)
                .user(DEFAULT_USER)
                .condition(DEFAULT_CONDITION));

        // When
        ClientWriteResponse response = fga.writeTuples(tuples).get();

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
        assertEquals(200, response.getStatusCode());
    }

    @Test
    public void deleteTuplesTest() throws Exception {
        // Given
        String postPath = String.format("https://api.fga.example/stores/%s/write", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"writes\":null,\"deletes\":{\"tuple_keys\":[{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"}]},\"authorization_model_id\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient.onPost(postPath).withBody(is(expectedBody)).doReturn(200, EMPTY_RESPONSE_BODY);
        List<ClientTupleKeyWithoutCondition> tuples = List.of(new ClientTupleKeyWithoutCondition()
                ._object(DEFAULT_OBJECT)
                .relation(DEFAULT_RELATION)
                .user(DEFAULT_USER));

        // When
        ClientWriteResponse response = fga.deleteTuples(tuples).get();

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
        assertEquals(200, response.getStatusCode());
    }

    @Test
    public void write_nothingSentWhenWritesAndDeletesAreEmpty()
            throws FgaInvalidParameterException, ExecutionException, InterruptedException {
        // Given
        String postPath = String.format("https://api.fga.example/stores/%s/write", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"writes\":null,\"deletes\":null,\"authorization_model_id\":\"%s\"}", DEFAULT_AUTH_MODEL_ID);
        mockHttpClient.onPost(postPath).withBody(is(expectedBody)).doReturn(200, EMPTY_RESPONSE_BODY);

        // When
        var clientWriteRequest =
                new ClientWriteRequest().writes(Collections.emptyList()).deletes(Collections.emptyList());
        var response = fga.write(clientWriteRequest).get();

        // Then
        mockHttpClient.verify().post(postPath).called(1);
        assertEquals(200, response.getStatusCode());
    }

    @Test
    public void write_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.write(new ClientWriteRequest())
                .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void write_400() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");
        ClientWriteRequest request = new ClientWriteRequest()
                .writes(List.of(new ClientTupleKey()
                        ._object(DEFAULT_OBJECT)
                        .relation(DEFAULT_RELATION)
                        .user(DEFAULT_USER)
                        .condition(DEFAULT_CONDITION)));

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.write(request).get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void write_404() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");
        ClientWriteRequest request = new ClientWriteRequest()
                .writes(List.of(new ClientTupleKey()
                        ._object(DEFAULT_OBJECT)
                        .relation(DEFAULT_RELATION)
                        .user(DEFAULT_USER)
                        .condition(DEFAULT_CONDITION)));

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.write(request).get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void write_500() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");
        ClientWriteRequest request = new ClientWriteRequest()
                .writes(List.of(new ClientTupleKey()
                        ._object(DEFAULT_OBJECT)
                        .relation(DEFAULT_RELATION)
                        .user(DEFAULT_USER)
                        .condition(DEFAULT_CONDITION)));

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.write(request).get());

        // Then
        // Breaking change: POST requests no longer retry on 5xx without Retry-After header
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Check whether a user is authorized to access an object.
     */
    @Test
    public void check() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},"
                        + "\"contextual_tuples\":{\"tuple_keys\":[{\"user\":\"%s\",\"relation\":\"owner\",\"object\":\"%s\",\"condition\":{\"name\":\"condition\",\"context\":{\"some\":\"context\"}}}]},"
                        + "\"authorization_model_id\":\"01G5JAVJ41T49E9TT3SKVS7X1J\",\"trace\":null,\"context\":null,\"consistency\":\"%s\"}",
                DEFAULT_USER,
                DEFAULT_RELATION,
                DEFAULT_OBJECT,
                DEFAULT_USER,
                DEFAULT_OBJECT,
                ConsistencyPreference.HIGHER_CONSISTENCY);
        mockHttpClient.onPost(postUrl).withBody(is(expectedBody)).doReturn(200, "{\"allowed\":true}");
        ClientCheckRequest request = new ClientCheckRequest()
                ._object(DEFAULT_OBJECT)
                .relation(DEFAULT_RELATION)
                .user(DEFAULT_USER)
                .contextualTuples(List.of(new ClientTupleKey()
                        ._object(DEFAULT_OBJECT)
                        .relation("owner")
                        .user(DEFAULT_USER)
                        .condition(DEFAULT_CONDITION)));
        ClientCheckOptions options = new ClientCheckOptions()
                .authorizationModelId(DEFAULT_AUTH_MODEL_ID)
                .consistency(ConsistencyPreference.HIGHER_CONSISTENCY);

        // When
        ClientCheckResponse response = fga.check(request, options).get();

        // Then
        mockHttpClient.verify().post(postUrl).withBody(is(expectedBody)).called(1);
        assertEquals(Boolean.TRUE, response.getAllowed());
    }

    @Test
    public void check_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.check(new ClientCheckRequest())
                .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void check_400() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.check(new ClientCheckRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void check_404() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.check(new ClientCheckRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void check_500() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.check(new ClientCheckRequest())
                        .get());

        // Then
        // Breaking change: POST requests no longer retry on 5xx without Retry-After header
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Check whether a user is authorized to access an object.
     */
    @Test
    public void clientBatchCheck() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"contextual_tuples\":null,\"authorization_model_id\":\"01G5JAVJ41T49E9TT3SKVS7X1J\",\"trace\":null,\"context\":null,\"consistency\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, ConsistencyPreference.MINIMIZE_LATENCY);
        mockHttpClient
                .onPost(postUrl)
                .withBody(is(expectedBody))
                .withHeader(CLIENT_METHOD_HEADER, "ClientBatchCheck")
                .withHeader(CLIENT_BULK_REQUEST_ID_HEADER, anyValidUUID())
                .doReturn(200, "{\"allowed\":true}");
        ClientCheckRequest request = new ClientCheckRequest()
                ._object(DEFAULT_OBJECT)
                .relation(DEFAULT_RELATION)
                .user(DEFAULT_USER);
        ClientBatchCheckClientOptions options = new ClientBatchCheckClientOptions()
                .authorizationModelId(DEFAULT_AUTH_MODEL_ID)
                .consistency(ConsistencyPreference.MINIMIZE_LATENCY);

        // When
        List<ClientBatchCheckClientResponse> response =
                fga.clientBatchCheck(List.of(request), options).get();

        // Then
        mockHttpClient
                .verify()
                .post(postUrl)
                .withBody(is(expectedBody))
                .withHeader(CLIENT_METHOD_HEADER, "ClientBatchCheck")
                .withHeader(CLIENT_BULK_REQUEST_ID_HEADER, anyValidUUID())
                .called(1);
        assertEquals(Boolean.TRUE, response.get(0).getAllowed());
    }

    @Test
    public void shouldShutdownExecutorAfterBatchCheck() throws Exception {
        // Given
        ScheduledExecutorService mockExecutor = mock(ScheduledExecutorService.class);

        try (MockedStatic<Executors> mockedExecutors = mockStatic(Executors.class)) {
            mockedExecutors
                    .when(() -> Executors.newScheduledThreadPool(anyInt()))
                    .thenReturn(mockExecutor);

            // mockExecutor needs to handle tasks submitted to it so latch can count down
            doAnswer(invocation -> {
                        Runnable task = invocation.getArgument(0);
                        task.run();
                        return null;
                    })
                    .when(mockExecutor)
                    .execute(any(Runnable.class));

            ClientCheckRequest request = new ClientCheckRequest()
                    ._object(DEFAULT_OBJECT)
                    .relation(DEFAULT_RELATION)
                    .user(DEFAULT_USER);
            ClientBatchCheckClientOptions options = new ClientBatchCheckClientOptions()
                    .authorizationModelId(DEFAULT_AUTH_MODEL_ID)
                    .consistency(ConsistencyPreference.MINIMIZE_LATENCY);

            // When
            fga.clientBatchCheck(List.of(request), options).get();

            // Then
            verify(mockExecutor).shutdown();
        }
    }

    @Test
    public void clientBatchCheck_twentyTimes() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"contextual_tuples\":null,\"authorization_model_id\":\"01G5JAVJ41T49E9TT3SKVS7X1J\",\"trace\":null,\"context\":null,\"consistency\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_CONSISTENCY);
        mockHttpClient
                .onPost(postUrl)
                .withBody(is(expectedBody))
                .withHeader(CLIENT_METHOD_HEADER, "ClientBatchCheck")
                .withHeader(CLIENT_BULK_REQUEST_ID_HEADER, anyValidUUID())
                .doReturn(200, "{\"allowed\":true}");
        List<ClientCheckRequest> requests = IntStream.range(0, 20)
                .mapToObj(ignored -> new ClientCheckRequest()
                        ._object(DEFAULT_OBJECT)
                        .relation(DEFAULT_RELATION)
                        .user(DEFAULT_USER))
                .collect(Collectors.toList());
        ClientBatchCheckClientOptions options =
                new ClientBatchCheckClientOptions().authorizationModelId(DEFAULT_AUTH_MODEL_ID);

        // When
        fga.clientBatchCheck(requests, options).get();

        // Then
        mockHttpClient
                .verify()
                .post(postUrl)
                .withBody(is(expectedBody))
                .withHeader(CLIENT_METHOD_HEADER, "ClientBatchCheck")
                .withHeader(CLIENT_BULK_REQUEST_ID_HEADER, anyValidUUID())
                .called(20);
    }

    @Test
    public void clientBatchCheck_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.clientBatchCheck(
                        List.of(new ClientCheckRequest()), new ClientBatchCheckClientOptions())
                .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void clientBatchCheck_400() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        List<ClientBatchCheckClientResponse> response = fga.clientBatchCheck(
                        List.of(new ClientCheckRequest()), new ClientBatchCheckClientOptions())
                .join();

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        assertNotNull(response);
        assertEquals(1, response.size());
        assertNull(response.get(0).getAllowed());
        Throwable execException = response.get(0).getThrowable();
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void clientBatchCheck_404() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        List<ClientBatchCheckClientResponse> response = fga.clientBatchCheck(
                        List.of(new ClientCheckRequest()), new ClientBatchCheckClientOptions())
                .join();

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        assertNotNull(response);
        assertEquals(1, response.size());
        assertNull(response.get(0).getAllowed());
        Throwable execException = response.get(0).getThrowable();
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void clientBatchCheck_500() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        List<ClientBatchCheckClientResponse> response = fga.clientBatchCheck(
                        List.of(new ClientCheckRequest()), new ClientBatchCheckClientOptions())
                .join();

        // Then
        // Breaking change: POST requests no longer retry on 5xx without Retry-After header
        mockHttpClient.verify().post(postUrl).called(1);
        assertNotNull(response);
        assertEquals(1, response.size());
        assertNull(response.get(0).getAllowed());
        Throwable execException = response.get(0).getThrowable();
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    @Test
    public void shouldThrowExceptionWhenCorrelationIdsAreDuplicated() {
        // Given
        ClientBatchCheckItem item1 = new ClientBatchCheckItem()
                .user("user:81684243-9356-4421-8fbf-a4f8d36aa31b")
                .relation("viewer")
                ._object("workspace:1")
                .correlationId("cor-id");
        ClientBatchCheckItem item2 = new ClientBatchCheckItem()
                .user("user:91284243-9356-4421-8fbf-a4f8d36aa31b")
                .relation("viewer")
                ._object("workspace:2")
                .correlationId("cor-id");
        ClientBatchCheckRequest request = new ClientBatchCheckRequest().checks(List.of(item1, item2));

        // When
        FgaValidationError error = assertThrows(
                FgaValidationError.class, () -> fga.batchCheck(request).join());

        // Then
        assertEquals("correlationId", error.getField());
        assertEquals("When calling batchCheck, correlation IDs must be unique", error.getMessage());
    }

    @Test
    public void shouldReturnEmptyResultsWhenEmptyChecksAreSpecified() throws Exception {
        // Given
        ClientBatchCheckRequest request = new ClientBatchCheckRequest().checks(List.of());

        // When
        ClientBatchCheckResponse response = fga.batchCheck(request).join();

        // Then
        assertEquals(0, response.getResult().size());
    }

    @Test
    public void shouldHandleSingleBatchSuccessfully() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/batch-check", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(
                        200,
                        "{\"result\": {\"cor-1\": {\"allowed\": true, \"error\": null}, \"cor-2\": {\"allowed\": false, \"error\": null}}}");

        ClientBatchCheckItem item1 = new ClientBatchCheckItem()
                .user("user:81684243-9356-4421-8fbf-a4f8d36aa31b")
                .relation("can_read")
                ._object("document")
                .contextualTuples(List.of(
                        new ClientTupleKey()
                                .user("user:81684243-9356-4421-8fbf-a4f8d36aa31b")
                                .relation("editor")
                                ._object("folder:product"),
                        new ClientTupleKey()
                                .user("folder:product")
                                .relation("parent")
                                ._object("document:0192ab2a-d83f-756d-9397-c5ed9f3cb69a")))
                .correlationId("cor-1");
        ClientBatchCheckItem item2 = new ClientBatchCheckItem()
                .user("folder:product")
                .relation("parent")
                ._object("document:0192ab2a-d83f-756d-9397-c5ed9f3cb69a")
                .correlationId("cor-2");
        ClientBatchCheckRequest request = new ClientBatchCheckRequest().checks(List.of(item1, item2));

        // When
        ClientBatchCheckResponse response = fga.batchCheck(request).join();

        // Then
        mockHttpClient.verify().post(postUrl).called(1);

        assertNotNull(response);
        assertEquals(2, response.getResult().size());
        assertTrue(response.getResult().get(0).isAllowed());
        assertFalse(response.getResult().get(1).isAllowed());
    }

    @Test
    public void shouldSplitBatchesSuccessfully(WireMockRuntimeInfo wireMockRuntimeInfo) throws Exception {
        // Given
        String httpBaseUrl = wireMockRuntimeInfo.getHttpBaseUrl();
        var fga = new OpenFgaClient(clientConfiguration.apiUrl(httpBaseUrl), new ApiClient());
        String postUrl = String.format("/stores/%s/batch-check", DEFAULT_STORE_ID);

        WireMock.stubFor(
                WireMock.post(postUrl)
                        .withRequestBody(matchingJsonPath("$.checks[0].correlation_id", WireMock.equalTo("cor-1")))
                        .willReturn(
                                WireMock.aResponse()
                                        .withStatus(200)
                                        .withBody(
                                                "{\"result\": {\"cor-1\": {\"allowed\": true, \"error\": null}, \"cor-2\": {\"allowed\": false, \"error\": null}}}")));

        WireMock.stubFor(
                WireMock.post(postUrl)
                        .withRequestBody(matchingJsonPath("$.checks[0].correlation_id", WireMock.equalTo("cor-3")))
                        .willReturn(
                                WireMock.aResponse()
                                        .withStatus(200)
                                        .withBody(
                                                "{\"result\": {\"cor-3\": {\"allowed\": false, \"error\": {\"input_error\": \"relation_not_found\", \"message\": \"relation not found\"}}}}}")));

        ClientBatchCheckItem item1 = new ClientBatchCheckItem()
                .user("user:81684243-9356-4421-8fbf-a4f8d36aa31b")
                .relation("can_read")
                ._object("document")
                .contextualTuples(List.of(
                        new ClientTupleKey()
                                .user("user:81684243-9356-4421-8fbf-a4f8d36aa31b")
                                .relation("editor")
                                ._object("folder:product"),
                        new ClientTupleKey()
                                .user("folder:product")
                                .relation("parent")
                                ._object("document:0192ab2a-d83f-756d-9397-c5ed9f3cb69a")))
                .correlationId("cor-1");
        ClientBatchCheckItem item2 = new ClientBatchCheckItem()
                .user("folder:product")
                .relation("parent")
                ._object("document:0192ab2a-d83f-756d-9397-c5ed9f3cb69a")
                .correlationId("cor-2");
        ClientBatchCheckItem item3 = new ClientBatchCheckItem()
                .user("folder:product")
                .relation("parent")
                ._object("document:9992ab2a-d83f-756d-9397-c5ed9f3cj8a4")
                .correlationId("cor-3");
        ClientBatchCheckRequest request = new ClientBatchCheckRequest().checks(List.of(item1, item2, item3));

        ClientBatchCheckOptions options = new ClientBatchCheckOptions().maxBatchSize(2);

        // When
        ClientBatchCheckResponse response = fga.batchCheck(request, options).join();

        // Then
        ClientBatchCheckSingleResponse response1 = response.getResult().stream()
                .filter(r -> r.getCorrelationId().equals("cor-1"))
                .findFirst()
                .orElse(null);
        assertNotNull(response1);
        assertTrue(response1.isAllowed());
        assertEquals(
                "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
                response1.getRequest().getUser());

        ClientBatchCheckSingleResponse response2 = response.getResult().stream()
                .filter(r -> r.getCorrelationId().equals("cor-2"))
                .findFirst()
                .orElse(null);
        assertNotNull(response2);
        assertFalse(response2.isAllowed());
        assertEquals("folder:product", response2.getRequest().getUser());

        ClientBatchCheckSingleResponse response3 = response.getResult().stream()
                .filter(r -> r.getCorrelationId().equals("cor-3"))
                .findFirst()
                .orElse(null);
        assertNotNull(response3);
        assertFalse(response3.isAllowed());
        assertEquals("folder:product", response3.getRequest().getUser());
        assertEquals(ErrorCode.RELATION_NOT_FOUND, response3.getError().getInputError());
        assertEquals("relation not found", response3.getError().getMessage());
    }

    @Test
    public void batchCheck_withOptions() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/batch-check", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"checks\":[{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"contextual_tuples\":null,\"context\":null,\"correlation_id\":\"cor-1\"}],\"authorization_model_id\":\"%s\",\"consistency\":\"%s\"}",
                DEFAULT_USER,
                DEFAULT_RELATION,
                DEFAULT_OBJECT,
                DEFAULT_AUTH_MODEL_ID,
                ConsistencyPreference.MINIMIZE_LATENCY);
        mockHttpClient.onPost(postUrl).withBody(is(expectedBody)).doReturn(200, "{\"result\":{}}");

        ClientBatchCheckItem item = new ClientBatchCheckItem()
                .user(DEFAULT_USER)
                .relation(DEFAULT_RELATION)
                ._object(DEFAULT_OBJECT)
                .correlationId("cor-1");
        ClientBatchCheckRequest request = new ClientBatchCheckRequest().checks(List.of(item));
        ClientBatchCheckOptions options = new ClientBatchCheckOptions()
                .authorizationModelId(DEFAULT_AUTH_MODEL_ID)
                .consistency(ConsistencyPreference.MINIMIZE_LATENCY);

        // When
        ClientBatchCheckResponse response = fga.batchCheck(request, options).join();

        // Then
        mockHttpClient.verify().post(postUrl).withBody(is(expectedBody)).called(1);
        assertNotNull(response);
        assertTrue(response.getResult().isEmpty());
    }

    @Test
    public void batchCheck_rateLimited() {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/batch-check", DEFAULT_STORE_ID);
        mockHttpClient.onPost(postUrl).doReturn(429, "{\"code\":\"rate_limited\",\"message\":\"Too Many Requests\"}");

        ClientBatchCheckItem item = new ClientBatchCheckItem()
                .user(DEFAULT_USER)
                .relation(DEFAULT_RELATION)
                ._object(DEFAULT_OBJECT)
                .correlationId("cor-1");
        ClientBatchCheckRequest request = new ClientBatchCheckRequest().checks(List.of(item));

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.batchCheck(request).get());

        // Then
        // 429 errors should still retry regardless of HTTP method (not affected by breaking changes)
        mockHttpClient.verify().post(postUrl).called(1 + DEFAULT_MAX_RETRIES);
        var exception = assertInstanceOf(FgaApiRateLimitExceededError.class, execException.getCause());
        assertEquals(429, exception.getStatusCode());
        assertEquals("{\"code\":\"rate_limited\",\"message\":\"Too Many Requests\"}", exception.getResponseData());
    }

    /**
     * Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason
     * about and debug a certain relationship.
     */
    @Test
    public void expandTest() throws Exception {
        // Given
        String postPath = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/expand";
        String expectedBody = String.format(
                "{\"tuple_key\":{\"relation\":\"%s\",\"object\":\"%s\"},\"authorization_model_id\":\"%s\",\"consistency\":\"%s\",\"contextual_tuples\":null}",
                DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID, ConsistencyPreference.HIGHER_CONSISTENCY);
        String responseBody = String.format(
                "{\"tree\":{\"root\":{\"union\":{\"nodes\":[{\"leaf\":{\"users\":{\"users\":[\"%s\"]}}}]}}}}",
                DEFAULT_USER);
        mockHttpClient.onPost(postPath).withBody(is(expectedBody)).doReturn(200, responseBody);
        ClientExpandRequest request =
                new ClientExpandRequest().relation(DEFAULT_RELATION)._object(DEFAULT_OBJECT);
        ClientExpandOptions options = new ClientExpandOptions()
                .authorizationModelId(DEFAULT_AUTH_MODEL_ID)
                .consistency(ConsistencyPreference.HIGHER_CONSISTENCY);

        // When
        ClientExpandResponse response = fga.expand(request, options).get();

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
        assertNotNull(response.getTree());
        assertNotNull(response.getTree().getRoot());
        assertNotNull(response.getTree().getRoot().getUnion());
        assertNotNull(response.getTree().getRoot().getUnion().getNodes());
        assertEquals(1, response.getTree().getRoot().getUnion().getNodes().size());
        assertNotNull(response.getTree().getRoot().getUnion().getNodes().get(0));
        Node node = response.getTree().getRoot().getUnion().getNodes().get(0);
        assertNotNull(node.getLeaf());
        assertNotNull(node.getLeaf().getUsers());
        assertNotNull(node.getLeaf().getUsers().getUsers());
        assertEquals(1, node.getLeaf().getUsers().getUsers().size());
        assertEquals(DEFAULT_USER, node.getLeaf().getUsers().getUsers().get(0));
    }

    @Test
    public void expand_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.expand(new ClientExpandRequest())
                .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void expand_400() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/expand";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.expand(new ClientExpandRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void expand_404() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/expand";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.expand(new ClientExpandRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void expand_500() throws Exception {
        // Given
        String postUrl = "https://api.fga.example/stores/01YCP46JKYM8FJCQ37NMBYHE5X/expand";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.expand(new ClientExpandRequest())
                        .get());

        // Then
        // Breaking change: POST requests no longer retry on 5xx without Retry-After header
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * List all objects of the given type that the user has a relation with.
     */
    @Test
    public void listObjectsTest() throws Exception {
        // Given
        String postPath = String.format("https://api.fga.example/stores/%s/list-objects", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"authorization_model_id\":\"%s\",\"type\":null,\"relation\":\"%s\",\"user\":\"%s\",\"contextual_tuples\":null,\"context\":null,\"consistency\":\"%s\"}",
                DEFAULT_AUTH_MODEL_ID, DEFAULT_RELATION, DEFAULT_USER, ConsistencyPreference.HIGHER_CONSISTENCY);
        mockHttpClient
                .onPost(postPath)
                .withBody(is(expectedBody))
                .doReturn(200, String.format("{\"objects\":[\"%s\"]}", DEFAULT_OBJECT));
        ClientListObjectsRequest request =
                new ClientListObjectsRequest().relation(DEFAULT_RELATION).user(DEFAULT_USER);
        ClientListObjectsOptions options =
                new ClientListObjectsOptions().consistency(ConsistencyPreference.HIGHER_CONSISTENCY);

        // When
        ClientListObjectsResponse response = fga.listObjects(request, options).get();

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
        assertEquals(List.of(DEFAULT_OBJECT), response.getObjects());
    }

    @Test
    public void listObjects_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception =
                assertThrows(FgaInvalidParameterException.class, () -> fga.listObjects(new ClientListObjectsRequest())
                        .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void listObjects_400() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/list-objects", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.listObjects(new ClientListObjectsRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void listObjects_404() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/list-objects", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.listObjects(new ClientListObjectsRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void listObjects_500() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/list-objects", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.listObjects(new ClientListObjectsRequest())
                        .get());

        // Then
        // Breaking change: POST requests no longer retry on 5xx without Retry-After header
        mockHttpClient.verify().post(postUrl).called(1);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    @Test
    public void listObjectsWithContextTest() throws Exception {
        // Given
        String postPath = String.format("https://api.fga.example/stores/%s/list-objects", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"authorization_model_id\":\"%s\",\"type\":null,\"relation\":\"%s\",\"user\":\"%s\",\"contextual_tuples\":null,\"context\":{\"some\":\"context\"},\"consistency\":\"%s\"}",
                DEFAULT_AUTH_MODEL_ID, DEFAULT_RELATION, DEFAULT_USER, DEFAULT_CONSISTENCY);
        mockHttpClient
                .onPost(postPath)
                .withBody(is(expectedBody))
                .doReturn(200, String.format("{\"objects\":[\"%s\"]}", DEFAULT_OBJECT));
        ClientListObjectsRequest request = new ClientListObjectsRequest()
                .relation(DEFAULT_RELATION)
                .user(DEFAULT_USER)
                .context(Map.of("some", "context"));

        // When
        ClientListObjectsResponse response = fga.listObjects(request).get();

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
        assertEquals(List.of(DEFAULT_OBJECT), response.getObjects());
    }

    /**
     * Check whether a user is authorized to access an object.
     */
    @Test
    public void listRelations() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"contextual_tuples\":null,\"authorization_model_id\":\"01G5JAVJ41T49E9TT3SKVS7X1J\",\"trace\":null,\"context\":null,\"consistency\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, ConsistencyPreference.MINIMIZE_LATENCY);
        mockHttpClient
                .onPost(postUrl)
                .withBody(is(expectedBody))
                .withHeader(CLIENT_METHOD_HEADER, "ClientBatchCheck")
                .withHeader(CLIENT_BULK_REQUEST_ID_HEADER, anyValidUUID())
                .doReturn(200, "{\"allowed\":true}");
        ClientListRelationsRequest request = new ClientListRelationsRequest()
                .relations(List.of(DEFAULT_RELATION))
                .user(DEFAULT_USER)
                ._object(DEFAULT_OBJECT);
        ClientListRelationsOptions options = new ClientListRelationsOptions()
                .authorizationModelId(DEFAULT_AUTH_MODEL_ID)
                .consistency(ConsistencyPreference.MINIMIZE_LATENCY);

        // When
        ClientListRelationsResponse response =
                fga.listRelations(request, options).get();

        // Then
        mockHttpClient
                .verify()
                .post(postUrl)
                .withBody(is(expectedBody))
                .withHeader(CLIENT_METHOD_HEADER, "ClientBatchCheck")
                .withHeader(CLIENT_BULK_REQUEST_ID_HEADER, anyValidUUID())
                .called(1);
        assertNotNull(response);
        assertNotNull(response.getRelations());
        assertEquals(1, response.getRelations().size());
        assertEquals(DEFAULT_RELATION, response.getRelations().get(0));
    }

    @Test
    public void listRelations_deny() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"contextual_tuples\":null,\"authorization_model_id\":\"%s\",\"trace\":null,\"context\":null,\"consistency\":\"%s\"}",
                DEFAULT_USER, "owner", DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID, DEFAULT_CONSISTENCY);
        mockHttpClient
                .onPost(postUrl)
                .withBody(is(expectedBody))
                .withHeader(CLIENT_METHOD_HEADER, "ClientBatchCheck")
                .withHeader(CLIENT_BULK_REQUEST_ID_HEADER, anyValidUUID())
                .doReturn(200, "{\"allowed\":false}");
        ClientListRelationsRequest request = new ClientListRelationsRequest()
                .relations(List.of("owner"))
                ._object(DEFAULT_OBJECT)
                .user(DEFAULT_USER);
        ClientListRelationsOptions options =
                new ClientListRelationsOptions().authorizationModelId(DEFAULT_AUTH_MODEL_ID);

        // When
        ClientListRelationsResponse response =
                fga.listRelations(request, options).get();

        // Then
        mockHttpClient
                .verify()
                .post(postUrl)
                .withBody(is(expectedBody))
                .withHeader(CLIENT_METHOD_HEADER, "ClientBatchCheck")
                .withHeader(CLIENT_BULK_REQUEST_ID_HEADER, anyValidUUID())
                .called(1);
        assertNotNull(response);
        assertNotNull(response.getRelations());
        assertTrue(response.getRelations().isEmpty());
    }

    @Test
    public void listRelations_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);
        ClientListRelationsRequest request = new ClientListRelationsRequest()
                .user(DEFAULT_USER)
                .relations(List.of(DEFAULT_RELATION))
                ._object(DEFAULT_OBJECT);

        // When
        var exception = assertThrows(
                FgaInvalidParameterException.class, () -> fga.listRelations(request, new ClientListRelationsOptions())
                        .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void listRelations_nonNullRelationsRequired() {
        // Given
        ClientListRelationsRequest request = new ClientListRelationsRequest()
                .user(DEFAULT_USER)
                .relations(null) // Should fail
                ._object(DEFAULT_OBJECT);

        // When
        var exception = assertThrows(
                FgaInvalidParameterException.class, () -> fga.listRelations(request, new ClientListRelationsOptions())
                        .get());

        // Then
        assertEquals(
                "At least 1 relation to check has to be provided when calling ListRelations", exception.getMessage());
    }

    @Test
    public void listRelations_atLeastOneRelationRequired() {
        // Given
        ClientListRelationsRequest request = new ClientListRelationsRequest()
                .user(DEFAULT_USER)
                .relations(List.of()) // Should fail
                ._object(DEFAULT_OBJECT);

        // When
        var exception = assertThrows(
                FgaInvalidParameterException.class, () -> fga.listRelations(request, new ClientListRelationsOptions())
                        .get());

        // Then
        assertEquals(
                "At least 1 relation to check has to be provided when calling ListRelations", exception.getMessage());
    }

    @Test
    public void listRelations_400() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"contextual_tuples\":null,\"authorization_model_id\":\"01G5JAVJ41T49E9TT3SKVS7X1J\",\"trace\":null,\"context\":null,\"consistency\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_CONSISTENCY);
        mockHttpClient
                .onPost(postUrl)
                .withBody(is(expectedBody))
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");
        ClientListRelationsRequest request = new ClientListRelationsRequest()
                .user(DEFAULT_USER)
                .relations(List.of(DEFAULT_RELATION))
                ._object(DEFAULT_OBJECT);

        // When
        var execException = assertThrows(
                ExecutionException.class, () -> fga.listRelations(request, new ClientListRelationsOptions())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).withBody(is(expectedBody)).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void listRelations_404() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"contextual_tuples\":null,\"authorization_model_id\":\"01G5JAVJ41T49E9TT3SKVS7X1J\",\"trace\":null,\"context\":null,\"consistency\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_CONSISTENCY);
        mockHttpClient
                .onPost(postUrl)
                .withBody(is(expectedBody))
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");
        ClientListRelationsRequest request = new ClientListRelationsRequest()
                .user(DEFAULT_USER)
                .relations(List.of(DEFAULT_RELATION))
                ._object(DEFAULT_OBJECT);

        // When
        var execException = assertThrows(
                ExecutionException.class, () -> fga.listRelations(request, new ClientListRelationsOptions())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).withBody(is(expectedBody)).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void listRelations_500() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"contextual_tuples\":null,\"authorization_model_id\":\"01G5JAVJ41T49E9TT3SKVS7X1J\",\"trace\":null,\"context\":null,\"consistency\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_CONSISTENCY);
        mockHttpClient
                .onPost(postUrl)
                .withBody(is(expectedBody))
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");
        ClientListRelationsRequest request = new ClientListRelationsRequest()
                .user(DEFAULT_USER)
                .relations(List.of(DEFAULT_RELATION))
                ._object(DEFAULT_OBJECT);

        // When
        var execException = assertThrows(
                ExecutionException.class, () -> fga.listRelations(request, new ClientListRelationsOptions())
                        .get());

        // Then
        // Breaking change: POST requests no longer retry on 5xx without Retry-After header
        mockHttpClient.verify().post(postUrl).withBody(is(expectedBody)).called(1);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    @Test
    public void listRelations_contextAndContextualTuples() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"contextual_tuples\":{\"tuple_keys\":[{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\",\"condition\":null}]},\"authorization_model_id\":\"%s\",\"trace\":null,\"context\":{\"some\":\"context\"},\"consistency\":\"%s\"}",
                DEFAULT_USER,
                "owner",
                DEFAULT_OBJECT,
                DEFAULT_USER,
                DEFAULT_RELATION,
                DEFAULT_OBJECT,
                DEFAULT_AUTH_MODEL_ID,
                DEFAULT_CONSISTENCY);
        mockHttpClient
                .onPost(postUrl)
                .withBody(is(expectedBody))
                .withHeader(CLIENT_METHOD_HEADER, "ClientBatchCheck")
                .withHeader(CLIENT_BULK_REQUEST_ID_HEADER, anyValidUUID())
                .doReturn(200, "{\"allowed\":false}");
        ClientListRelationsRequest request = new ClientListRelationsRequest()
                .relations(List.of("owner"))
                ._object(DEFAULT_OBJECT)
                .user(DEFAULT_USER)
                .context(Map.of("some", "context"))
                .contextualTupleKeys(List.of(new ClientTupleKey()
                        .user(DEFAULT_USER)
                        .relation(DEFAULT_RELATION)
                        ._object(DEFAULT_OBJECT)));
        ClientListRelationsOptions options =
                new ClientListRelationsOptions().authorizationModelId(DEFAULT_AUTH_MODEL_ID);

        // When
        ClientListRelationsResponse response =
                fga.listRelations(request, options).get();

        // Then
        mockHttpClient
                .verify()
                .post(postUrl)
                .withBody(is(expectedBody))
                .withHeader(CLIENT_METHOD_HEADER, "ClientBatchCheck")
                .withHeader(CLIENT_BULK_REQUEST_ID_HEADER, anyValidUUID())
                .called(1);
        assertNotNull(response);
        assertNotNull(response.getRelations());
        assertTrue(response.getRelations().isEmpty());
    }

    /**
     * Test list users
     */
    @Test
    public void listUsersTest() throws Exception {
        // Given
        String postPath = String.format("https://api.fga.example/stores/%s/list-users", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"authorization_model_id\":\"%s\",\"object\":{\"type\":\"%s\",\"id\":\"%s\"},\"relation\":\"%s\",\"user_filters\":[{\"type\":\"user\",\"relation\":null},{\"type\":\"team\",\"relation\":\"member\"}],\"contextual_tuples\":[],\"context\":null,\"consistency\":\"%s\"}",
                DEFAULT_AUTH_MODEL_ID,
                DEFAULT_TYPE,
                DEFAULT_ID,
                DEFAULT_RELATION,
                ConsistencyPreference.MINIMIZE_LATENCY);
        mockHttpClient
                .onPost(postPath)
                .withBody(is(expectedBody))
                .doReturn(
                        200,
                        "{\"users\":[{\"object\":{\"id\":\"81684243-9356-4421-8fbf-a4f8d36aa31b\",\"type\":\"user\"}},{\"userset\":{\"id\":\"fga\",\"relation\":\"member\",\"type\":\"team\"}},{\"wildcard\":{\"type\":\"user\"}}]}");

        ClientListUsersRequest request = new ClientListUsersRequest()
                ._object(new FgaObject().type(DEFAULT_TYPE).id(DEFAULT_ID))
                .relation(DEFAULT_RELATION)
                .userFilters(new ArrayList<>() {
                    {
                        add(new UserTypeFilter().type("user"));
                        add(new UserTypeFilter().type("team").relation("member"));
                    }
                });
        ClientListUsersOptions options =
                new ClientListUsersOptions().consistency(ConsistencyPreference.MINIMIZE_LATENCY);

        // When
        ClientListUsersResponse response = fga.listUsers(request, options).get();

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);

        assertEquals(
                List.of(
                        new User()._object(new FgaObject().type("user").id("81684243-9356-4421-8fbf-a4f8d36aa31b")),
                        new User()
                                .userset(
                                        new UsersetUser().type("team").id("fga").relation("member")),
                        new User().wildcard(new TypedWildcard().type("user"))),
                response.getUsers());
    }

    /**
     * Read assertions for an authorization model ID.
     */
    @Test
    public void readAssertionsTest() throws Exception {
        // Given
        String getUrl = String.format(
                "https://api.fga.example/stores/%s/assertions/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        String responseBody = String.format(
                "{\"assertions\":[{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"expectation\":true}]}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT);
        mockHttpClient.onGet(getUrl).doReturn(200, responseBody);

        // When
        ClientReadAssertionsResponse response = fga.readAssertions().get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertNotNull(response.getAssertions());
        assertEquals(1, response.getAssertions().size());
        Assertion assertion = response.getAssertions().get(0);
        assertNotNull(assertion);
        assertTrue(assertion.getExpectation());
        assertEquals(DEFAULT_OBJECT, assertion.getTupleKey().getObject());
        assertEquals(DEFAULT_RELATION, assertion.getTupleKey().getRelation());
        assertEquals(DEFAULT_USER, assertion.getTupleKey().getUser());
    }

    @Test
    public void readAssertions_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(
                FgaInvalidParameterException.class, () -> fga.readAssertions().get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void readAssertions_authModelIdRequired() {
        // Given
        clientConfiguration.authorizationModelId(null);

        // When
        var exception = assertThrows(
                FgaInvalidParameterException.class, () -> fga.readAssertions().get());

        // Then
        assertEquals(
                "Required parameter authorizationModelId was invalid when calling ClientConfiguration.",
                exception.getMessage());
    }

    @Test
    public void readAssertions_400() throws Exception {
        // Given
        String getUrl = String.format(
                "https://api.fga.example/stores/%s/assertions/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onGet(getUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.readAssertions().get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void readAssertions_404() throws Exception {
        // Given
        String getUrl = String.format(
                "https://api.fga.example/stores/%s/assertions/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onGet(getUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.readAssertions().get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void readAssertions_500() throws Exception {
        // Given
        String getUrl = String.format(
                "https://api.fga.example/stores/%s/assertions/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onGet(getUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.readAssertions().get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1 + DEFAULT_MAX_RETRIES);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Upsert assertions for an authorization model ID.
     */
    @Test
    public void writeAssertionsTest() throws Exception {
        // Given
        String putUrl = String.format(
                "https://api.fga.example/stores/%s/assertions/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        String expectedBody = String.format(
                "{\"assertions\":[{\"tuple_key\":{\"object\":\"%s\",\"relation\":\"%s\",\"user\":\"%s\"},\"expectation\":true,\"contextual_tuples\":[],\"context\":null}]}",
                DEFAULT_OBJECT, DEFAULT_RELATION, DEFAULT_USER);
        mockHttpClient.onPut(putUrl).withBody(is(expectedBody)).doReturn(200, EMPTY_RESPONSE_BODY);
        List<ClientAssertion> assertions = List.of(new ClientAssertion()
                .user(DEFAULT_USER)
                .relation(DEFAULT_RELATION)
                ._object(DEFAULT_OBJECT)
                .expectation(true));

        // When
        ClientWriteAssertionsResponse response = fga.writeAssertions(assertions).get();

        // Then
        mockHttpClient.verify().put(putUrl).withBody(is(expectedBody)).called(1);
        assertEquals(200, response.getStatusCode());
    }

    @Test
    public void writeAssertions_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.writeAssertions(List.of())
                .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void writeAssertions_authModelIdRequired() {
        // Given
        clientConfiguration.authorizationModelId(null);

        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.writeAssertions(List.of())
                .get());

        // Then
        assertEquals(
                "Required parameter authorizationModelId was invalid when calling ClientConfiguration.",
                exception.getMessage());
    }

    @Test
    public void writeAssertions_400() throws Exception {
        // Given
        String putUrl = String.format(
                "https://api.fga.example/stores/%s/assertions/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onPut(putUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.writeAssertions(List.of()).get());

        // Then
        mockHttpClient.verify().put(putUrl).called(1);
        var exception = assertInstanceOf(FgaApiValidationError.class, execException.getCause());
        assertEquals(400, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseData());
    }

    @Test
    public void writeAssertions_404() throws Exception {
        // Given
        String putUrl = String.format(
                "https://api.fga.example/stores/%s/assertions/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onPut(putUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.writeAssertions(List.of()).get());

        // Then
        mockHttpClient.verify().put(putUrl).called(1);
        var exception = assertInstanceOf(FgaApiNotFoundError.class, execException.getCause());
        assertEquals(404, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseData());
    }

    @Test
    public void writeAssertions_500() throws Exception {
        // Given
        String putUrl = String.format(
                "https://api.fga.example/stores/%s/assertions/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onPut(putUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.writeAssertions(List.of()).get());

        // Then
        // Breaking change: PUT requests no longer retry on 5xx without Retry-After header
        mockHttpClient.verify().put(putUrl).called(1);
        var exception = assertInstanceOf(FgaApiInternalError.class, execException.getCause());
        assertEquals(500, exception.getStatusCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseData());
    }

    /**
     * Miscellaneous client behavior tests.
     */
    @Test
    public void setStoreId() throws Exception {
        // Given
        String alternateStoreId = "A_UNIQUE_ID";
        fga.setStoreId(alternateStoreId);
        String getUrl = String.format("https://api.fga.example/stores/%s", alternateStoreId);
        String responseBody = String.format("{\"id\":\"%s\",\"name\":\"%s\"}", alternateStoreId, DEFAULT_STORE_NAME);
        mockHttpClient.onGet(getUrl).doReturn(200, responseBody);

        // When
        GetStoreResponse response = fga.getStore().get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertEquals(alternateStoreId, response.getId());
        assertEquals(DEFAULT_STORE_NAME, response.getName());
        assertEquals(
                alternateStoreId,
                clientConfiguration.getStoreId(),
                "OpenFgaClient.setStoreId(String) is expected to persist its Store ID in its ClientConfiguration."
                        + "If this behavior ever changes, it could be a subtle breaking change.");
    }

    @Test
    public void setAuthorizationModelId() throws Exception {
        // Given
        String alternateAuthorizationModelId = "A_UNIQUE_ID";
        fga.setAuthorizationModelId(alternateAuthorizationModelId);
        String getUrl = String.format(
                "https://api.fga.example/stores/%s/authorization-models/%s",
                DEFAULT_STORE_ID, alternateAuthorizationModelId);
        String getResponse = String.format(
                "{\"authorization_model\":{\"id\":\"%s\",\"schema_version\":\"%s\"}}",
                alternateAuthorizationModelId, DEFAULT_SCHEMA_VERSION);
        mockHttpClient.onGet(getUrl).doReturn(200, getResponse);

        // When
        ReadAuthorizationModelResponse response = fga.readAuthorizationModel().get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertNotNull(response.getAuthorizationModel());
        assertEquals(
                alternateAuthorizationModelId, response.getAuthorizationModel().getId());
        assertEquals(DEFAULT_SCHEMA_VERSION, response.getAuthorizationModel().getSchemaVersion());
        assertEquals(
                alternateAuthorizationModelId,
                clientConfiguration.getAuthorizationModelId(),
                "OpenFgaClient.setAuthorizationModelId(String) is expected to persist its Authorization Model ID in its ClientConfiguration."
                        + "If this behavior ever changes, it could be a subtle breaking change.");
    }

    private Matcher<String> anyValidUUID() {
        return new UUIDMatcher();
    }

    private static class UUIDMatcher extends BaseMatcher<String> {
        private boolean wasNotString = false;
        private boolean wasInvalidUUID = false;

        @Override
        public void describeTo(Description description) {
            description.appendText("any valid UUID");
        }

        @Override
        public boolean matches(Object item) {
            if (!(item instanceof String)) {
                return wasNotString = false;
            }

            var string = (String) item;

            try {
                UUID.fromString(string);
                return true;
            } catch (IllegalArgumentException ex) {
                wasInvalidUUID = true;
                return false;
            }
        }

        @Override
        public void describeMismatch(Object item, Description mismatchDescription) {
            if (wasNotString) {
                System.err.printf("Expected an instance of String but found class: %s\n", item.getClass());
            } else if (wasInvalidUUID) {
                System.err.printf("Expected a valid UUID but found \"%s\"\n", item);
            }
        }
    }
}

/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.api.client;

import static org.hamcrest.Matchers.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.pgssoft.httpclient.HttpClientMock;
import dev.openfga.sdk.api.client.model.*;
import dev.openfga.sdk.api.configuration.*;
import dev.openfga.sdk.api.model.*;
import java.net.http.HttpClient;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**
 * Tests for OpenFgaClient header functionality.
 */
public class OpenFgaClientHeadersTest {
    private static final String DEFAULT_STORE_ID = "01YCP46JKYM8FJCQ37NMBYHE5X";
    private static final String DEFAULT_STORE_NAME = "test_store";
    private static final String DEFAULT_AUTH_MODEL_ID = "01G5JAVJ41T49E9TT3SKVS7X1J";
    private static final String DEFAULT_USER = "user:81684243-9356-4421-8fbf-a4f8d36aa31b";
    private static final String DEFAULT_RELATION = "reader";
    private static final String DEFAULT_TYPE = "document";
    private static final String DEFAULT_ID = "budget";
    private static final String DEFAULT_OBJECT = DEFAULT_TYPE + ":" + DEFAULT_ID;
    private static final String DEFAULT_SCHEMA_VERSION = "1.1";
    private static final String EMPTY_RESPONSE_BODY = "{}";
    private OpenFgaClient fga;
    private ClientConfiguration clientConfiguration;
    private HttpClientMock mockHttpClient;

    @BeforeEach
    public void beforeEachTest() throws Exception {
        mockHttpClient = new HttpClientMock();
        mockHttpClient.debugOn();

        var mockHttpClientBuilder = mock(HttpClient.Builder.class);
        when(mockHttpClientBuilder.executor(any())).thenReturn(mockHttpClientBuilder);
        when(mockHttpClientBuilder.build()).thenReturn(mockHttpClient);

        clientConfiguration = new ClientConfiguration()
                .storeId(DEFAULT_STORE_ID)
                .authorizationModelId(DEFAULT_AUTH_MODEL_ID)
                .apiUrl("https://api.fga.example")
                .defaultHeaders(Map.of(
                        "test-header", "test-value",
                        "another-header", "another-value"));

        var mockApiClient = mock(ApiClient.class);
        when(mockApiClient.getHttpClient()).thenReturn(mockHttpClient);
        when(mockApiClient.getObjectMapper()).thenReturn(new ObjectMapper());
        when(mockApiClient.getHttpClientBuilder()).thenReturn(mockHttpClientBuilder);

        fga = new OpenFgaClient(clientConfiguration, mockApiClient);
    }

    @Test
    public void createStore_withHeaders() throws Exception {
        // Given
        String expectedBody = String.format("{\"name\":\"%s\"}", DEFAULT_STORE_NAME);
        String requestBody = String.format("{\"id\":\"%s\",\"name\":\"%s\"}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient
                .onPost("https://api.fga.example/stores")
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .doReturn(201, requestBody);
        CreateStoreRequest request = new CreateStoreRequest().name(DEFAULT_STORE_NAME);
        ClientCreateStoreOptions options =
                new ClientCreateStoreOptions().additionalHeaders(Map.of("test-header", "test-value-per-call"));

        // When
        CreateStoreResponse response = fga.createStore(request, options).get();

        // Then
        mockHttpClient
                .verify()
                .post("https://api.fga.example/stores")
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .called(1);
        assertEquals(DEFAULT_STORE_ID, response.getId());
        assertEquals(DEFAULT_STORE_NAME, response.getName());
    }

    @Test
    public void createStore_withEmptyHeaders() throws Exception {
        // Given
        String expectedBody = String.format("{\"name\":\"%s\"}", DEFAULT_STORE_NAME);
        String requestBody = String.format("{\"id\":\"%s\",\"name\":\"%s\"}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient
                .onPost("https://api.fga.example/stores")
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value")
                .doReturn(201, requestBody);
        CreateStoreRequest request = new CreateStoreRequest().name(DEFAULT_STORE_NAME);
        ClientCreateStoreOptions options = new ClientCreateStoreOptions().additionalHeaders(Collections.emptyMap());

        // When
        CreateStoreResponse response = fga.createStore(request, options).get();

        // Then - should use default headers only
        mockHttpClient
                .verify()
                .post("https://api.fga.example/stores")
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value")
                .called(1);
        assertEquals(DEFAULT_STORE_ID, response.getId());
    }

    @Test
    public void createStore_withNullHeaders() throws Exception {
        // Given
        String expectedBody = String.format("{\"name\":\"%s\"}", DEFAULT_STORE_NAME);
        String requestBody = String.format("{\"id\":\"%s\",\"name\":\"%s\"}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient
                .onPost("https://api.fga.example/stores")
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value")
                .doReturn(201, requestBody);
        CreateStoreRequest request = new CreateStoreRequest().name(DEFAULT_STORE_NAME);
        ClientCreateStoreOptions options = new ClientCreateStoreOptions().additionalHeaders(null);

        // When
        CreateStoreResponse response = fga.createStore(request, options).get();

        // Then - should use default headers only
        mockHttpClient
                .verify()
                .post("https://api.fga.example/stores")
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value")
                .called(1);
        assertEquals(DEFAULT_STORE_ID, response.getId());
    }

    @Test
    public void createStore_withNewHeaders() throws Exception {
        // Given
        String expectedBody = String.format("{\"name\":\"%s\"}", DEFAULT_STORE_NAME);
        String requestBody = String.format("{\"id\":\"%s\",\"name\":\"%s\"}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient
                .onPost("https://api.fga.example/stores")
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value")
                .withHeader("new-header", "new-value")
                .doReturn(201, requestBody);
        CreateStoreRequest request = new CreateStoreRequest().name(DEFAULT_STORE_NAME);
        ClientCreateStoreOptions options =
                new ClientCreateStoreOptions().additionalHeaders(Map.of("new-header", "new-value"));

        // When
        CreateStoreResponse response = fga.createStore(request, options).get();

        // Then - should include both default and new headers
        mockHttpClient
                .verify()
                .post("https://api.fga.example/stores")
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value")
                .withHeader("new-header", "new-value")
                .called(1);
        assertEquals(DEFAULT_STORE_ID, response.getId());
    }

    @Test
    public void listStores_withHeaders() throws Exception {
        // Given
        String responseBody =
                String.format("{\"stores\":[{\"id\":\"%s\",\"name\":\"%s\"}]}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient
                .onGet("https://api.fga.example/stores")
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .doReturn(200, responseBody);
        ClientListStoresOptions options =
                new ClientListStoresOptions().additionalHeaders(Map.of("test-header", "test-value-per-call"));

        // When
        ClientListStoresResponse response = fga.listStores(options).get();

        // Then
        mockHttpClient
                .verify()
                .get("https://api.fga.example/stores")
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .called(1);
        assertNotNull(response.getStores());
        assertEquals(1, response.getStores().size());
    }

    @Test
    public void getStore_withHeaders() throws Exception {
        // Given
        String getUrl = String.format("https://api.fga.example/stores/%s", DEFAULT_STORE_ID);
        String responseBody = String.format("{\"id\":\"%s\",\"name\":\"%s\"}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient
                .onGet(getUrl)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .doReturn(200, responseBody);
        ClientGetStoreOptions options =
                new ClientGetStoreOptions().additionalHeaders(Map.of("test-header", "test-value-per-call"));

        // When
        ClientGetStoreResponse response = fga.getStore(options).get();

        // Then
        mockHttpClient
                .verify()
                .get(getUrl)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .called(1);
        assertEquals(DEFAULT_STORE_ID, response.getId());
    }

    @Test
    public void deleteStore_withHeaders() throws Exception {
        // Given
        String deleteUrl = String.format("https://api.fga.example/stores/%s", DEFAULT_STORE_ID);
        mockHttpClient
                .onDelete(deleteUrl)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .doReturn(204, EMPTY_RESPONSE_BODY);
        ClientDeleteStoreOptions options =
                new ClientDeleteStoreOptions().additionalHeaders(Map.of("test-header", "test-value-per-call"));

        // When
        ClientDeleteStoreResponse response = fga.deleteStore(options).get();

        // Then
        mockHttpClient
                .verify()
                .delete(deleteUrl)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .called(1);
        assertEquals(204, response.getStatusCode());
    }

    @Test
    public void readAuthorizationModels_withHeaders() throws Exception {
        // Given
        String getUrl = String.format("https://api.fga.example/stores/%s/authorization-models", DEFAULT_STORE_ID);
        String responseBody = String.format(
                "{\"authorization_models\":[{\"id\":\"%s\",\"schema_version\":\"%s\"}]}",
                DEFAULT_AUTH_MODEL_ID, DEFAULT_SCHEMA_VERSION);
        mockHttpClient
                .onGet(getUrl)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .doReturn(200, responseBody);
        ClientReadAuthorizationModelsOptions options = new ClientReadAuthorizationModelsOptions()
                .additionalHeaders(Map.of("test-header", "test-value-per-call"));

        // When
        ClientReadAuthorizationModelsResponse response =
                fga.readAuthorizationModels(options).get();

        // Then
        mockHttpClient
                .verify()
                .get(getUrl)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .called(1);
        assertNotNull(response.getAuthorizationModels());
        assertEquals(1, response.getAuthorizationModels().size());
    }

    @Test
    public void writeAuthorizationModel_withHeaders() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/authorization-models", DEFAULT_STORE_ID);
        String expectedBody =
                "{\"type_definitions\":[{\"type\":\"document\",\"relations\":{},\"metadata\":null}],\"schema_version\":\"1.1\",\"conditions\":{}}";
        String responseBody = String.format("{\"authorization_model_id\":\"%s\"}", DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onPost(postUrl)
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .doReturn(201, responseBody);
        WriteAuthorizationModelRequest request = new WriteAuthorizationModelRequest()
                .schemaVersion(DEFAULT_SCHEMA_VERSION)
                .typeDefinitions(List.of(new TypeDefinition().type(DEFAULT_TYPE)));
        ClientWriteAuthorizationModelOptions options = new ClientWriteAuthorizationModelOptions()
                .additionalHeaders(Map.of("test-header", "test-value-per-call"));

        // When
        ClientWriteAuthorizationModelResponse response =
                fga.writeAuthorizationModel(request, options).get();

        // Then
        mockHttpClient
                .verify()
                .post(postUrl)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .called(1);
        assertEquals(DEFAULT_AUTH_MODEL_ID, response.getAuthorizationModelId());
    }

    @Test
    public void readAuthorizationModel_withHeaders() throws Exception {
        // Given
        String getUrl = String.format(
                "https://api.fga.example/stores/%s/authorization-models/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        String getResponse = String.format(
                "{\"authorization_model\":{\"id\":\"%s\",\"schema_version\":\"%s\"}}",
                DEFAULT_AUTH_MODEL_ID, DEFAULT_SCHEMA_VERSION);
        mockHttpClient
                .onGet(getUrl)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .doReturn(200, getResponse);
        ClientReadAuthorizationModelOptions options = new ClientReadAuthorizationModelOptions()
                .additionalHeaders(Map.of("test-header", "test-value-per-call"));

        // When
        ClientReadAuthorizationModelResponse response =
                fga.readAuthorizationModel(options).get();

        // Then
        mockHttpClient
                .verify()
                .get(getUrl)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .called(1);
        assertNotNull(response.getAuthorizationModel());
        assertEquals(DEFAULT_AUTH_MODEL_ID, response.getAuthorizationModel().getId());
    }

    @Test
    public void read_withHeaders() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/read", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"page_size\":null,\"continuation_token\":null,\"consistency\":\"UNSPECIFIED\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT);
        String responseBody = String.format(
                "{\"tuples\":[{\"key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"}}]}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT);
        mockHttpClient
                .onPost(postUrl)
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .doReturn(200, responseBody);
        ClientReadRequest request = new ClientReadRequest()
                .user(DEFAULT_USER)
                .relation(DEFAULT_RELATION)
                ._object(DEFAULT_OBJECT);
        ClientReadOptions options =
                new ClientReadOptions().additionalHeaders(Map.of("test-header", "test-value-per-call"));

        // When
        ClientReadResponse response = fga.read(request, options).get();

        // Then
        mockHttpClient
                .verify()
                .post(postUrl)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .called(1);
        assertNotNull(response.getTuples());
        assertEquals(1, response.getTuples().size());
    }

    @Test
    public void write_withHeaders() throws Exception {
        // Given
        String postPath = String.format("https://api.fga.example/stores/%s/write", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"writes\":{\"tuple_keys\":[{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\",\"condition\":null}],\"on_duplicate\":\"error\"},\"deletes\":null,\"authorization_model_id\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onPost(postPath)
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .doReturn(200, EMPTY_RESPONSE_BODY);
        ClientWriteRequest request = new ClientWriteRequest()
                .writes(List.of(new ClientTupleKey()
                        ._object(DEFAULT_OBJECT)
                        .relation(DEFAULT_RELATION)
                        .user(DEFAULT_USER)));
        ClientWriteOptions options =
                new ClientWriteOptions().additionalHeaders(Map.of("test-header", "test-value-per-call"));

        // When
        ClientWriteResponse response = fga.write(request, options).get();

        // Then
        mockHttpClient
                .verify()
                .post(postPath)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .called(1);
        assertEquals(200, response.getStatusCode());
    }

    @Test
    public void writeNonTransaction_withHeaders() throws Exception {
        // Given
        String postPath = String.format("https://api.fga.example/stores/%s/write", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"writes\":{\"tuple_keys\":[{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\",\"condition\":null}]},\"deletes\":null,\"authorization_model_id\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onPost(postPath)
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .doReturn(200, EMPTY_RESPONSE_BODY);
        ClientWriteRequest request = new ClientWriteRequest()
                .writes(List.of(new ClientTupleKey()
                        ._object(DEFAULT_OBJECT)
                        .relation(DEFAULT_RELATION)
                        .user(DEFAULT_USER)));
        ClientWriteOptions options = new ClientWriteOptions()
                .additionalHeaders(Map.of("test-header", "test-value-per-call"))
                .disableTransactions(true);

        // When
        ClientWriteResponse response = fga.write(request, options).get();

        // Then
        mockHttpClient
                .verify()
                .post(postPath)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .called(1);
        assertEquals(200, response.getStatusCode());
    }

    @Test
    public void check_withHeaders() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"contextual_tuples\":null,\"authorization_model_id\":\"%s\",\"trace\":null,\"context\":null,\"consistency\":\"UNSPECIFIED\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onPost(postUrl)
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .doReturn(200, "{\"allowed\":true}");
        ClientCheckRequest request = new ClientCheckRequest()
                ._object(DEFAULT_OBJECT)
                .relation(DEFAULT_RELATION)
                .user(DEFAULT_USER);
        ClientCheckOptions options =
                new ClientCheckOptions().additionalHeaders(Map.of("test-header", "test-value-per-call"));

        // When
        ClientCheckResponse response = fga.check(request, options).get();

        // Then
        mockHttpClient
                .verify()
                .post(postUrl)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .called(1);
        assertEquals(Boolean.TRUE, response.getAllowed());
    }

    @Test
    public void batchCheck_withHeaders() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/batch-check", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"checks\":[{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"contextual_tuples\":null,\"context\":null,\"correlation_id\":\"cor-1\"}],\"authorization_model_id\":\"%s\",\"consistency\":\"UNSPECIFIED\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onPost(postUrl)
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .doReturn(200, "{\"result\":{}}");
        ClientBatchCheckItem item = new ClientBatchCheckItem()
                .user(DEFAULT_USER)
                .relation(DEFAULT_RELATION)
                ._object(DEFAULT_OBJECT)
                .correlationId("cor-1");
        ClientBatchCheckRequest request = new ClientBatchCheckRequest().checks(List.of(item));
        ClientBatchCheckOptions options =
                new ClientBatchCheckOptions().additionalHeaders(Map.of("test-header", "test-value-per-call"));

        // When
        ClientBatchCheckResponse response = fga.batchCheck(request, options).join();

        // Then
        mockHttpClient
                .verify()
                .post(postUrl)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .called(1);
        assertNotNull(response);
        assertTrue(response.getResult().isEmpty());
    }

    @Test
    public void clientBatchCheck_withHeaders() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"contextual_tuples\":null,\"authorization_model_id\":\"%s\",\"trace\":null,\"context\":null,\"consistency\":\"UNSPECIFIED\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onPost(postUrl)
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .doReturn(200, "{\"allowed\":true}");
        ClientCheckRequest request = new ClientCheckRequest()
                ._object(DEFAULT_OBJECT)
                .relation(DEFAULT_RELATION)
                .user(DEFAULT_USER);
        ClientBatchCheckClientOptions options =
                new ClientBatchCheckClientOptions().additionalHeaders(Map.of("test-header", "test-value-per-call"));

        // When
        List<ClientBatchCheckClientResponse> response =
                fga.clientBatchCheck(List.of(request), options).get();

        // Then
        mockHttpClient
                .verify()
                .post(postUrl)
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .called(1);
        assertEquals(Boolean.TRUE, response.get(0).getAllowed());
    }

    @Test
    public void expand_withHeaders() throws Exception {
        // Given
        String postPath = String.format("https://api.fga.example/stores/%s/expand", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"tuple_key\":{\"relation\":\"%s\",\"object\":\"%s\"},\"authorization_model_id\":\"%s\",\"consistency\":\"UNSPECIFIED\",\"contextual_tuples\":null}",
                DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID);
        String responseBody = String.format(
                "{\"tree\":{\"root\":{\"union\":{\"nodes\":[{\"leaf\":{\"users\":{\"users\":[\"%s\"]}}}]}}}}",
                DEFAULT_USER);
        mockHttpClient
                .onPost(postPath)
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .doReturn(200, responseBody);
        ClientExpandRequest request =
                new ClientExpandRequest().relation(DEFAULT_RELATION)._object(DEFAULT_OBJECT);
        ClientExpandOptions options =
                new ClientExpandOptions().additionalHeaders(Map.of("test-header", "test-value-per-call"));

        // When
        ClientExpandResponse response = fga.expand(request, options).get();

        // Then
        mockHttpClient
                .verify()
                .post(postPath)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .called(1);
        assertNotNull(response.getTree());
    }

    @Test
    public void listObjects_withHeaders() throws Exception {
        // Given
        String postPath = String.format("https://api.fga.example/stores/%s/list-objects", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"authorization_model_id\":\"%s\",\"type\":null,\"relation\":\"%s\",\"user\":\"%s\",\"contextual_tuples\":null,\"context\":null,\"consistency\":\"UNSPECIFIED\"}",
                DEFAULT_AUTH_MODEL_ID, DEFAULT_RELATION, DEFAULT_USER);
        mockHttpClient
                .onPost(postPath)
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .doReturn(200, String.format("{\"objects\":[\"%s\"]}", DEFAULT_OBJECT));
        ClientListObjectsRequest request =
                new ClientListObjectsRequest().relation(DEFAULT_RELATION).user(DEFAULT_USER);
        ClientListObjectsOptions options =
                new ClientListObjectsOptions().additionalHeaders(Map.of("test-header", "test-value-per-call"));

        // When
        ClientListObjectsResponse response = fga.listObjects(request, options).get();

        // Then
        mockHttpClient
                .verify()
                .post(postPath)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .called(1);
        assertEquals(List.of(DEFAULT_OBJECT), response.getObjects());
    }

    @Test
    public void listUsers_withHeaders() throws Exception {
        // Given
        String postPath = String.format("https://api.fga.example/stores/%s/list-users", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"authorization_model_id\":\"%s\",\"object\":{\"type\":\"%s\",\"id\":\"%s\"},\"relation\":\"%s\",\"user_filters\":null,\"contextual_tuples\":[],\"context\":null,\"consistency\":\"UNSPECIFIED\"}",
                DEFAULT_AUTH_MODEL_ID, DEFAULT_TYPE, DEFAULT_ID, DEFAULT_RELATION);
        mockHttpClient
                .onPost(postPath)
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .doReturn(200, "{\"users\":[]}");
        ClientListUsersRequest request = new ClientListUsersRequest()
                ._object(new FgaObject().type(DEFAULT_TYPE).id(DEFAULT_ID))
                .relation(DEFAULT_RELATION);
        ClientListUsersOptions options =
                new ClientListUsersOptions().additionalHeaders(Map.of("test-header", "test-value-per-call"));

        // When
        ClientListUsersResponse response = fga.listUsers(request, options).get();

        // Then
        mockHttpClient
                .verify()
                .post(postPath)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .called(1);
        assertNotNull(response.getUsers());
    }

    @Test
    public void readAssertions_withHeaders() throws Exception {
        // Given
        String getUrl = String.format(
                "https://api.fga.example/stores/%s/assertions/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        String responseBody = String.format(
                "{\"assertions\":[{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"expectation\":true}]}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT);
        mockHttpClient
                .onGet(getUrl)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .doReturn(200, responseBody);
        ClientReadAssertionsOptions options =
                new ClientReadAssertionsOptions().additionalHeaders(Map.of("test-header", "test-value-per-call"));

        // When
        ClientReadAssertionsResponse response = fga.readAssertions(options).get();

        // Then
        mockHttpClient
                .verify()
                .get(getUrl)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .called(1);
        assertNotNull(response.getAssertions());
        assertEquals(1, response.getAssertions().size());
    }

    @Test
    public void writeAssertions_withHeaders() throws Exception {
        // Given
        String putUrl = String.format(
                "https://api.fga.example/stores/%s/assertions/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        String expectedBody = String.format(
                "{\"assertions\":[{\"tuple_key\":{\"object\":\"%s\",\"relation\":\"%s\",\"user\":\"%s\"},\"expectation\":true,\"contextual_tuples\":[],\"context\":null}]}",
                DEFAULT_OBJECT, DEFAULT_RELATION, DEFAULT_USER);
        mockHttpClient
                .onPut(putUrl)
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .doReturn(200, EMPTY_RESPONSE_BODY);
        List<ClientAssertion> assertions = List.of(new ClientAssertion()
                .user(DEFAULT_USER)
                .relation(DEFAULT_RELATION)
                ._object(DEFAULT_OBJECT)
                .expectation(true));
        ClientWriteAssertionsOptions options =
                new ClientWriteAssertionsOptions().additionalHeaders(Map.of("test-header", "test-value-per-call"));

        // When
        ClientWriteAssertionsResponse response =
                fga.writeAssertions(assertions, options).get();

        // Then
        mockHttpClient
                .verify()
                .put(putUrl)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .called(1);
        assertEquals(200, response.getStatusCode());
    }

    @Test
    public void readLatestAuthorizationModel_withHeaders() throws Exception {
        // Given
        String getUrl =
                String.format("https://api.fga.example/stores/%s/authorization-models?page_size=1", DEFAULT_STORE_ID);
        String responseBody = String.format(
                "{\"authorization_models\":[{\"id\":\"%s\",\"schema_version\":\"%s\"}]}",
                DEFAULT_AUTH_MODEL_ID, DEFAULT_SCHEMA_VERSION);
        mockHttpClient
                .onGet(getUrl)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .doReturn(200, responseBody);
        ClientReadLatestAuthorizationModelOptions options = new ClientReadLatestAuthorizationModelOptions()
                .additionalHeaders(Map.of("test-header", "test-value-per-call"));

        // When
        ClientReadAuthorizationModelResponse response =
                fga.readLatestAuthorizationModel(options).get();

        // Then
        mockHttpClient
                .verify()
                .get(getUrl)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .called(1);
        assertNotNull(response.getAuthorizationModel());
        assertEquals(DEFAULT_AUTH_MODEL_ID, response.getAuthorizationModel().getId());
    }

    @Test
    public void listRelations_withHeaders() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"contextual_tuples\":null,\"authorization_model_id\":\"%s\",\"trace\":null,\"context\":null,\"consistency\":\"UNSPECIFIED\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID);

        mockHttpClient
                .onPost(postUrl)
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .doReturn(200, "{\"allowed\":true}");

        ClientListRelationsRequest request = new ClientListRelationsRequest()
                .relations(List.of(DEFAULT_RELATION))
                .user(DEFAULT_USER)
                ._object(DEFAULT_OBJECT);
        ClientListRelationsOptions options =
                new ClientListRelationsOptions().additionalHeaders(Map.of("test-header", "test-value-per-call"));

        // When
        ClientListRelationsResponse response =
                fga.listRelations(request, options).get();

        // Then
        mockHttpClient
                .verify()
                .post(postUrl)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value-per-call")
                .called(1);
    }

    @Test
    public void listRelations_withNullHeaders() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"contextual_tuples\":null,\"authorization_model_id\":\"%s\",\"trace\":null,\"context\":null,\"consistency\":\"UNSPECIFIED\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID);

        mockHttpClient
                .onPost(postUrl)
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value")
                .doReturn(200, "{\"allowed\":true}");

        ClientListRelationsRequest request = new ClientListRelationsRequest()
                .relations(List.of(DEFAULT_RELATION))
                .user(DEFAULT_USER)
                ._object(DEFAULT_OBJECT);
        ClientListRelationsOptions options = new ClientListRelationsOptions().additionalHeaders(null);

        // When - this should not throw even though additionalHeaders is null
        ClientListRelationsResponse response =
                fga.listRelations(request, options).get();

        // Then
        mockHttpClient
                .verify()
                .post(postUrl)
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value")
                .called(1);
        assertNotNull(response);
    }

    @Test
    public void clientBatchCheck_withNullHeaders() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"contextual_tuples\":null,\"authorization_model_id\":\"%s\",\"trace\":null,\"context\":null,\"consistency\":\"UNSPECIFIED\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onPost(postUrl)
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value")
                .doReturn(200, "{\"allowed\":true}");
        ClientCheckRequest request = new ClientCheckRequest()
                ._object(DEFAULT_OBJECT)
                .relation(DEFAULT_RELATION)
                .user(DEFAULT_USER);
        ClientBatchCheckClientOptions options = new ClientBatchCheckClientOptions().additionalHeaders(null);

        // When - this should not throw even though additionalHeaders is null
        List<ClientBatchCheckClientResponse> response =
                fga.clientBatchCheck(List.of(request), options).get();

        // Then
        mockHttpClient
                .verify()
                .post(postUrl)
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "test-value")
                .called(1);
        assertEquals(Boolean.TRUE, response.get(0).getAllowed());
    }

    /**
     * Edge case: No default headers configured on client.
     */
    @Test
    public void createStore_withNoDefaultHeaders() throws Exception {
        // Given - reconfigure without default headers
        clientConfiguration.defaultHeaders(null);
        fga.setConfiguration(clientConfiguration);

        String expectedBody = String.format("{\"name\":\"%s\"}", DEFAULT_STORE_NAME);
        String requestBody = String.format("{\"id\":\"%s\",\"name\":\"%s\"}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient
                .onPost("https://api.fga.example/stores")
                .withBody(is(expectedBody))
                .withHeader("per-call-header", "per-call-value")
                .doReturn(201, requestBody);
        CreateStoreRequest request = new CreateStoreRequest().name(DEFAULT_STORE_NAME);
        ClientCreateStoreOptions options =
                new ClientCreateStoreOptions().additionalHeaders(Map.of("per-call-header", "per-call-value"));

        // When
        CreateStoreResponse response = fga.createStore(request, options).get();

        // Then - should only have per-call headers
        mockHttpClient
                .verify()
                .post("https://api.fga.example/stores")
                .withHeader("per-call-header", "per-call-value")
                .called(1);
        assertEquals(DEFAULT_STORE_ID, response.getId());
    }

    /**
     * Edge case: Multiple headers with same key override correctly.
     */
    @Test
    public void write_multipleOverrides() throws Exception {
        // Given
        String postPath = String.format("https://api.fga.example/stores/%s/write", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"writes\":{\"tuple_keys\":[{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\",\"condition\":null}],\"on_duplicate\":\"error\"},\"deletes\":null,\"authorization_model_id\":\"%s\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onPost(postPath)
                .withBody(is(expectedBody))
                .withHeader("test-header", "override-3")
                .withHeader("another-header", "override-2")
                .doReturn(200, EMPTY_RESPONSE_BODY);
        ClientWriteRequest request = new ClientWriteRequest()
                .writes(List.of(new ClientTupleKey()
                        ._object(DEFAULT_OBJECT)
                        .relation(DEFAULT_RELATION)
                        .user(DEFAULT_USER)));
        ClientWriteOptions options = new ClientWriteOptions()
                .additionalHeaders(Map.of("test-header", "override-3", "another-header", "override-2"));

        // When
        ClientWriteResponse response = fga.write(request, options).get();

        // Then - all headers should be overridden
        mockHttpClient
                .verify()
                .post(postPath)
                .withHeader("test-header", "override-3")
                .withHeader("another-header", "override-2")
                .called(1);
        assertEquals(200, response.getStatusCode());
    }

    /**
     * Edge case: Special characters in header values.
     */
    @Test
    public void check_withSpecialCharactersInHeaders() throws Exception {
        // Given
        String postUrl = String.format("https://api.fga.example/stores/%s/check", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"contextual_tuples\":null,\"authorization_model_id\":\"%s\",\"trace\":null,\"context\":null,\"consistency\":\"UNSPECIFIED\"}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onPost(postUrl)
                .withBody(is(expectedBody))
                .withHeader("another-header", "another-value")
                .withHeader("test-header", "value-with-dashes_and_underscores")
                .withHeader("x-custom", "UTF-8,gzip,deflate")
                .doReturn(200, "{\"allowed\":true}");
        ClientCheckRequest request = new ClientCheckRequest()
                ._object(DEFAULT_OBJECT)
                .relation(DEFAULT_RELATION)
                .user(DEFAULT_USER);
        ClientCheckOptions options = new ClientCheckOptions()
                .additionalHeaders(Map.of(
                        "test-header", "value-with-dashes_and_underscores",
                        "x-custom", "UTF-8,gzip,deflate"));

        // When
        ClientCheckResponse response = fga.check(request, options).get();

        // Then
        mockHttpClient
                .verify()
                .post(postUrl)
                .withHeader("test-header", "value-with-dashes_and_underscores")
                .withHeader("x-custom", "UTF-8,gzip,deflate")
                .called(1);
        assertEquals(Boolean.TRUE, response.getAllowed());
    }
}

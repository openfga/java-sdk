/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.api.client;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;

import com.github.tomakehurst.wiremock.WireMockServer;
import com.github.tomakehurst.wiremock.core.WireMockConfiguration;
import dev.openfga.sdk.api.configuration.ClientConfiguration;
import dev.openfga.sdk.errors.FgaError;
import java.net.http.HttpRequest;
import java.time.Duration;
import java.util.concurrent.ExecutionException;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class HttpRequestAttemptRetryTest {

    private WireMockServer wireMockServer;
    private ClientConfiguration configuration;
    private ApiClient apiClient;

    @BeforeEach
    void setUp() {
        wireMockServer =
                new WireMockServer(WireMockConfiguration.wireMockConfig().dynamicPort());
        wireMockServer.start();

        configuration = new ClientConfiguration()
                .apiUrl("http://localhost:" + wireMockServer.port())
                .maxRetries(3)
                .minimumRetryDelay(Duration.ofMillis(10)); // Short delay for testing

        apiClient = new ApiClient();
    }

    @AfterEach
    void tearDown() {
        if (wireMockServer != null) {
            wireMockServer.stop();
        }
    }

    @Test
    void shouldRetryWith429AndRetryAfterHeader() throws Exception {
        // Given
        wireMockServer.stubFor(get(urlEqualTo("/test"))
                .inScenario("retry-after-scenario")
                .whenScenarioStateIs("Started")
                .willReturn(aResponse()
                        .withStatus(429)
                        .withHeader("Retry-After", "1")
                        .withBody("{\"error\":\"rate limited\"}"))
                .willSetStateTo("First Retry"));

        wireMockServer.stubFor(get(urlEqualTo("/test"))
                .inScenario("retry-after-scenario")
                .whenScenarioStateIs("First Retry")
                .willReturn(aResponse().withStatus(200).withBody("")));

        HttpRequest request = HttpRequest.newBuilder()
                .uri(java.net.URI.create("http://localhost:" + wireMockServer.port() + "/test"))
                .GET()
                .build();

        HttpRequestAttempt<Void> attempt =
                new HttpRequestAttempt<>(request, "test", Void.class, apiClient, configuration);

        // When
        ApiResponse<Void> response = attempt.attemptHttpRequest().get();

        // Then
        assertThat(response.getStatusCode()).isEqualTo(200);

        // Verify both requests were made
        wireMockServer.verify(2, getRequestedFor(urlEqualTo("/test")));
    }

    @Test
    void shouldRetryWith500AndRetryAfterHeaderForGetRequest() throws Exception {
        // Given
        wireMockServer.stubFor(get(urlEqualTo("/test"))
                .inScenario("server-error-scenario")
                .whenScenarioStateIs("Started")
                .willReturn(aResponse()
                        .withStatus(500)
                        .withHeader("Retry-After", "1")
                        .withBody("{\"error\":\"server error\"}"))
                .willSetStateTo("First Retry"));

        wireMockServer.stubFor(get(urlEqualTo("/test"))
                .inScenario("server-error-scenario")
                .whenScenarioStateIs("First Retry")
                .willReturn(aResponse().withStatus(200).withBody("")));

        HttpRequest request = HttpRequest.newBuilder()
                .uri(java.net.URI.create("http://localhost:" + wireMockServer.port() + "/test"))
                .GET()
                .build();

        HttpRequestAttempt<Void> attempt =
                new HttpRequestAttempt<>(request, "test", Void.class, apiClient, configuration);

        // When
        ApiResponse<Void> response = attempt.attemptHttpRequest().get();

        // Then
        assertThat(response.getStatusCode()).isEqualTo(200);

        // Verify both requests were made
        wireMockServer.verify(2, getRequestedFor(urlEqualTo("/test")));
    }

    @Test
    void shouldNotRetryWith500WithoutRetryAfterHeaderForPostRequest() throws Exception {
        // Given - Breaking change: POST requests should NOT retry on 5xx without Retry-After
        wireMockServer.stubFor(post(urlEqualTo("/test"))
                .willReturn(aResponse().withStatus(500).withBody("{\"error\":\"server error\"}")));

        HttpRequest request = HttpRequest.newBuilder()
                .uri(java.net.URI.create("http://localhost:" + wireMockServer.port() + "/test"))
                .POST(HttpRequest.BodyPublishers.ofString("{}"))
                .build();

        HttpRequestAttempt<Void> attempt =
                new HttpRequestAttempt<>(request, "test", Void.class, apiClient, configuration);

        // When & Then
        ExecutionException exception = assertThrows(
                ExecutionException.class, () -> attempt.attemptHttpRequest().get());

        assertThat(exception.getCause()).isInstanceOf(FgaError.class);
        FgaError error = (FgaError) exception.getCause();
        assertThat(error.getStatusCode()).isEqualTo(500);

        // Verify only one request was made (no retry for state-affecting operations without Retry-After)
        wireMockServer.verify(1, postRequestedFor(urlEqualTo("/test")));
    }

    @Test
    void shouldRetryWith500WithRetryAfterHeaderForPostRequest() throws Exception {
        // Given
        wireMockServer.stubFor(post(urlEqualTo("/test"))
                .inScenario("post-retry-scenario")
                .whenScenarioStateIs("Started")
                .willReturn(aResponse()
                        .withStatus(500)
                        .withHeader("Retry-After", "1")
                        .withBody("{\"error\":\"server error\"}"))
                .willSetStateTo("First Retry"));

        wireMockServer.stubFor(post(urlEqualTo("/test"))
                .inScenario("post-retry-scenario")
                .whenScenarioStateIs("First Retry")
                .willReturn(aResponse().withStatus(200).withBody("")));

        HttpRequest request = HttpRequest.newBuilder()
                .uri(java.net.URI.create("http://localhost:" + wireMockServer.port() + "/test"))
                .POST(HttpRequest.BodyPublishers.ofString("{}"))
                .build();

        HttpRequestAttempt<Void> attempt =
                new HttpRequestAttempt<>(request, "test", Void.class, apiClient, configuration);

        // When
        ApiResponse<Void> response = attempt.attemptHttpRequest().get();

        // Then
        assertThat(response.getStatusCode()).isEqualTo(200);

        // Verify both requests were made
        wireMockServer.verify(2, postRequestedFor(urlEqualTo("/test")));
    }

    @Test
    void shouldNotRetryWith501() throws Exception {
        // Given
        wireMockServer.stubFor(get(urlEqualTo("/test"))
                .willReturn(aResponse()
                        .withStatus(501)
                        .withHeader("Retry-After", "1")
                        .withBody("{\"error\":\"not implemented\"}")));

        HttpRequest request = HttpRequest.newBuilder()
                .uri(java.net.URI.create("http://localhost:" + wireMockServer.port() + "/test"))
                .GET()
                .build();

        HttpRequestAttempt<Void> attempt =
                new HttpRequestAttempt<>(request, "test", Void.class, apiClient, configuration);

        // When & Then
        ExecutionException exception = assertThrows(
                ExecutionException.class, () -> attempt.attemptHttpRequest().get());

        assertThat(exception.getCause()).isInstanceOf(FgaError.class);
        FgaError error = (FgaError) exception.getCause();
        assertThat(error.getStatusCode()).isEqualTo(501);

        // Verify only one request was made (no retry)
        wireMockServer.verify(1, getRequestedFor(urlEqualTo("/test")));
    }

    @Test
    void shouldRespectMaxRetries() throws Exception {
        // Given
        wireMockServer.stubFor(get(urlEqualTo("/test"))
                .willReturn(aResponse()
                        .withStatus(429)
                        .withHeader("Retry-After", "1")
                        .withBody("{\"error\":\"rate limited\"}")));

        HttpRequest request = HttpRequest.newBuilder()
                .uri(java.net.URI.create("http://localhost:" + wireMockServer.port() + "/test"))
                .GET()
                .build();

        HttpRequestAttempt<Void> attempt =
                new HttpRequestAttempt<>(request, "test", Void.class, apiClient, configuration);

        // When & Then
        ExecutionException exception = assertThrows(
                ExecutionException.class, () -> attempt.attemptHttpRequest().get());

        assertThat(exception.getCause()).isInstanceOf(FgaError.class);
        FgaError error = (FgaError) exception.getCause();
        assertThat(error.getStatusCode()).isEqualTo(429);

        // Verify maxRetries + 1 requests were made (initial + 3 retries)
        wireMockServer.verify(4, getRequestedFor(urlEqualTo("/test")));
    }

    @Test
    void shouldUseExponentialBackoffWhenNoRetryAfterHeader() throws Exception {
        // Given
        long startTime = System.currentTimeMillis();

        wireMockServer.stubFor(get(urlEqualTo("/test"))
                .inScenario("exponential-backoff-scenario")
                .whenScenarioStateIs("Started")
                .willReturn(aResponse().withStatus(429).withBody("{\"error\":\"rate limited\"}"))
                .willSetStateTo("First Retry"));

        wireMockServer.stubFor(get(urlEqualTo("/test"))
                .inScenario("exponential-backoff-scenario")
                .whenScenarioStateIs("First Retry")
                .willReturn(aResponse().withStatus(200).withBody("")));

        HttpRequest request = HttpRequest.newBuilder()
                .uri(java.net.URI.create("http://localhost:" + wireMockServer.port() + "/test"))
                .GET()
                .build();

        HttpRequestAttempt<Void> attempt =
                new HttpRequestAttempt<>(request, "test", Void.class, apiClient, configuration);

        // When
        ApiResponse<Void> response = attempt.attemptHttpRequest().get();
        long endTime = System.currentTimeMillis();

        // Then
        assertThat(response.getStatusCode()).isEqualTo(200);

        // Verify both requests were made
        wireMockServer.verify(2, getRequestedFor(urlEqualTo("/test")));

        // Verify some delay occurred (exponential backoff should add at least 500ms for first retry)
        // Note: Using a generous range due to test timing variability
        assertThat(endTime - startTime).isGreaterThan(400L);
    }

    @Test
    void shouldHandleInvalidRetryAfterHeader() throws Exception {
        // Given
        wireMockServer.stubFor(get(urlEqualTo("/test"))
                .inScenario("invalid-retry-after-scenario")
                .whenScenarioStateIs("Started")
                .willReturn(aResponse()
                        .withStatus(429)
                        .withHeader("Retry-After", "invalid-value")
                        .withBody("{\"error\":\"rate limited\"}"))
                .willSetStateTo("First Retry"));

        wireMockServer.stubFor(get(urlEqualTo("/test"))
                .inScenario("invalid-retry-after-scenario")
                .whenScenarioStateIs("First Retry")
                .willReturn(aResponse().withStatus(200).withBody("")));

        HttpRequest request = HttpRequest.newBuilder()
                .uri(java.net.URI.create("http://localhost:" + wireMockServer.port() + "/test"))
                .GET()
                .build();

        HttpRequestAttempt<Void> attempt =
                new HttpRequestAttempt<>(request, "test", Void.class, apiClient, configuration);

        // When
        ApiResponse<Void> response = attempt.attemptHttpRequest().get();

        // Then
        assertThat(response.getStatusCode()).isEqualTo(200);

        // Verify both requests were made (should fall back to exponential backoff)
        wireMockServer.verify(2, getRequestedFor(urlEqualTo("/test")));
    }
}

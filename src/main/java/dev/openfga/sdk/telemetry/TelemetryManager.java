/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.telemetry;

import dev.openfga.sdk.api.configuration.Configuration;

/**
 * TelemetryManager provides a global singleton Telemetry instance for the entire SDK.
 * This ensures only one Telemetry/Metrics instance is created across all SDK usage,
 * preventing object proliferation and memory leaks while simplifying the architecture.
 */
public class TelemetryManager {
    private static final TelemetryManager INSTANCE = new TelemetryManager();
    
    // Global singleton telemetry instance - created lazily on first access
    private volatile Telemetry globalTelemetry;

    private TelemetryManager() {
        // Private constructor for singleton
    }

    /**
     * Returns the singleton instance of TelemetryManager.
     *
     * @return The TelemetryManager singleton instance
     */
    public static TelemetryManager getInstance() {
        return INSTANCE;
    }

    /**
     * Gets the global singleton Telemetry instance. The configuration parameter is accepted
     * for backward compatibility but only the first configuration passed will be used to
     * initialize the global instance.
     *
     * @param configuration The configuration (used only for first initialization)
     * @return The global shared Telemetry instance
     */
    public Telemetry getTelemetry(Configuration configuration) {
        if (configuration == null) {
            throw new IllegalArgumentException("Configuration cannot be null");
        }

        // Double-checked locking pattern for thread-safe lazy initialization
        if (globalTelemetry == null) {
            synchronized (this) {
                if (globalTelemetry == null) {
                    globalTelemetry = new Telemetry(configuration);
                }
            }
        }
        
        return globalTelemetry;
    }

    /**
     * Clears the global telemetry instance. This is primarily intended for testing
     * and should not be used in production code.
     */
    void clearCache() {
        synchronized (this) {
            globalTelemetry = null;
        }
    }

    /**
     * Returns 1 if the global telemetry instance exists, 0 otherwise.
     * This is primarily intended for testing and monitoring purposes.
     *
     * @return 1 if telemetry instance exists, 0 otherwise
     */
    int getCacheSize() {
        return globalTelemetry != null ? 1 : 0;
    }
}

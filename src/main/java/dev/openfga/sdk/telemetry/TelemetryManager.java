/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.telemetry;

import dev.openfga.sdk.api.configuration.Configuration;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/**
 * TelemetryManager provides singleton management of Telemetry instances per SDK configuration.
 * This ensures that only one Telemetry/Metrics instance is created per unique configuration,
 * preventing object proliferation and memory leaks.
 */
public class TelemetryManager {
    private static final TelemetryManager INSTANCE = new TelemetryManager();

    private final ConcurrentMap<ConfigurationKey, Telemetry> telemetryInstances = new ConcurrentHashMap<>();

    private TelemetryManager() {
        // Private constructor for singleton
    }

    /**
     * Returns the singleton instance of TelemetryManager.
     *
     * @return The TelemetryManager singleton instance
     */
    public static TelemetryManager getInstance() {
        return INSTANCE;
    }

    /**
     * Gets or creates a Telemetry instance for the given configuration.
     * If a Telemetry instance already exists for this configuration, returns the existing instance.
     * Otherwise, creates a new instance and caches it for future use.
     *
     * @param configuration The configuration to get telemetry for
     * @return A shared Telemetry instance for this configuration
     */
    public Telemetry getTelemetry(Configuration configuration) {
        if (configuration == null) {
            throw new IllegalArgumentException("Configuration cannot be null");
        }

        ConfigurationKey key = new ConfigurationKey(configuration);
        return telemetryInstances.computeIfAbsent(key, k -> new Telemetry(configuration));
    }

    /**
     * Clears all cached telemetry instances. This is primarily intended for testing
     * and should not be used in production code.
     */
    void clearCache() {
        telemetryInstances.clear();
    }

    /**
     * Returns the number of cached telemetry instances. This is primarily intended
     * for testing and monitoring purposes.
     *
     * @return The number of cached telemetry instances
     */
    int getCacheSize() {
        return telemetryInstances.size();
    }

    /**
     * ConfigurationKey represents the unique aspects of a Configuration that affect telemetry behavior.
     * This is used as a key for caching Telemetry instances.
     */
    private static class ConfigurationKey {
        private final String apiUrl;
        private final String userAgent;
        private final Object telemetryConfiguration;
        private final int hashCode;

        ConfigurationKey(Configuration config) {
            this.apiUrl = config.getApiUrl();
            this.userAgent = config.getUserAgent();
            this.telemetryConfiguration = config.getTelemetryConfiguration();

            // Pre-compute hash code for performance
            this.hashCode = computeHashCode();
        }

        private int computeHashCode() {
            int result = apiUrl != null ? apiUrl.hashCode() : 0;
            result = 31 * result + (userAgent != null ? userAgent.hashCode() : 0);
            result = 31 * result + (telemetryConfiguration != null ? telemetryConfiguration.hashCode() : 0);
            return result;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null || getClass() != obj.getClass()) return false;

            ConfigurationKey that = (ConfigurationKey) obj;

            if (apiUrl != null ? !apiUrl.equals(that.apiUrl) : that.apiUrl != null) return false;
            if (userAgent != null ? !userAgent.equals(that.userAgent) : that.userAgent != null) return false;
            return telemetryConfiguration != null
                    ? telemetryConfiguration.equals(that.telemetryConfiguration)
                    : that.telemetryConfiguration == null;
        }

        @Override
        public int hashCode() {
            return hashCode;
        }
    }
}

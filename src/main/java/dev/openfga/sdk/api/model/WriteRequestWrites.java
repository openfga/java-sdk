/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.api.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * WriteRequestWrites
 */
@JsonPropertyOrder({WriteRequestWrites.JSON_PROPERTY_TUPLE_KEYS, WriteRequestWrites.JSON_PROPERTY_ON_DUPLICATE})
public class WriteRequestWrites {
    public static final String JSON_PROPERTY_TUPLE_KEYS = "tuple_keys";
    private List<TupleKey> tupleKeys = new ArrayList<>();

    /**
     * On &#39;error&#39; ( or unspecified ), the API returns an error if an identical tuple already exists. On &#39;ignore&#39;, identical writes are treated as no-ops (matching on user, relation, object, and RelationshipCondition).
     */
    public enum OnDuplicateEnum {
        ERROR("error"),

        IGNORE("ignore"),

        UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

        private String value;

        OnDuplicateEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static OnDuplicateEnum fromValue(String value) {
            for (OnDuplicateEnum b : OnDuplicateEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return UNKNOWN_DEFAULT_OPEN_API;
        }
    }

    public static final String JSON_PROPERTY_ON_DUPLICATE = "on_duplicate";
    private OnDuplicateEnum onDuplicate = OnDuplicateEnum.ERROR;

    public WriteRequestWrites() {}

    public WriteRequestWrites tupleKeys(List<TupleKey> tupleKeys) {
        this.tupleKeys = tupleKeys;
        return this;
    }

    public WriteRequestWrites addTupleKeysItem(TupleKey tupleKeysItem) {
        if (this.tupleKeys == null) {
            this.tupleKeys = new ArrayList<>();
        }
        this.tupleKeys.add(tupleKeysItem);
        return this;
    }

    /**
     * Get tupleKeys
     * @return tupleKeys
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TUPLE_KEYS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<TupleKey> getTupleKeys() {
        return tupleKeys;
    }

    @JsonProperty(JSON_PROPERTY_TUPLE_KEYS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTupleKeys(List<TupleKey> tupleKeys) {
        this.tupleKeys = tupleKeys;
    }

    public WriteRequestWrites onDuplicate(OnDuplicateEnum onDuplicate) {
        this.onDuplicate = onDuplicate;
        return this;
    }

    /**
     * On &#39;error&#39; ( or unspecified ), the API returns an error if an identical tuple already exists. On &#39;ignore&#39;, identical writes are treated as no-ops (matching on user, relation, object, and RelationshipCondition).
     * @return onDuplicate
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ON_DUPLICATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public OnDuplicateEnum getOnDuplicate() {
        return onDuplicate;
    }

    @JsonProperty(JSON_PROPERTY_ON_DUPLICATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOnDuplicate(OnDuplicateEnum onDuplicate) {
        this.onDuplicate = onDuplicate;
    }

    /**
     * Return true if this WriteRequestWrites object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WriteRequestWrites writeRequestWrites = (WriteRequestWrites) o;
        return Objects.equals(this.tupleKeys, writeRequestWrites.tupleKeys)
                && Objects.equals(this.onDuplicate, writeRequestWrites.onDuplicate);
    }

    @Override
    public int hashCode() {
        return Objects.hash(tupleKeys, onDuplicate);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class WriteRequestWrites {\n");
        sb.append("    tupleKeys: ").append(toIndentedString(tupleKeys)).append("\n");
        sb.append("    onDuplicate: ").append(toIndentedString(onDuplicate)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `tuple_keys` to the URL query string
        if (getTupleKeys() != null) {
            for (int i = 0; i < getTupleKeys().size(); i++) {
                if (getTupleKeys().get(i) != null) {
                    joiner.add(getTupleKeys()
                            .get(i)
                            .toUrlQueryString(String.format(
                                    "%stuple_keys%s%s",
                                    prefix,
                                    suffix,
                                    "".equals(suffix)
                                            ? ""
                                            : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                }
            }
        }

        // add `on_duplicate` to the URL query string
        if (getOnDuplicate() != null) {
            joiner.add(String.format(
                    "%son_duplicate%s=%s",
                    prefix,
                    suffix,
                    URLEncoder.encode(String.valueOf(getOnDuplicate()), StandardCharsets.UTF_8)
                            .replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}

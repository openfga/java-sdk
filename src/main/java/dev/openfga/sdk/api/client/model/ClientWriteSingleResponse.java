/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.api.client.model;

import java.util.Objects;

/**
 * Result of an individual tuple operation in non-transactional writes
 */
public class ClientWriteSingleResponse {
    private final ClientTupleKey tupleKey;
    private final ClientWriteStatus status;
    private final Throwable error;

    /**
     * Constructor for successful operations
     */
    public ClientWriteSingleResponse(ClientTupleKey tupleKey, ClientWriteStatus status) {
        this(tupleKey, status, null);
    }

    /**
     * Constructor for failed operations with error details
     */
    public ClientWriteSingleResponse(ClientTupleKey tupleKey, ClientWriteStatus status, Throwable error) {
        this.tupleKey = Objects.requireNonNull(tupleKey, "tupleKey cannot be null");
        this.status = Objects.requireNonNull(status, "status cannot be null");
        this.error = error;
    }

    /**
     * Get the tuple key for this operation
     */
    public ClientTupleKey getTupleKey() {
        return tupleKey;
    }

    /**
     * Get the status of this operation
     */
    public ClientWriteStatus getStatus() {
        return status;
    }

    /**
     * Get the error details if the operation failed
     * @return The error that caused the failure, or null if the operation succeeded
     */
    public Throwable getError() {
        return error;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ClientWriteSingleResponse that = (ClientWriteSingleResponse) o;
        return Objects.equals(tupleKey, that.tupleKey) &&
               status == that.status &&
               Objects.equals(error, that.error);
    }

    @Override
    public int hashCode() {
        return Objects.hash(tupleKey, status, error);
    }

    @Override
    public String toString() {
        return "ClientWriteSingleResponse{" +
                "tupleKey=" + tupleKey +
                ", status=" + status +
                ", error=" + error +
                '}';
    }
}

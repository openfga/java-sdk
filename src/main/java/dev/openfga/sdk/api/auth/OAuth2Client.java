/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.api.auth;

import com.fasterxml.jackson.databind.ObjectMapper;
import dev.openfga.sdk.api.client.ApiClient;
import dev.openfga.sdk.api.configuration.*;
import dev.openfga.sdk.errors.ApiException;
import dev.openfga.sdk.errors.FgaInvalidParameterException;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Instant;
import java.util.concurrent.CompletableFuture;

public class OAuth2Client {
    private final HttpClient httpClient;
    private final Credentials credentials;
    private final ObjectMapper mapper;
    private final AccessToken token = new AccessToken();
    private final CredentialsFlowRequest authRequest;
    private final String apiTokenIssuer;

    /**
     * Initializes a new instance of the {@link OAuth2Client} class
     *
     * @param configuration Configuration, including credentials, that can be used to retrieve an access tokens
     * @param httpClient Http client
     */
    public OAuth2Client(Configuration configuration, HttpClient httpClient, ObjectMapper mapper)
            throws FgaInvalidParameterException {
        this.credentials = configuration.getCredentials();

        this.httpClient = httpClient;
        this.mapper = mapper;
        this.apiTokenIssuer = credentials.getClientCredentials().getApiTokenIssuer();
        this.authRequest = new CredentialsFlowRequest();
        this.authRequest.setClientId(credentials.getClientCredentials().getClientId());
        this.authRequest.setClientSecret(credentials.getClientCredentials().getClientSecret());
        this.authRequest.setAudience(credentials.getClientCredentials().getApiAudience());
        this.authRequest.setGrantType("client_credentials");
    }

    /**
     * Gets an access token, handling exchange when necessary. The access token is naively cached in memory until it
     * expires.
     *
     * @return An access token in a {@link CompletableFuture}
     */
    public CompletableFuture<String> getAccessToken() throws FgaInvalidParameterException, ApiException {
        if (!token.isValid()) {
            return exchangeToken().thenCompose(response -> {
                token.setToken(response.getAccessToken());
                token.setExpiresAt(Instant.now().plusSeconds(response.getExpiresInSeconds()));
                return CompletableFuture.completedFuture(token.getToken());
            });
        }

        return CompletableFuture.completedFuture(token.getToken());
    }

    /**
     * Exchange a client id and client secret for an access token.
     * @return The credentials flow response
     */
    private CompletableFuture<CredentialsFlowResponse> exchangeToken()
            throws ApiException, FgaInvalidParameterException {
        try {
            byte[] body = mapper.writeValueAsBytes(authRequest);

            Configuration config = new Configuration().apiUrl("https://" + apiTokenIssuer);

            HttpRequest request = ApiClient.requestBuilder("POST", "/oauth/token", body, config)
                    .build();

            return httpClient
                    .sendAsync(request, HttpResponse.BodyHandlers.ofString())
                    .thenCompose(httpResponse -> {
                        if (httpResponse.statusCode() != HttpURLConnection.HTTP_OK) {
                            return CompletableFuture.failedFuture(new ApiException("exchangeToken", httpResponse));
                        }
                        try {
                            CredentialsFlowResponse response =
                                    mapper.readValue(httpResponse.body(), CredentialsFlowResponse.class);
                            return CompletableFuture.completedFuture(response);
                        } catch (Exception e) {
                            return CompletableFuture.failedFuture(e);
                        }
                    });
        } catch (IOException e) {
            throw new ApiException(e);
        }
    }
}

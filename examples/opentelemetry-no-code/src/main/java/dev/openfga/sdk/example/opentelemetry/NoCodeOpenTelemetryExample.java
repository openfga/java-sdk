/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.example.opentelemetry;

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;
import dev.openfga.sdk.api.configuration.Credentials;
import dev.openfga.sdk.api.configuration.ClientCredentials;
import dev.openfga.sdk.api.client.model.*;
import dev.openfga.sdk.api.model.*;
import io.github.cdimascio.dotenv.Dotenv;

import java.util.List;
import java.util.concurrent.CompletableFuture;

/**
 * OpenFGA Java SDK - No-Code OpenTelemetry Example
 * 
 * This example demonstrates how to use OpenTelemetry metrics with the OpenFGA Java SDK
 * using the no-code approach with OpenTelemetry Java agents.
 * 
 * No OpenTelemetry configuration code is needed in the application - the Java agent
 * handles all the setup automatically when you run with:
 * 
 * java -javaagent:opentelemetry-javaagent.jar -jar your-app.jar
 * 
 * The SDK will automatically detect and use the agent-configured OpenTelemetry instance.
 */
public class NoCodeOpenTelemetryExample {

    private static Dotenv dotenv;
    private static OpenFgaClient fgaClient;

    public static void main(String[] args) throws Exception {
        System.out.println("üöÄ OpenFGA Java SDK - No-Code OpenTelemetry Example");
        System.out.println("====================================================");
        
        // Load environment variables
        dotenv = Dotenv.configure().ignoreIfMissing().load();
        
        System.out.println("üìã No OpenTelemetry configuration code needed!");
        System.out.println("   The OpenTelemetry Java agent handles all setup automatically");
        System.out.println("   Run with: java -javaagent:opentelemetry-javaagent.jar -jar app.jar");
        
        // Create OpenFGA client - no OpenTelemetry configuration needed!
        createOpenFgaClient();
        
        System.out.println("\nüîÑ Starting continuous OpenTelemetry metrics generation...");
        System.out.println("   Operations will run every 20 seconds until stopped (Ctrl+C)");
        System.out.println("   This matches the behavior of other OpenFGA SDK examples");
        
        // Start continuous execution
        runContinuously();
    }

    private static void createOpenFgaClient() throws Exception {
        System.out.println("\nüîß Creating OpenFGA client...");
        
        String apiUrl = dotenv.get("FGA_API_URL", "https://api.us1.fga.dev");
        String storeId = dotenv.get("FGA_STORE_ID");
        String modelId = dotenv.get("FGA_MODEL_ID");
        
        if (storeId == null || modelId == null) {
            throw new IllegalStateException("FGA_STORE_ID and FGA_MODEL_ID must be configured in .env file");
        }
        
        System.out.println("   API URL: " + apiUrl);
        System.out.println("   Store ID: " + storeId);
        System.out.println("   Model ID: " + modelId);
        
        // Create client configuration - no telemetry configuration needed!
        ClientConfiguration config = new ClientConfiguration()
                .apiUrl(apiUrl)
                .storeId(storeId)
                .authorizationModelId(modelId);
        
        // Configure authentication if credentials are provided
        String clientId = dotenv.get("FGA_CLIENT_ID");
        String clientSecret = dotenv.get("FGA_CLIENT_SECRET");
        
        if (clientId != null && clientSecret != null) {
            String apiAudience = dotenv.get("FGA_API_AUDIENCE", "https://api.fga.example");
            String apiTokenIssuer = dotenv.get("FGA_API_TOKEN_ISSUER", "auth.fga.example");
            
            config.credentials(new Credentials(
                new ClientCredentials()
                    .clientId(clientId)
                    .clientSecret(clientSecret)
                    .apiAudience(apiAudience)
                    .apiTokenIssuer(apiTokenIssuer)
            ));
            
            System.out.println("   ‚úÖ Client credentials authentication configured");
        } else {
            System.out.println("   ‚ÑπÔ∏è  No authentication configured (using public API)");
        }
        
        // Create the client - OpenTelemetry metrics will be automatically enabled
        // if the Java agent is running
        fgaClient = new OpenFgaClient(config);
        
        System.out.println("‚úÖ OpenFGA client created          ");
        System.out.println("   üìä Metrics will be automatically collected by OpenTelemetry agent");
    }
    
    /**
     * Run operations continuously every 20 seconds like the JS example
     */
    private static void runContinuously() {
        // Schedule next execution in 20 seconds
        java.util.Timer timer = new java.util.Timer("NoCodeOpenTelemetryExample", false);
        timer.schedule(new java.util.TimerTask() {
            @Override
            public void run() {
                try {
                    runContinuously(); // Schedule next run
                } catch (Exception e) {
                    System.err.println("Error scheduling next run: " + e.getMessage());
                }
            }
        }, 20000); // 20 seconds
        
        try {
            System.out.println("\nüìä Running operations cycle...");
            
            // Perform comprehensive operations to generate metrics
            performOperations();
            
            System.out.println("   ‚úÖ Operations cycle completed - next run in 20 seconds");
            
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è  Error in operations cycle: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static void performOperations() throws Exception {
        System.out.println("\nüìä Demonstrating OpenTelemetry metrics with no-code approach...");
        
        System.out.println("\n‚ú® Using the FIXED SDK with OpenTelemetry bug fix!");
        System.out.println("   The SDK now properly uses GlobalOpenTelemetry.get() instead of noop()");
        
        System.out.println("\nüìã How this works:");
        System.out.println("   1. OpenTelemetry Java agent configures OpenTelemetry globally");
        System.out.println("   2. OpenFGA SDK detects the global OpenTelemetry instance");
        System.out.println("   3. SDK automatically generates metrics for all operations");
        System.out.println("   4. Agent exports metrics to your configured backend");
        
        System.out.println("\nüìä Performing comprehensive operations to generate all metrics:");
        
        // Define test tuples that we'll use throughout the example
        List<ClientTupleKey> testTuples = List.of(
            new ClientTupleKey()
                .user("user:alice")
                .relation("owner")
                ._object("document:readme"),
            new ClientTupleKey()
                .user("user:bob")
                .relation("writer")
                ._object("document:readme"),
            new ClientTupleKey()
                .user("user:charlie")
                .relation("reader")
                ._object("document:readme")
        );
        
        try {
            // 1. Write relationship tuples (generates request.duration metrics)
            System.out.println("   üìù Writing relationship tuples...");
            fgaClient.write(new ClientWriteRequest().writes(testTuples)).get();
            System.out.println("   ‚úÖ Relationship tuples written - generated request.duration metric!");

            // 2. Perform check operations (generates query.duration metrics)
            System.out.println("   üîç Performing check operations...");
            
            java.util.concurrent.CompletableFuture<ClientCheckResponse> check1 = fgaClient.check(new ClientCheckRequest()
                .user("user:alice")
                .relation("owner")
                ._object("document:readme"));
                
            java.util.concurrent.CompletableFuture<ClientCheckResponse> check2 = fgaClient.check(new ClientCheckRequest()
                .user("user:bob")
                .relation("writer")
                ._object("document:readme"));
                
            java.util.concurrent.CompletableFuture<ClientCheckResponse> check3 = fgaClient.check(new ClientCheckRequest()
                .user("user:charlie")
                .relation("reader")
                ._object("document:readme"));

            // Wait for all checks to complete
            java.util.concurrent.CompletableFuture.allOf(check1, check2, check3).get();
            System.out.println("   ‚úÖ Check operations completed - generated request.duration and query.duration metrics!");

            // 3. List objects operation
            System.out.println("   üìã Listing objects...");
            fgaClient.listObjects(new ClientListObjectsRequest()
                .user("user:alice")
                .relation("owner")
                .type("document")).get();
            System.out.println("   ‚úÖ List objects completed - generated request.duration metric!");

            // 4. Read tuples
            System.out.println("   üìñ Reading tuples...");
            fgaClient.read(new ClientReadRequest()).get();
            System.out.println("   ‚úÖ Read tuples completed - generated request.duration metric!");

            // 5. Batch check operations
            System.out.println("   üîç Performing batch check operations...");
            fgaClient.batchCheck(new ClientBatchCheckRequest()
                .checks(List.of(
                    new ClientBatchCheckItem()
                        .user("user:alice")
                        .relation("owner")
                        ._object("document:readme"),
                    new ClientBatchCheckItem()
                        .user("user:bob")
                        .relation("writer")
                        ._object("document:readme"),
                    new ClientBatchCheckItem()
                        .user("user:charlie")
                        .relation("owner")
                        ._object("document:readme")
                ))).get();
            System.out.println("   ‚úÖ Batch check operations completed - generated request.duration metrics!");

            // 6. List users operation
            System.out.println("   üë• Listing users...");
            fgaClient.listUsers(new ClientListUsersRequest()
                ._object(new FgaObject().type("document").id("readme"))
                .relation("reader")
                .userFilters(List.of(new UserTypeFilter().type("user")))).get();
            System.out.println("   ‚úÖ List users completed - generated request.duration metric!");

            // 7. Write and delete operations
            System.out.println("   ‚úèÔ∏è Writing and deleting tuples...");
            fgaClient.write(new ClientWriteRequest()
                .writes(List.of(
                    new ClientTupleKey()
                        .user("user:dave")
                        .relation("reader")
                        ._object("document:readme")
                ))
                .deletes(List.of(
                    new ClientTupleKeyWithoutCondition()
                        .user("user:charlie")
                        .relation("reader")
                        ._object("document:readme")
                ))).get();
            System.out.println("   ‚úÖ Write and delete operations completed - generated request.duration metric!");

            System.out.println("   üéØ All operations completed - comprehensive metrics generated!");

            // Clean up test tuples (so example can be run multiple times)
            System.out.println("   üßπ Cleaning up test tuples...");
            // Convert ClientTupleKey to ClientTupleKeyWithoutCondition for delete operations
            List<ClientTupleKeyWithoutCondition> deleteTuples = testTuples.stream()
                .map(tuple -> new ClientTupleKeyWithoutCondition()
                    .user(tuple.getUser())
                    .relation(tuple.getRelation())
                    ._object(tuple.getObject()))
                .collect(java.util.stream.Collectors.toList());
            
            // Also clean up the additional tuple we created
            deleteTuples.add(new ClientTupleKeyWithoutCondition()
                .user("user:dave")
                .relation("reader")
                ._object("document:readme"));
            
            fgaClient.write(new ClientWriteRequest().deletes(deleteTuples)).get();
            System.out.println("   ‚úÖ Test tuples cleaned up - generated additional request.duration metric!");

        } catch (java.util.concurrent.ExecutionException e) {
            // Handle ExecutionException which wraps the actual FGA error
            Throwable cause = e.getCause();
            if (cause != null && (cause.getClass().getSimpleName().contains("FgaApi") || 
                                  cause.getMessage() != null && (cause.getMessage().contains("validation_error") || 
                                                                cause.getMessage().contains("already exists") || 
                                                                cause.getMessage().contains("not found") ||
                                                                cause.getMessage().contains("write")))) {
                System.out.println("   ‚ö†Ô∏è  Some operations had conflicts - continuing (" + cause.getClass().getSimpleName() + ")");
                System.out.println("   üìä Metrics were still generated for successful operations!");
            } else {
                throw e; // Re-throw if it's not a tuple conflict error
            }
        } catch (Exception e) {
            if (e.getClass().getSimpleName().contains("FgaApi") || 
                (e.getMessage() != null && (e.getMessage().contains("validation_error") || 
                                           e.getMessage().contains("already exists") || 
                                           e.getMessage().contains("not found") ||
                                           e.getMessage().contains("write")))) {
                System.out.println("   ‚ö†Ô∏è  Some operations had conflicts - continuing (" + e.getClass().getSimpleName() + ")");
                System.out.println("   üìä Metrics were still generated for successful operations!");
            } else {
                throw e; // Re-throw if it's not a tuple conflict error
            }
        }
        
        System.out.println("\nüìä Real metrics generated and exported by Java agent:");
        System.out.println("   ‚Ä¢ fga-client.request.duration (histogram) - Total request time");
        System.out.println("   ‚Ä¢ fga-client.query.duration (histogram) - Server processing time");
        System.out.println("   ‚Ä¢ fga-client.credentials.request (counter) - Token requests");
        
        System.out.println("\nüìä Check your observability tools for real metrics:");
        System.out.println("   ‚Ä¢ Prometheus: http://localhost:9090");
        System.out.println("   ‚Ä¢ Grafana: http://localhost:3001");
        System.out.println("   ‚Ä¢ Jaeger: http://localhost:16686");
    }
}

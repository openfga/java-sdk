/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.example.opentelemetry;

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;
import dev.openfga.sdk.api.configuration.Credentials;
import dev.openfga.sdk.api.configuration.ClientCredentials;
import dev.openfga.sdk.api.configuration.TelemetryConfiguration;
import dev.openfga.sdk.api.client.model.*;
import dev.openfga.sdk.api.model.*;
import dev.openfga.sdk.telemetry.Counters;
import dev.openfga.sdk.telemetry.Histograms;
import io.github.cdimascio.dotenv.Dotenv;

import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;

/**
 * OpenFGA Java SDK - No-Code OpenTelemetry Example
 * 
 * This example demonstrates how to use OpenTelemetry metrics with the OpenFGA Java SDK
 * using the no-code approach with OpenTelemetry Java agent.
 * 
 * No OpenTelemetry configuration code is needed in the application - the Java agent
 * handles all the setup automatically when you run with:
 * 
 * java -javaagent:opentelemetry-javaagent.jar \
 *      -Dotel.service.name=fga-agent-example \
 *      -Dotel.metrics.exporter=prometheus \
 *      -Dotel.exporter.prometheus.port=9090 \
 *      YourApp
 * 
 * The SDK will automatically detect and use the agent-configured OpenTelemetry instance.
 */
public class NoCodeOpenTelemetryExample {

    private static Dotenv dotenv;
    private static OpenFgaClient fgaClient;

    public static void main(String[] args) throws Exception {
        System.out.println("üöÄ OpenFGA Java SDK - No-Code OpenTelemetry Example");
        System.out.println("====================================================");
        
        // Load environment variables
        dotenv = Dotenv.configure().ignoreIfMissing().load();
        
        System.out.println("üìã No OpenTelemetry configuration code needed!");
        System.out.println("   The OpenTelemetry Java agent handles all setup automatically");
        System.out.println("   Run with: java -javaagent:opentelemetry-javaagent.jar -jar app.jar");
        
        // Create OpenFGA client
        createOpenFgaClient();
        
        System.out.println("\nüîÑ Starting continuous operations loop...");
        System.out.println("   Operations will run every 5 seconds until stopped (Ctrl+C)");
        System.out.println("   This matches the behavior of other OpenFGA SDK examples");
        
        // Run operations continuously in a loop like the JS example
        int operationCount = 0;
        while (true) {
            try {
                operationCount++;
                System.out.println("\n--- Operation " + operationCount + " ---");
                performOperations();
                
                // Wait 5 seconds before next iteration
                TimeUnit.SECONDS.sleep(5);
            } catch (Exception e) {
                System.err.println("Error in operation " + operationCount + ": " + e.getMessage());
                e.printStackTrace();
                TimeUnit.SECONDS.sleep(2);
            }
        }
    }

    private static void createOpenFgaClient() throws Exception {
        System.out.println("\nüîß Creating OpenFGA client...");
        
        String apiUrl = dotenv.get("FGA_API_URL", "http://localhost:8080");
        String storeId = dotenv.get("FGA_STORE_ID");
        String modelId = dotenv.get("FGA_MODEL_ID");
        
        if (storeId == null || modelId == null) {
            throw new IllegalStateException("FGA_STORE_ID and FGA_MODEL_ID must be configured in .env file");
        }
        
        System.out.println("   API URL: " + apiUrl);
        System.out.println("   Store ID: " + storeId);
        System.out.println("   Model ID: " + modelId);
        
        // Create client configuration; telemetry enabled by default (export is a noop if global instance not set))
        ClientConfiguration config = new ClientConfiguration()
                .apiUrl(apiUrl)
                .storeId(storeId)
                .authorizationModelId(modelId);
        
        // Configure authentication if credentials are provided
        String clientId = dotenv.get("FGA_CLIENT_ID");
        String clientSecret = dotenv.get("FGA_CLIENT_SECRET");
        
        if (clientId != null && clientSecret != null) {
            String apiAudience = dotenv.get("FGA_API_AUDIENCE", "https://api.fga.example");
            String apiTokenIssuer = dotenv.get("FGA_API_TOKEN_ISSUER", "auth.fga.example");
            
            config.credentials(new Credentials(
                new ClientCredentials()
                    .clientId(clientId)
                    .clientSecret(clientSecret)
                    .apiAudience(apiAudience)
                    .apiTokenIssuer(apiTokenIssuer)
            ));
            
            System.out.println("   ‚úÖ Client credentials authentication configured");
        } else {
            System.out.println("   ‚ÑπÔ∏è  No authentication configured (using public API)");
        }
        
        // Create the client
        fgaClient = new OpenFgaClient(config);
        
        System.out.println("‚úÖ OpenFGA client created with telemetry enabled!");
        System.out.println("   üìä Metrics will be automatically collected by OpenTelemetry agent");
    }
    private static void performOperations() throws Exception {
        // Read the authorization model (similar to JS SDK example)
        System.out.println("üìñ Reading authorization model...");
        ClientReadAuthorizationModelResponse modelResponse = fgaClient.readAuthorizationModel().get();
        System.out.println("‚úì Read authorization model: " + modelResponse.getAuthorizationModel().getId());
        
        // Write some test tuples first (to ensure we have data to check)
        System.out.println("‚úçÔ∏è Writing test tuples...");
        try {
            List<ClientTupleKey> tuples = List.of(
                new ClientTupleKey()
                    .user("user:anne")
                    .relation("viewer")
                    ._object("doc:2021-budget"),
                new ClientTupleKey()
                    .user("user:beth")
                    .relation("can_write")
                    ._object("doc:2021-budget"),
                new ClientTupleKey()
                    .user("user:anne")
                    .relation("viewer")
                    ._object("doc:2022-budget")
            );
            
            ClientWriteResponse writeResponse = fgaClient.write(new ClientWriteRequest().writes(tuples)).get();
            System.out.println("‚úì Wrote " + tuples.size() + " test tuples");
        } catch (Exception writeError) {
            System.out.println("‚ö†Ô∏è  Could not write tuples (may not be needed): " + writeError.getMessage());
        }
        
        // Read existing tuples (similar to JS SDK example)
        System.out.println("üìã Reading existing tuples...");
        ClientReadResponse readResponse = fgaClient.read(new ClientReadRequest()).get();
        System.out.println("‚úì Found " + readResponse.getTuples().size() + " existing tuples");
        
        // Perform check requests (matching JS SDK example patterns)
        System.out.println("üîç Performing check operations...");
        
        // Check: user:anne can view doc:2021-budget
        ClientCheckRequest check1 = new ClientCheckRequest()
            .user("user:anne")
            .relation("viewer")
            ._object("doc:2021-budget");
        ClientCheckResponse checkResponse1 = fgaClient.check(check1).get();
        System.out.println("‚úì Check user:anne can view doc:2021-budget: " + checkResponse1.getAllowed());
        
        // Check: user:beth can writer doc:2021-budget
        ClientCheckRequest check2 = new ClientCheckRequest()
            .user("user:beth")
            .relation("can_write")
            ._object("doc:2021-budget");
        ClientCheckResponse checkResponse2 = fgaClient.check(check2).get();
        System.out.println("‚úì Check user:beth can write doc:2021-budget: " + checkResponse2.getAllowed());
        
        // Check: user:anne can view doc:2022-budget
        ClientCheckRequest check3 = new ClientCheckRequest()
            .user("user:anne")
            .relation("viewer")
            ._object("doc:2022-budget");
        ClientCheckResponse checkResponse3 = fgaClient.check(check3).get();
        System.out.println("‚úì Check user:anne can view doc:2022-budget: " + checkResponse3.getAllowed());

        // Batch check operations (matching JS SDK example)
        System.out.println("üîç Performing batch check operations...");
        List<ClientCheckRequest> batchChecks = List.of(
            new ClientCheckRequest()
                .user("user:anne")
                .relation("viewer")
                ._object("doc:2021-budget"),
            new ClientCheckRequest()
                .user("user:beth")
                .relation("can_write")
                ._object("doc:2021-budget"),
            new ClientCheckRequest()
                .user("user:anne")
                .relation("viewer")
                ._object("doc:2022-budget")
        );

        List<ClientBatchCheckClientResponse> batchResponse = fgaClient.clientBatchCheck(batchChecks).get();
        System.out.println("‚úì Batch check completed with " + batchResponse.size() + " results:");
        
        for (int i = 0; i < batchResponse.size(); i++) {
            ClientBatchCheckClientResponse response = batchResponse.get(i);
            String correlationId = "check-" + (i + 1);
            if (response.getThrowable() == null) {
                System.out.println("  - " + correlationId + ": " + response.getAllowed());
            } else {
                System.out.println("  - " + correlationId + ": ERROR - " + response.getThrowable().getMessage());
            }
        }

        // List objects operation (similar to JS SDK)
        System.out.println("üìã Listing objects user:anne can view...");
        ClientListObjectsRequest listRequest = new ClientListObjectsRequest()
            .user("user:anne")
            .relation("viewer")
            .type("doc");
        
        ClientListObjectsResponse listResponse = fgaClient.listObjects(listRequest).get();
        System.out.println("‚úì user:anne can view " + listResponse.getObjects().size() + " documents: " + 
            String.join(", ", listResponse.getObjects()));

        System.out.println("üìä All operations completed - metrics generated!");
        System.out.println("üìä Generated metrics: request.duration, query.duration, credentials.request");
    }
}

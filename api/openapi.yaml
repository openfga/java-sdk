openapi: 3.0.1
info:
  contact:
    email: community@openfga.dev
    name: OpenFGA
    url: https://openfga.dev
  description: A high performance and flexible authorization/permission engine built
    for developers and inspired by Google Zanzibar.
  license:
    name: Apache-2.0
    url: https://github.com/openfga/openfga/blob/main/LICENSE
  title: OpenFGA
  version: "0.1"
servers:
- url: /
tags:
- name: OpenFga
paths:
  /stores:
    get:
      description: |
        Returns a paginated list of OpenFGA stores and a continuation token to get additional stores.
        The continuation token will be empty if there are no more stores.
      operationId: ListStores
      parameters:
      - in: query
        name: page_size
        schema:
          format: int32
          type: integer
      - in: query
        name: continuation_token
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListStoresResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorMessageResponse'
          description: Request failed due to invalid input.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathUnknownErrorMessageResponse'
          description: Request failed due to incorrect path.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessageResponse'
          description: Request failed due to internal server error.
      summary: List all stores
      tags:
      - OpenFga
      x-accepts: application/json
    post:
      description: Create a unique OpenFGA store which will be used to store authorization
        models and relationship tuples.
      operationId: CreateStore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStoreRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateStoreResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorMessageResponse'
          description: Request failed due to invalid input.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathUnknownErrorMessageResponse'
          description: Request failed due to incorrect path.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessageResponse'
          description: Request failed due to internal server error.
      summary: Create a store
      tags:
      - OpenFga
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /stores/{store_id}:
    delete:
      description: "Delete an OpenFGA store. This does not delete the data associated\
        \ with the store, like tuples or authorization models."
      operationId: DeleteStore
      parameters:
      - in: path
        name: store_id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: A successful response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorMessageResponse'
          description: Request failed due to invalid input.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathUnknownErrorMessageResponse'
          description: Request failed due to incorrect path.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessageResponse'
          description: Request failed due to internal server error.
      summary: Delete a store
      tags:
      - OpenFga
      x-accepts: application/json
    get:
      description: Returns an OpenFGA store by its identifier
      operationId: GetStore
      parameters:
      - in: path
        name: store_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStoreResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorMessageResponse'
          description: Request failed due to invalid input.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathUnknownErrorMessageResponse'
          description: Request failed due to incorrect path.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessageResponse'
          description: Request failed due to internal server error.
      summary: Get a store
      tags:
      - OpenFga
      x-accepts: application/json
  /stores/{store_id}/assertions/{authorization_model_id}:
    get:
      description: "The ReadAssertions API will return, for a given authorization\
        \ model id, all the assertions stored for it. An assertion is an object that\
        \ contains a tuple key, and the expectation of whether a call to the Check\
        \ API of that tuple key will return true or false. "
      operationId: ReadAssertions
      parameters:
      - in: path
        name: store_id
        required: true
        schema:
          type: string
      - in: path
        name: authorization_model_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadAssertionsResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorMessageResponse'
          description: Request failed due to invalid input.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathUnknownErrorMessageResponse'
          description: Request failed due to incorrect path.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessageResponse'
          description: Request failed due to internal server error.
      summary: Read assertions for an authorization model ID
      tags:
      - OpenFga
      x-accepts: application/json
    put:
      description: "The WriteAssertions API will upsert new assertions for an authorization\
        \ model id, or overwrite the existing ones. An assertion is an object that\
        \ contains a tuple key, and the expectation of whether a call to the Check\
        \ API of that tuple key will return true or false. "
      operationId: WriteAssertions
      parameters:
      - in: path
        name: store_id
        required: true
        schema:
          type: string
      - in: path
        name: authorization_model_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteAssertions_request'
        required: true
      responses:
        "204":
          content: {}
          description: A successful response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorMessageResponse'
          description: Request failed due to invalid input.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathUnknownErrorMessageResponse'
          description: Request failed due to incorrect path.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessageResponse'
          description: Request failed due to internal server error.
      summary: Upsert assertions for an authorization model ID
      tags:
      - OpenFga
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /stores/{store_id}/authorization-models:
    get:
      description: |
        The ReadAuthorizationModels API will return all the authorization models for a certain store.
        OpenFGA's response will contain an array of all authorization models, sorted in descending order of creation.

        ## Example
        Assume that a store's authorization model has been configured twice. To get all the authorization models that have been created in this store, call GET authorization-models. The API will return a response that looks like:
        ```json
        {
          "authorization_models": [
            {
              "id": "01G50QVV17PECNVAHX1GG4Y5NC",
              "type_definitions": [...]
            },
            {
              "id": "01G4ZW8F4A07AKQ8RHSVG9RW04",
              "type_definitions": [...]
            },
          ],
          "continuation_token": "eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ=="
        }
        ```
        If there are no more authorization models available, the `continuation_token` field will be empty
        ```json
        {
          "authorization_models": [
            {
              "id": "01G50QVV17PECNVAHX1GG4Y5NC",
              "type_definitions": [...]
            },
            {
              "id": "01G4ZW8F4A07AKQ8RHSVG9RW04",
              "type_definitions": [...]
            },
          ],
          "continuation_token": ""
        }
        ```
      operationId: ReadAuthorizationModels
      parameters:
      - in: path
        name: store_id
        required: true
        schema:
          type: string
      - in: query
        name: page_size
        schema:
          format: int32
          type: integer
      - in: query
        name: continuation_token
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadAuthorizationModelsResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorMessageResponse'
          description: Request failed due to invalid input.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathUnknownErrorMessageResponse'
          description: Request failed due to incorrect path.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessageResponse'
          description: Request failed due to internal server error.
      summary: Return all the authorization models for a particular store
      tags:
      - OpenFga
      x-accepts: application/json
    post:
      description: "The WriteAuthorizationModel API will add a new authorization model\
        \ to a store.\nEach item in the `type_definitions` array is a type definition\
        \ as specified in the field `type_definition`.\nThe response will return the\
        \ authorization model's ID in the `id` field.\n\n## Example\nTo add an authorization\
        \ model with `user` and `document` type definitions, call POST authorization-models\
        \ API with the body: \n```json\n{\n  \"type_definitions\":[\n    {\n     \
        \ \"type\":\"user\"\n    },\n    {\n      \"type\":\"document\",\n      \"\
        relations\":{\n        \"reader\":{\n          \"union\":{\n            \"\
        child\":[\n              {\n                \"this\":{}\n              },\n\
        \              {\n                \"computedUserset\":{\n                \
        \  \"object\":\"\",\n                  \"relation\":\"writer\"\n         \
        \       }\n              }\n            ]\n          }\n        },\n     \
        \   \"writer\":{\n          \"this\":{}\n        }\n      }\n    }\n  ]\n\
        }\n```\nOpenFGA's response will include the version id for this authorization\
        \ model, which will look like \n```\n{\"authorization_model_id\": \"01G50QVV17PECNVAHX1GG4Y5NC\"\
        }\n```\n"
      operationId: WriteAuthorizationModel
      parameters:
      - in: path
        name: store_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteAuthorizationModel_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WriteAuthorizationModelResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorMessageResponse'
          description: Request failed due to invalid input.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathUnknownErrorMessageResponse'
          description: Request failed due to incorrect path.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessageResponse'
          description: Request failed due to internal server error.
      summary: Create a new authorization model
      tags:
      - OpenFga
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /stores/{store_id}/authorization-models/{id}:
    get:
      description: |-
        The ReadAuthorizationModel API returns an authorization model by its identifier.
        The response will return the authorization model for the particular version.

        ## Example
        To retrieve the authorization model with ID `01G5JAVJ41T49E9TT3SKVS7X1J` for the store, call the GET authorization-models by ID API with `01G5JAVJ41T49E9TT3SKVS7X1J` as the `id` path parameter.  The API will return:
        ```json
        {
          "authorization_model":{
            "id":"01G5JAVJ41T49E9TT3SKVS7X1J",
            "type_definitions":[
              {
                "type":"user"
              },
              {
                "type":"document",
                "relations":{
                  "reader":{
                    "union":{
                      "child":[
                        {
                          "this":{}
                        },
                        {
                          "computedUserset":{
                            "object":"",
                            "relation":"writer"
                          }
                        }
                      ]
                    }
                  },
                  "writer":{
                    "this":{}
                  }
                }
              }
            ]
          }
        }
        ```
        In the above example, there are 2 types (`user` and `document`). The `document` type has 2 relations (`writer` and `reader`).
      operationId: ReadAuthorizationModel
      parameters:
      - in: path
        name: store_id
        required: true
        schema:
          type: string
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadAuthorizationModelResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorMessageResponse'
          description: Request failed due to invalid input.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathUnknownErrorMessageResponse'
          description: Request failed due to incorrect path.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessageResponse'
          description: Request failed due to internal server error.
      summary: Return a particular version of an authorization model
      tags:
      - OpenFga
      x-accepts: application/json
  /stores/{store_id}/changes:
    get:
      description: |
        The ReadChanges API will return a paginated list of tuple changes (additions and deletions) that occurred in a given store, sorted by ascending time. The response will include a continuation token that is used to get the next set of changes. If there are no changes after the provided continuation token, the same token will be returned in order for it to be used when new changes are recorded. If the store never had any tuples added or removed, this token will be empty.
        You can use the `type` parameter to only get the list of tuple changes that affect objects of that type.
      operationId: ReadChanges
      parameters:
      - in: path
        name: store_id
        required: true
        schema:
          type: string
      - in: query
        name: type
        schema:
          type: string
      - in: query
        name: page_size
        schema:
          format: int32
          type: integer
      - in: query
        name: continuation_token
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadChangesResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorMessageResponse'
          description: Request failed due to invalid input.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathUnknownErrorMessageResponse'
          description: Request failed due to incorrect path.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessageResponse'
          description: Request failed due to internal server error.
      summary: Return a list of all the tuple changes
      tags:
      - OpenFga
      x-accepts: application/json
  /stores/{store_id}/check:
    post:
      description: |-
        The Check API queries to check if the user has a certain relationship with an object in a certain store.
        A `contextual_tuples` object may also be included in the body of the request. This object contains one field `tuple_keys`, which is an array of tuple keys.
        You may also provide an `authorization_model_id` in the body. This will be used to assert that the input `tuple_key` is valid for the model specified. If not specified, the assertion will be made against the latest authorization model ID. It is strongly recommended to specify authorization model id for better performance.
        The response will return whether the relationship exists in the field `allowed`.

        ## Example
        In order to check if user `user:anne` of type `user` has a `reader` relationship with object `document:2021-budget` given the following contextual tuple
        ```json
        {
          "user": "user:anne",
          "relation": "member",
          "object": "time_slot:office_hours"
        }
        ```
        the Check API can be used with the following request body:
        ```json
        {
          "tuple_key": {
            "user": "user:anne",
            "relation": "reader",
            "object": "document:2021-budget"
          },
          "contextual_tuples": {
            "tuple_keys": [
              {
                "user": "user:anne",
                "relation": "member",
                "object": "time_slot:office_hours"
              }
            ]
          },
          "authorization_model_id": "01G50QVV17PECNVAHX1GG4Y5NC"
        }
        ```
        OpenFGA's response will include `{ "allowed": true }` if there is a relationship and `{ "allowed": false }` if there isn't.
      operationId: Check
      parameters:
      - in: path
        name: store_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Check_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorMessageResponse'
          description: Request failed due to invalid input.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathUnknownErrorMessageResponse'
          description: Request failed due to incorrect path.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessageResponse'
          description: Request failed due to internal server error.
      summary: Check whether a user is authorized to access an object
      tags:
      - OpenFga
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /stores/{store_id}/expand:
    post:
      description: |-
        The Expand API will return all users and usersets that have certain relationship with an object in a certain store.
        This is different from the `/stores/{store_id}/read` API in that both users and computed usersets are returned.
        Body parameters `tuple_key.object` and `tuple_key.relation` are all required.
        The response will return a tree whose leaves are the specific users and usersets. Union, intersection and difference operator are located in the intermediate nodes.

        ## Example
        To expand all users that have the `reader` relationship with object `document:2021-budget`, use the Expand API with the following request body
        ```json
        {
          "tuple_key": {
            "object": "document:2021-budget",
            "relation": "reader"
          },
          "authorization_model_id": "01G50QVV17PECNVAHX1GG4Y5NC"
        }
        ```
        OpenFGA's response will be a userset tree of the users and usersets that have read access to the document.
        ```json
        {
          "tree":{
            "root":{
              "type":"document:2021-budget#reader",
              "union":{
                "nodes":[
                  {
                    "type":"document:2021-budget#reader",
                    "leaf":{
                      "users":{
                        "users":[
                          "user:bob"
                        ]
                      }
                    }
                  },
                  {
                    "type":"document:2021-budget#reader",
                    "leaf":{
                      "computed":{
                        "userset":"document:2021-budget#writer"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
        ```
        The caller can then call expand API for the `writer` relationship for the `document:2021-budget`.
      operationId: Expand
      parameters:
      - in: path
        name: store_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Expand_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpandResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorMessageResponse'
          description: Request failed due to invalid input.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathUnknownErrorMessageResponse'
          description: Request failed due to incorrect path.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessageResponse'
          description: Request failed due to internal server error.
      summary: "Expand all relationships in userset tree format, and following userset\
        \ rewrite rules.  Useful to reason about and debug a certain relationship"
      tags:
      - OpenFga
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /stores/{store_id}/list-objects:
    post:
      description: |-
        The ListObjects API returns a list of all the objects of the given type that the user has a relation with. To achieve this, both the store tuples and the authorization model are used.
        An `authorization_model_id` may be specified in the body. If it is not specified, the latest authorization model ID will be used. It is strongly recommended to specify authorization model id for better performance.
        You may also specify `contextual_tuples` that will be treated as regular tuples.
        The response will contain the related objects in an array in the "objects" field of the response and they will be strings in the object format `<type>:<id>` (e.g. "document:roadmap").
        The number of objects in the response array will be limited by the execution timeout specified in the flag OPENFGA_LIST_OBJECTS_DEADLINE and by the upper bound specified in the flag OPENFGA_LIST_OBJECTS_MAX_RESULTS, whichever is hit first.
      operationId: ListObjects
      parameters:
      - in: path
        name: store_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListObjects_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListObjectsResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorMessageResponse'
          description: Request failed due to invalid input.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathUnknownErrorMessageResponse'
          description: Request failed due to incorrect path.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessageResponse'
          description: Request failed due to internal server error.
      summary: List all objects of the given type that the user has a relation with
      tags:
      - OpenFga
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /stores/{store_id}/read:
    post:
      description: "The Read API will return the tuples for a certain store that match\
        \ a query filter specified in the body of the request. It is different from\
        \ the `/stores/{store_id}/expand` API in that it only returns relationship\
        \ tuples that are stored in the system and satisfy the query. \nIn the body:\n\
        1. `tuple_key` is optional. If not specified, it will return all tuples in\
        \ the store.\n2. `tuple_key.object` is mandatory if `tuple_key` is specified.\
        \ It can be a full object (e.g., `type:object_id`) or type only (e.g., `type:`).\n\
        3. `tuple_key.user` is mandatory if tuple_key is specified in the case the\
        \ `tuple_key.object` is a type only.\n## Examples\n### Query for all objects\
        \ in a type definition\nTo query for all objects that `user:bob` has `reader`\
        \ relationship in the `document` type definition, call read API with body\
        \ of\n```json\n{\n \"tuple_key\": {\n     \"user\": \"user:bob\",\n     \"\
        relation\": \"reader\",\n     \"object\": \"document:\"\n  }\n}\n```\nThe\
        \ API will return tuples and a continuation token, something like\n```json\n\
        {\n  \"tuples\": [\n    {\n      \"key\": {\n        \"user\": \"user:bob\"\
        ,\n        \"relation\": \"reader\",\n        \"object\": \"document:2021-budget\"\
        \n      },\n      \"timestamp\": \"2021-10-06T15:32:11.128Z\"\n    }\n  ],\n\
        \  \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\"\
        \n}\n```\nThis means that `user:bob` has a `reader` relationship with 1 document\
        \ `document:2021-budget`. Note that this API, unlike the List Objects API,\
        \ does not evaluate the tuples in the store.\nThe continuation token will\
        \ be empty if there are no more tuples to query.### Query for all stored relationship\
        \ tuples that have a particular relation and object\nTo query for all users\
        \ that have `reader` relationship with `document:2021-budget`, call read API\
        \ with body of \n```json\n{\n  \"tuple_key\": {\n     \"object\": \"document:2021-budget\"\
        ,\n     \"relation\": \"reader\"\n   }\n}\n```\nThe API will return something\
        \ like \n```json\n{\n  \"tuples\": [\n    {\n      \"key\": {\n        \"\
        user\": \"user:bob\",\n        \"relation\": \"reader\",\n        \"object\"\
        : \"document:2021-budget\"\n      },\n      \"timestamp\": \"2021-10-06T15:32:11.128Z\"\
        \n    }\n  ],\n  \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\"\
        \n}\n```\nThis means that `document:2021-budget` has 1 `reader` (`user:bob`).\
        \  Note that, even if the model said that all `writers` are also `readers`,\
        \ the API will not return writers such as `user:anne` because it only returns\
        \ tuples and does not evaluate them.\n### Query for all users with all relationships\
        \ for a particular document\nTo query for all users that have any relationship\
        \ with `document:2021-budget`, call read API with body of \n```json\n{\n \
        \ \"tuple_key\": {\n      \"object\": \"document:2021-budget\"\n   }\n}\n\
        ```\nThe API will return something like \n```json\n{\n  \"tuples\": [\n  \
        \  {\n      \"key\": {\n        \"user\": \"user:anne\",\n        \"relation\"\
        : \"writer\",\n        \"object\": \"document:2021-budget\"\n      },\n  \
        \    \"timestamp\": \"2021-10-05T13:42:12.356Z\"\n    },\n    {\n      \"\
        key\": {\n        \"user\": \"user:bob\",\n        \"relation\": \"reader\"\
        ,\n        \"object\": \"document:2021-budget\"\n      },\n      \"timestamp\"\
        : \"2021-10-06T15:32:11.128Z\"\n    }\n  ],\n  \"continuation_token\": \"\
        eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\"\
        \n}\n```\nThis means that `document:2021-budget` has 1 `reader` (`user:bob`)\
        \ and 1 `writer` (`user:anne`).\n"
      operationId: Read
      parameters:
      - in: path
        name: store_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Read_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorMessageResponse'
          description: Request failed due to invalid input.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathUnknownErrorMessageResponse'
          description: Request failed due to incorrect path.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessageResponse'
          description: Request failed due to internal server error.
      summary: "Get tuples from the store that matches a query, without following\
        \ userset rewrite rules"
      tags:
      - OpenFga
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
  /stores/{store_id}/write:
    post:
      description: "The Write API will update the tuples for a certain store. Tuples\
        \ and type definitions allow OpenFGA to determine whether a relationship exists\
        \ between an object and an user.\nIn the body, `writes` adds new tuples while\
        \ `deletes` removes existing tuples. The API is not idempotent: if, later\
        \ on, you try to add the same tuple, or if you try to delete a non-existing\
        \ tuple, it will throw an error.\nAn `authorization_model_id` may be specified\
        \ in the body. If it is, it will be used to assert that each written tuple\
        \ (not deleted) is valid for the model specified. If it is not specified,\
        \ the latest authorization model ID will be used.\n## Example\n### Adding\
        \ relationships\nTo add `user:anne` as a `writer` for `document:2021-budget`,\
        \ call write API with the following \n```json\n{\n  \"writes\": {\n    \"\
        tuple_keys\": [\n      {\n        \"user\": \"user:anne\",\n        \"relation\"\
        : \"writer\",\n        \"object\": \"document:2021-budget\"\n      }\n   \
        \ ]\n  },\n  \"authorization_model_id\": \"01G50QVV17PECNVAHX1GG4Y5NC\"\n\
        }\n```\n### Removing relationships\nTo remove `user:bob` as a `reader` for\
        \ `document:2021-budget`, call write API with the following \n```json\n{\n\
        \  \"deletes\": {\n    \"tuple_keys\": [\n      {\n        \"user\": \"user:bob\"\
        ,\n        \"relation\": \"reader\",\n        \"object\": \"document:2021-budget\"\
        \n      }\n    ]\n  }\n}\n```\n"
      operationId: Write
      parameters:
      - in: path
        name: store_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Write_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WriteResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorMessageResponse'
          description: Request failed due to invalid input.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathUnknownErrorMessageResponse'
          description: Request failed due to incorrect path.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessageResponse'
          description: Request failed due to internal server error.
      summary: Add or delete tuples from the store
      tags:
      - OpenFga
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts: application/json
components:
  schemas:
    Any:
      additionalProperties:
        type: object
      properties:
        '@type':
          type: string
      type: object
    Assertion:
      example:
        tuple_key:
          user: user:anne
          object: document:2021-budget
          relation: reader
        expectation: true
      properties:
        tuple_key:
          $ref: '#/components/schemas/TupleKey'
        expectation:
          type: boolean
      required:
      - expectation
      - tuple_key
      type: object
    AuthorizationModel:
      example:
        schema_version: schema_version
        type_definitions:
        - type: user
        - type: document
          relations:
            reader:
              union:
                child:
                - this: {}
                - computedUserset:
                    object: ""
                    relation: writer
            writer:
              this: {}
          metadata:
            relations:
              reader:
                directly_related_user_types:
                - type: user
              writer:
                directly_related_user_types:
                - type: user
        id: 01G5JAVJ41T49E9TT3SKVS7X1J
      properties:
        id:
          example: 01G5JAVJ41T49E9TT3SKVS7X1J
          type: string
        schema_version:
          type: string
        type_definitions:
          example:
          - type: user
          - type: document
            relations:
              reader:
                union:
                  child:
                  - this: {}
                  - computedUserset:
                      object: ""
                      relation: writer
              writer:
                this: {}
            metadata:
              relations:
                reader:
                  directly_related_user_types:
                  - type: user
                writer:
                  directly_related_user_types:
                  - type: user
          items:
            $ref: '#/components/schemas/TypeDefinition'
          type: array
      required:
      - schema_version
      type: object
    CheckResponse:
      example:
        allowed: true
        resolution: resolution
      properties:
        allowed:
          example: true
          type: boolean
        resolution:
          description: For internal use only.
          type: string
      type: object
    Computed:
      example:
        userset: userset
      properties:
        userset:
          type: string
      type: object
    ContextualTupleKeys:
      properties:
        tuple_keys:
          items:
            $ref: '#/components/schemas/TupleKey'
          type: array
      required:
      - tuple_keys
      type: object
    CreateStoreRequest:
      example:
        name: my-store-name
      properties:
        name:
          example: my-store-name
          type: string
      required:
      - name
      type: object
    CreateStoreResponse:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 01YCP46JKYM8FJCQ37NMBYHE5X
      properties:
        id:
          example: 01YCP46JKYM8FJCQ37NMBYHE5X
          type: string
        name:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      type: object
    DeleteStoreResponse:
      type: object
    DirectUserset:
      description: |-
        A DirectUserset is a sentinel message for referencing
        the direct members specified by an object/relation mapping.
      type: object
    ErrorCode:
      default: no_error
      enum:
      - no_error
      - validation_error
      - authorization_model_not_found
      - authorization_model_resolution_too_complex
      - invalid_write_input
      - cannot_allow_duplicate_tuples_in_one_request
      - cannot_allow_duplicate_types_in_one_request
      - cannot_allow_multiple_references_to_one_relation
      - invalid_continuation_token
      - invalid_tuple_set
      - invalid_check_input
      - invalid_expand_input
      - unsupported_user_set
      - invalid_object_format
      - write_failed_due_to_invalid_input
      - authorization_model_assertions_not_found
      - latest_authorization_model_not_found
      - type_not_found
      - relation_not_found
      - empty_relation_definition
      - invalid_user
      - invalid_tuple
      - unknown_relation
      - store_id_invalid_length
      - assertions_too_many_items
      - id_too_long
      - authorization_model_id_too_long
      - tuple_key_value_not_specified
      - tuple_keys_too_many_or_too_few_items
      - page_size_invalid
      - param_missing_value
      - difference_base_missing_value
      - subtract_base_missing_value
      - object_too_long
      - relation_too_long
      - type_definitions_too_few_items
      - type_invalid_length
      - type_invalid_pattern
      - relations_too_few_items
      - relations_too_long
      - relations_invalid_pattern
      - object_invalid_pattern
      - query_string_type_continuation_token_mismatch
      - exceeded_entity_limit
      - invalid_contextual_tuple
      - duplicate_contextual_tuple
      - invalid_authorization_model
      - unsupported_schema_version
      type: string
    ExpandResponse:
      example:
        tree:
          root:
            intersection:
              nodes:
              - null
              - null
            name: name
            difference:
              subtract: null
              base: null
            union:
              nodes:
              - null
              - null
            leaf:
              computed:
                userset: userset
              tupleToUserset:
                computed:
                - userset: userset
                - userset: userset
                tupleset: tupleset
              users:
                users:
                - users
                - users
      properties:
        tree:
          $ref: '#/components/schemas/UsersetTree'
      type: object
    GetStoreResponse:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 01YCP46JKYM8FJCQ37NMBYHE5X
      properties:
        id:
          example: 01YCP46JKYM8FJCQ37NMBYHE5X
          type: string
        name:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      type: object
    InternalErrorCode:
      default: no_internal_error
      enum:
      - no_internal_error
      - internal_error
      - cancelled
      - deadline_exceeded
      - already_exists
      - resource_exhausted
      - failed_precondition
      - aborted
      - out_of_range
      - unavailable
      - data_loss
      type: string
    InternalErrorMessageResponse:
      example:
        code: internal_error
        message: Internal Server Error
      properties:
        code:
          $ref: '#/components/schemas/InternalErrorCode'
        message:
          type: string
      type: object
    Leaf:
      description: |-
        A leaf node contains either
        - a set of users (which may be individual users, or usersets
          referencing other relations)
        - a computed node, which is the result of a computed userset
          value in the authorization model
        - a tupleToUserset nodes, containing the result of expanding
          a tupleToUserset value in a authorization model.
      example:
        computed:
          userset: userset
        tupleToUserset:
          computed:
          - userset: userset
          - userset: userset
          tupleset: tupleset
        users:
          users:
          - users
          - users
      properties:
        users:
          $ref: '#/components/schemas/Users'
        computed:
          $ref: '#/components/schemas/Computed'
        tupleToUserset:
          $ref: '#/components/schemas/UsersetTree.TupleToUserset'
      type: object
    ListObjectsResponse:
      example:
        objects:
        - document:roadmap
        - document:planning
      properties:
        objects:
          example:
          - document:roadmap
          - document:planning
          items:
            type: string
          type: array
      type: object
    ListStoresResponse:
      example:
        continuation_token: eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==
        stores:
        - updated_at: 2000-01-23T04:56:07.000+00:00
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          deleted_at: 2000-01-23T04:56:07.000+00:00
        - updated_at: 2000-01-23T04:56:07.000+00:00
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          deleted_at: 2000-01-23T04:56:07.000+00:00
      properties:
        stores:
          items:
            $ref: '#/components/schemas/Store'
          type: array
        continuation_token:
          description: The continuation token will be empty if there are no more stores.
          example: eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==
          type: string
      type: object
    Metadata:
      properties:
        relations:
          additionalProperties:
            $ref: '#/components/schemas/RelationMetadata'
          type: object
      type: object
    Node:
      example:
        intersection:
          nodes:
          - null
          - null
        name: name
        difference:
          subtract: null
          base: null
        union:
          nodes:
          - null
          - null
        leaf:
          computed:
            userset: userset
          tupleToUserset:
            computed:
            - userset: userset
            - userset: userset
            tupleset: tupleset
          users:
            users:
            - users
            - users
      properties:
        name:
          type: string
        leaf:
          $ref: '#/components/schemas/Leaf'
        difference:
          $ref: '#/components/schemas/UsersetTree.Difference'
        union:
          $ref: '#/components/schemas/Nodes'
        intersection:
          $ref: '#/components/schemas/Nodes'
      type: object
    Nodes:
      example:
        nodes:
        - null
        - null
      properties:
        nodes:
          items:
            $ref: '#/components/schemas/Node'
          type: array
      type: object
    NotFoundErrorCode:
      default: no_not_found_error
      enum:
      - no_not_found_error
      - undefined_endpoint
      - store_id_not_found
      - unimplemented
      type: string
    ObjectRelation:
      properties:
        object:
          type: string
        relation:
          type: string
      type: object
    PathUnknownErrorMessageResponse:
      example:
        code: undefined_endpoint
        message: Endpoint not enabled
      properties:
        code:
          $ref: '#/components/schemas/NotFoundErrorCode'
        message:
          type: string
      type: object
    ReadAssertionsResponse:
      example:
        assertions:
        - tuple_key:
            user: user:anne
            object: document:2021-budget
            relation: reader
          expectation: true
        - tuple_key:
            user: user:anne
            object: document:2021-budget
            relation: reader
          expectation: true
        authorization_model_id: 01G5JAVJ41T49E9TT3SKVS7X1J
      properties:
        authorization_model_id:
          example: 01G5JAVJ41T49E9TT3SKVS7X1J
          type: string
        assertions:
          items:
            $ref: '#/components/schemas/Assertion'
          type: array
      type: object
    ReadAuthorizationModelResponse:
      example:
        authorization_model:
          schema_version: schema_version
          type_definitions:
          - type: user
          - type: document
            relations:
              reader:
                union:
                  child:
                  - this: {}
                  - computedUserset:
                      object: ""
                      relation: writer
              writer:
                this: {}
            metadata:
              relations:
                reader:
                  directly_related_user_types:
                  - type: user
                writer:
                  directly_related_user_types:
                  - type: user
          id: 01G5JAVJ41T49E9TT3SKVS7X1J
      properties:
        authorization_model:
          $ref: '#/components/schemas/AuthorizationModel'
      type: object
    ReadAuthorizationModelsResponse:
      example:
        continuation_token: eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==
        authorization_models:
        - schema_version: schema_version
          type_definitions:
          - type: user
          - type: document
            relations:
              reader:
                union:
                  child:
                  - this: {}
                  - computedUserset:
                      object: ""
                      relation: writer
              writer:
                this: {}
            metadata:
              relations:
                reader:
                  directly_related_user_types:
                  - type: user
                writer:
                  directly_related_user_types:
                  - type: user
          id: 01G5JAVJ41T49E9TT3SKVS7X1J
        - schema_version: schema_version
          type_definitions:
          - type: user
          - type: document
            relations:
              reader:
                union:
                  child:
                  - this: {}
                  - computedUserset:
                      object: ""
                      relation: writer
              writer:
                this: {}
            metadata:
              relations:
                reader:
                  directly_related_user_types:
                  - type: user
                writer:
                  directly_related_user_types:
                  - type: user
          id: 01G5JAVJ41T49E9TT3SKVS7X1J
      properties:
        authorization_models:
          items:
            $ref: '#/components/schemas/AuthorizationModel'
          type: array
        continuation_token:
          description: The continuation token will be empty if there are no more models.
          example: eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==
          type: string
      type: object
    ReadChangesResponse:
      example:
        continuation_token: eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==
        changes:
        - tuple_key:
            user: user:anne
            object: document:2021-budget
            relation: reader
          operation: null
          timestamp: 2000-01-23T04:56:07.000+00:00
        - tuple_key:
            user: user:anne
            object: document:2021-budget
            relation: reader
          operation: null
          timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        changes:
          items:
            $ref: '#/components/schemas/TupleChange'
          type: array
        continuation_token:
          description: The continuation token will be identical if there are no new
            changes.
          example: eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==
          type: string
      type: object
    ReadResponse:
      example:
        continuation_token: eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==
        tuples:
        - key:
            user: user:anne
            object: document:2021-budget
            relation: reader
          timestamp: 2000-01-23T04:56:07.000+00:00
        - key:
            user: user:anne
            object: document:2021-budget
            relation: reader
          timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        tuples:
          items:
            $ref: '#/components/schemas/Tuple'
          type: array
        continuation_token:
          description: The continuation token will be empty if there are no more tuples.
          example: eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==
          type: string
      type: object
    RelationMetadata:
      properties:
        directly_related_user_types:
          items:
            $ref: '#/components/schemas/RelationReference'
          type: array
      type: object
    RelationReference:
      description: RelationReference represents a relation of a particular object
        type (e.g. 'document#viewer').
      properties:
        type:
          example: group
          type: string
        relation:
          example: member
          type: string
        wildcard:
          type: object
      required:
      - type
      type: object
    Status:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
        details:
          items:
            $ref: '#/components/schemas/Any'
          type: array
      type: object
    Store:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        deleted_at: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          type: string
        name:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        deleted_at:
          format: date-time
          type: string
      type: object
    Tuple:
      example:
        key:
          user: user:anne
          object: document:2021-budget
          relation: reader
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        key:
          $ref: '#/components/schemas/TupleKey'
        timestamp:
          format: date-time
          type: string
      type: object
    TupleChange:
      example:
        tuple_key:
          user: user:anne
          object: document:2021-budget
          relation: reader
        operation: null
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        tuple_key:
          $ref: '#/components/schemas/TupleKey'
        operation:
          $ref: '#/components/schemas/TupleOperation'
        timestamp:
          format: date-time
          type: string
      type: object
    TupleKey:
      example:
        user: user:anne
        object: document:2021-budget
        relation: reader
      properties:
        object:
          example: document:2021-budget
          maxLength: 256
          type: string
        relation:
          example: reader
          maxLength: 50
          type: string
        user:
          example: user:anne
          maxLength: 512
          type: string
      type: object
    TupleKeys:
      properties:
        tuple_keys:
          items:
            $ref: '#/components/schemas/TupleKey'
          type: array
      required:
      - tuple_keys
      type: object
    TupleOperation:
      default: TUPLE_OPERATION_WRITE
      enum:
      - TUPLE_OPERATION_WRITE
      - TUPLE_OPERATION_DELETE
      title: buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
      type: string
    TypeDefinition:
      properties:
        type:
          example: document
          type: string
        relations:
          additionalProperties:
            $ref: '#/components/schemas/Userset'
          example:
            reader:
              union:
                child:
                - this: {}
                - computedUserset:
                    object: ""
                    relation: writer
            writer:
              this: {}
          type: object
        metadata:
          $ref: '#/components/schemas/Metadata'
      required:
      - type
      type: object
    Users:
      example:
        users:
        - users
        - users
      properties:
        users:
          items:
            type: string
          type: array
      type: object
    Userset:
      properties:
        this:
          description: |-
            A DirectUserset is a sentinel message for referencing
            the direct members specified by an object/relation mapping.
          type: object
        computedUserset:
          $ref: '#/components/schemas/ObjectRelation'
        tupleToUserset:
          $ref: '#/components/schemas/TupleToUserset'
        union:
          $ref: '#/components/schemas/Usersets'
        intersection:
          $ref: '#/components/schemas/Usersets'
        difference:
          $ref: '#/components/schemas/Difference'
      type: object
    UsersetTree:
      description: A UsersetTree contains the result of an Expansion.
      example:
        root:
          intersection:
            nodes:
            - null
            - null
          name: name
          difference:
            subtract: null
            base: null
          union:
            nodes:
            - null
            - null
          leaf:
            computed:
              userset: userset
            tupleToUserset:
              computed:
              - userset: userset
              - userset: userset
              tupleset: tupleset
            users:
              users:
              - users
              - users
      properties:
        root:
          $ref: '#/components/schemas/Node'
      type: object
    UsersetTree.Difference:
      example:
        subtract: null
        base: null
      properties:
        base:
          $ref: '#/components/schemas/Node'
        subtract:
          $ref: '#/components/schemas/Node'
      type: object
    UsersetTree.TupleToUserset:
      example:
        computed:
        - userset: userset
        - userset: userset
        tupleset: tupleset
      properties:
        tupleset:
          type: string
        computed:
          items:
            $ref: '#/components/schemas/Computed'
          type: array
      type: object
    Usersets:
      properties:
        child:
          items:
            $ref: '#/components/schemas/Userset'
          type: array
      type: object
    ValidationErrorMessageResponse:
      example:
        code: validation_error
        message: Generic validation error
      properties:
        code:
          $ref: '#/components/schemas/ErrorCode'
        message:
          type: string
      type: object
    Wildcard:
      type: object
    WriteAssertionsResponse:
      type: object
    WriteAuthorizationModelResponse:
      example:
        authorization_model_id: 01G5JAVJ41T49E9TT3SKVS7X1J
      properties:
        authorization_model_id:
          example: 01G5JAVJ41T49E9TT3SKVS7X1J
          type: string
      type: object
    WriteResponse:
      type: object
    Difference:
      properties:
        base:
          $ref: '#/components/schemas/Userset'
        subtract:
          $ref: '#/components/schemas/Userset'
      required:
      - base
      - subtract
      type: object
    TupleToUserset:
      properties:
        tupleset:
          $ref: '#/components/schemas/ObjectRelation'
        computedUserset:
          $ref: '#/components/schemas/ObjectRelation'
      type: object
    WriteAssertions_request:
      properties:
        assertions:
          items:
            $ref: '#/components/schemas/Assertion'
          type: array
      required:
      - assertions
      type: object
    WriteAuthorizationModel_request:
      properties:
        type_definitions:
          items:
            $ref: '#/components/schemas/TypeDefinition'
          type: array
        schema_version:
          type: string
      required:
      - type_definitions
      type: object
    Check_request:
      properties:
        tuple_key:
          $ref: '#/components/schemas/TupleKey'
        contextual_tuples:
          $ref: '#/components/schemas/ContextualTupleKeys'
        authorization_model_id:
          example: 01G5JAVJ41T49E9TT3SKVS7X1J
          type: string
        trace:
          description: Defaults to false. Making it true has performance implications.
          example: false
          readOnly: true
          type: boolean
      required:
      - tuple_key
      type: object
    Expand_request:
      properties:
        tuple_key:
          $ref: '#/components/schemas/TupleKey'
        authorization_model_id:
          example: 01G5JAVJ41T49E9TT3SKVS7X1J
          type: string
      required:
      - tuple_key
      type: object
    ListObjects_request:
      properties:
        authorization_model_id:
          example: 01G5JAVJ41T49E9TT3SKVS7X1J
          type: string
        type:
          example: document
          type: string
        relation:
          example: reader
          type: string
        user:
          example: user:anne
          maxLength: 512
          minLength: 1
          type: string
        contextual_tuples:
          $ref: '#/components/schemas/ContextualTupleKeys'
      required:
      - relation
      - type
      - user
      type: object
    Read_request:
      properties:
        tuple_key:
          $ref: '#/components/schemas/TupleKey'
        page_size:
          example: 50
          format: int32
          type: integer
        continuation_token:
          example: eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==
          type: string
      type: object
    Write_request:
      properties:
        writes:
          $ref: '#/components/schemas/TupleKeys'
        deletes:
          $ref: '#/components/schemas/TupleKeys'
        authorization_model_id:
          example: 01G5JAVJ41T49E9TT3SKVS7X1J
          type: string
      type: object
x-original-swagger-version: "2.0"

